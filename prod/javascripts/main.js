function Controller(){function e(){$(document).on("click",".js-add-array",function(e){e.preventDefault();try{var t=$(".js-insert-array").val();n.createData(JSON.parse(t)),n.renderSlidesTemplate()}catch(e){alert("Ошибка! "+e)}}).on("click",".js-back-step-one",function(){n.renderInputTemplate()}).on("change",".js-add-comment, .js-add-link",function(){n.editData()}).on("click",".js-save-slides",function(){n.renderSliderTemplate(),t=new Slider}).on("click",".js-remove-slide",function(){var e=parseInt($(this).data("id"));n.deleteData(e),n.renderSlidesTemplate()}).on("click",".js-btn-prev",function(){t.moveSlide($(this),$(this).data("direction"))}).on("click",".js-btn-next",function(){t.moveSlide($(this),$(this).data("direction"))}).on("click",".js-bullet",function(){var e=parseInt($(this).data("id"));t.manageBullet($(this),e)}).on("click",".js-back-step-two",function(){n.renderSlidesTemplate()})}var t,n=new Preview;this.init=function(){console.log("init"),n.renderInputTemplate(),e()}}function Preview(){var e=[],t=[],n=Handlebars.compile($("#input-template").html()),r=Handlebars.compile($("#slides-template").html()),i=Handlebars.compile($("#slider-template").html()),o=$(".js-container");Handlebars.registerHelper("json",function(e){return JSON.stringify(e)}),this.createData=function(n){0===t.length&&0===e.length||(t.length=0,e.length=0),Array.isArray(n)?n.forEach(function(n,r){e.push(n),t.push({id:r,image:n,link:"",comment:""})}):alert("Эта структура не массив URL картинок.")},this.editData=function(){t.forEach(function(e){var t;t=$('.js-add-link[data-id="'+e.id+'"]').val(),e.comment=$('.js-add-comment[data-id="'+e.id+'"]').val(),e.link=t})},this.deleteData=function(e){t.forEach(function(n,r){n.id===e&&t.splice(r,1)})},this.renderInputTemplate=function(){o.html(n({slides:e}))},this.renderSlidesTemplate=function(){o.html(r({slides:t}))},this.renderSliderTemplate=function(){o.html(i({slides:t}))}}function Slider(){var e=this,t=0,n=$(".slider-list"),r=$(".slider-item"),i=r.width()*(r.length-1);this.moveSlide=function(r,o){var s=$(".js-slider-item.active");"right"===o?(t-=s.width(),n.addClass("animated").css({left:t+"px"}),s.removeClass("active").next(".js-slider-item").addClass("active"),t<=-i&&(t=0,n.removeClass("animated").css({left:t+"px"}),n.children().first().addClass("active").siblings().removeClass("active"),e.moveSlide("right"))):"left"===o&&(t+=s.width(),n.addClass("animated").css({left:t+"px"}),s.removeClass("active").prev(".js-slider-item").addClass("active"),t>0&&(t=-i,n.removeClass("animated").css({left:t+"px"}),n.children().last().addClass("active").siblings().removeClass("active"),e.moveSlide("left"))),$('.js-bullet[data-id="'+$(".js-slider-item.active").data("id")+'"]').addClass("active").siblings().removeClass("active")},this.manageBullet=function(e,t){var r=$('.js-slider-item[data-id="'+t+'"]'),i=t*r.width();n.addClass("animated").css({left:"-"+i+"px"}),r.addClass("active").siblings().removeClass("active"),e.addClass("active").siblings().removeClass("active")},this.autoplaySlider=function(){setInterval(function(){$(".slider").hasClass("hover")||e.moveSlide("right")},7e3)}}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return se.call(t,e)>-1!==n}):we.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return fe.each(e.match(Te)||[],function(e,n){t[n]=!0}),t}function c(e){return e}function u(e){throw e}function l(e,t,n,r){var i;try{e&&fe.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&fe.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function p(){te.removeEventListener("DOMContentLoaded",p),e.removeEventListener("load",p),fe.ready()}function h(){this.expando=fe.expando+h.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ie.test(e)?JSON.parse(e):e)}function d(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(He,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=f(n)}catch(e){}Oe.set(e,t,n)}else n=void 0;return n}function m(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return fe.css(e,t,"")},c=a(),u=n&&n[3]||(fe.cssNumber[t]?"":"px"),l=(fe.cssNumber[t]||"px"!==u&&+c)&&Me.exec(fe.css(e,t));if(l&&l[3]!==u){u=u||l[3],n=n||[],l=+c||1;do{l/=o=o||".5",fe.style(e,t,l+u)}while(o!==(o=a()/c)&&1!==o&&--s)}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=i)),i}function g(e){var t,n=e.ownerDocument,r=e.nodeName,i=qe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),qe[r]=i,i)}function v(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=je.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Fe(r)&&(i[o]=g(r))):"none"!==n&&(i[o]="none",je.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?fe.merge([e],n):n}function b(e,t){for(var n=0,r=e.length;n<r;n++)je.set(e[n],"globalEval",!t||je.get(t[n],"globalEval"))}function x(e,t,n,r,i){for(var o,s,a,c,u,l,p=t.createDocumentFragment(),h=[],f=0,d=e.length;f<d;f++)if((o=e[f])||0===o)if("object"===fe.type(o))fe.merge(h,o.nodeType?[o]:o);else if(Ke.test(o)){for(s=s||p.appendChild(t.createElement("div")),a=(Ve.exec(o)||["",""])[1].toLowerCase(),c=ze[a]||ze._default,s.innerHTML=c[1]+fe.htmlPrefilter(o)+c[2],l=c[0];l--;)s=s.lastChild;fe.merge(h,s.childNodes),(s=p.firstChild).textContent=""}else h.push(t.createTextNode(o));for(p.textContent="",f=0;o=h[f++];)if(r&&fe.inArray(o,r)>-1)i&&i.push(o);else if(u=fe.contains(o.ownerDocument,o),s=y(p.appendChild(o),"script"),u&&b(s),n)for(l=0;o=s[l++];)Ue.test(o.type||"")&&n.push(o);return p}function k(){return!0}function S(){return!1}function w(){try{return te.activeElement}catch(e){}}function C(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)C(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=S;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,i,r,n)})}function E(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function P(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function _(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function T(e,t){var n,r,i,o,s,a,c,u;if(1===t.nodeType){if(je.hasData(e)&&(o=je.access(e),s=je.set(t,o),u=o.events)){delete s.handle,s.events={};for(i in u)for(n=0,r=u[i].length;n<r;n++)fe.event.add(t,i,u[i][n])}Oe.hasData(e)&&(a=Oe.access(e),c=fe.extend({},a),Oe.set(t,c))}}function N(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,r,i){t=ie.apply([],t);var o,s,a,c,u,l,p=0,h=e.length,f=h-1,d=t[0],m=fe.isFunction(d);if(m||h>1&&"string"==typeof d&&!he.checkClone&&et.test(d))return e.each(function(n){var o=e.eq(n);m&&(t[0]=d.call(this,n,o.html())),A(o,t,r,i)});if(h&&(o=x(t,e[0].ownerDocument,!1,e,i),s=o.firstChild,1===o.childNodes.length&&(o=s),s||i)){for(c=(a=fe.map(y(o,"script"),P)).length;p<h;p++)u=o,p!==f&&(u=fe.clone(u,!0,!0),c&&fe.merge(a,y(u,"script"))),r.call(e[p],u,p);if(c)for(l=a[a.length-1].ownerDocument,fe.map(a,_),p=0;p<c;p++)u=a[p],Ue.test(u.type||"")&&!je.access(u,"globalEval")&&fe.contains(l,u)&&(u.src?fe._evalUrl&&fe._evalUrl(u.src):n(u.textContent.replace(nt,""),l))}return e}function D(e,t,n){for(var r,i=t?fe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||fe.cleanData(y(r)),r.parentNode&&(n&&fe.contains(r.ownerDocument,r)&&b(y(r,"script")),r.parentNode.removeChild(r));return e}function L(e,t,n){var r,i,o,s,a=e.style;return(n=n||ot(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!he.pixelMarginRight()&&it.test(s)&&rt.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function j(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function O(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=lt.length;n--;)if((e=lt[n]+t)in pt)return e}function I(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=O(e)||e),t}function H(e,t,n){var r=Me.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function $(e,t,n,r,i){var o,s=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=fe.css(e,n+Be[o],!0,i)),r?("content"===n&&(s-=fe.css(e,"padding"+Be[o],!0,i)),"margin"!==n&&(s-=fe.css(e,"border"+Be[o]+"Width",!0,i))):(s+=fe.css(e,"padding"+Be[o],!0,i),"padding"!==n&&(s+=fe.css(e,"border"+Be[o]+"Width",!0,i)));return s}function M(e,t,n){var r,i=ot(e),o=L(e,t,i),s="border-box"===fe.css(e,"boxSizing",!1,i);return it.test(o)?o:(r=s&&(he.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+$(e,t,n||(s?"border":"content"),r,i)+"px")}function B(e,t,n,r,i){return new B.prototype.init(e,t,n,r,i)}function F(){ft&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(F):e.setTimeout(F,fe.fx.interval),fe.fx.tick())}function R(){return e.setTimeout(function(){ht=void 0}),ht=fe.now()}function q(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Be[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function W(e,t,n){for(var r,i=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function V(e,t){var n,r,i,o,s;for(n in e)if(r=fe.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=fe.cssHooks[r])&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function U(e,t,n){var r,i,o=0,s=U.prefilters.length,a=fe.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var t=ht||R(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||R(),duration:n.duration,tweens:[],createTween:function(t,n){var r=fe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(V(l,u.opts.specialEasing);o<s;o++)if(r=U.prefilters[o].call(u,e,l,u.opts))return fe.isFunction(r.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(r.stop,r)),r;return fe.map(l,W,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),fe.fx.timer(fe.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}function z(e){return(e.match(Te)||[]).join(" ")}function K(e){return e.getAttribute&&e.getAttribute("class")||""}function X(e,t,n,r){var i;if(Array.isArray(t))fe.each(t,function(t,i){n||Et.test(e)?r(e,i):X(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==fe.type(t))r(e,t);else for(i in t)X(e+"["+i+"]",t[i],n,r)}function G(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Te)||[];if(fe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function J(e,t,n,r){function i(a){var c;return o[a]=!0,fe.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||s||o[u]?s?!(c=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),c}var o={},s=e===$t;return i(t.dataTypes[0])||!o["*"]&&i("*")}function Y(e,t){var n,r,i=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&fe.extend(!0,e,r),e}function Q(e,t,n){for(var r,i,o,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||e.converters[i+" "+c[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==c[0]&&c.unshift(o),n[o]}function Z(e,t,n,r){var i,o,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=o,o=l.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(s=u[c+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+o}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,oe=ee.push,se=ee.indexOf,ae={},ce=ae.toString,ue=ae.hasOwnProperty,le=ue.toString,pe=le.call(Object),he={},fe=function(e,t){return new fe.fn.init(e,t)},de=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ge=/-([a-z])/g,ve=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},fe.extend=fe.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||fe.isFunction(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(u&&r&&(fe.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ne(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&le.call(n)===pe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ge,ve)},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(de,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var i,o,s=0,a=[];if(r(e))for(i=e.length;s<i;s++)null!=(o=t(e[s],s,n))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,n))&&a.push(o);return ie.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return r=re.call(arguments,2),i=function(){return e.apply(t||this,r.concat(re.call(arguments)))},i.guid=e.guid=e.guid||fe.guid++,i},now:Date.now,support:he}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ee[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,o,s,a,c,l,h,f=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&((t?t.ownerDocument||t:B)!==D&&A(t),t=t||D,j)){if(11!==d&&(c=me.exec(e)))if(i=c[1]){if(9===d){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&$(t,s)&&s.id===i)return n.push(s),n}else{if(c[2])return J.apply(n,t.getElementsByTagName(e)),n;if((i=c[3])&&x.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!V[e+" "]&&(!O||!O.test(e))){if(1!==d)f=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,xe):t.setAttribute("id",a=M),o=(l=C(e)).length;o--;)l[o]="#"+a+" "+p(l[o]);h=l.join(","),f=ge.test(e)&&u(t.parentNode)||t}if(h)try{return J.apply(n,f.querySelectorAll(h)),n}catch(e){}finally{a===M&&t.removeAttribute("id")}}}return P(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>k.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[M]=!0,e}function i(e){var t=D.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)k.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function l(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=R++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,c){var u,l,p,h=[F,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(p=t[M]||(t[M]={}),l=p[t.uniqueID]||(p[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[o])&&u[0]===F&&u[1]===a)return h[2]=u[2];if(l[o]=h,h[2]=e(t,n,c))return!0}return!1}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function d(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function g(e,t,n,i,o,s){return i&&!i[M]&&(i=g(i)),o&&!o[M]&&(o=g(o,s)),r(function(r,s,a,c){var u,l,p,h=[],f=[],g=s.length,v=r||d(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,h,e,a,c),b=n?o||(r?e:g||i)?[]:s:y;if(n&&n(y,b,a,c),i)for(u=m(b,f),i(u,[],a,c),l=u.length;l--;)(p=u[l])&&(b[f[l]]=!(y[f[l]]=p));if(r){if(o||e){if(o){for(u=[],l=b.length;l--;)(p=b[l])&&u.push(y[l]=p);o(null,b=[],u,c)}for(l=b.length;l--;)(p=b[l])&&(u=o?Q(r,p):h[l])>-1&&(r[u]=!(s[u]=p))}}else b=m(b===s?b.splice(g,b.length):b),o?o(null,s,b,c):J.apply(s,b)})}function v(e){for(var t,n,r,i=e.length,o=k.relative[e[0].type],s=o||k.relative[" "],a=o?1:0,c=h(function(e){return e===t},s,!0),u=h(function(e){return Q(t,e)>-1},s,!0),l=[function(e,n,r){var i=!o&&(r||n!==_)||((t=n).nodeType?c(e,n,r):u(e,n,r));return t=null,i}];a<i;a++)if(n=k.relative[e[a].type])l=[h(f(l),n)];else{if((n=k.filter[e[a].type].apply(null,e[a].matches))[M]){for(r=++a;r<i&&!k.relative[e[r].type];r++);return g(a>1&&f(l),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(oe,"$1"),n,a<r&&v(e.slice(a,r)),r<i&&v(e=e.slice(r)),r<i&&p(e))}l.push(n)}return f(l)}function y(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,c,u){var l,p,h,f=0,d="0",g=r&&[],v=[],y=_,b=r||o&&k.find.TAG("*",u),x=F+=null==y?1:Math.random()||.1,S=b.length;for(u&&(_=s===D||s||u);d!==S&&null!=(l=b[d]);d++){if(o&&l){for(p=0,s||l.ownerDocument===D||(A(l),a=!j);h=e[p++];)if(h(l,s||D,a)){c.push(l);break}u&&(F=x)}i&&((l=!h&&l)&&f--,r&&g.push(l))}if(f+=d,i&&d!==f){for(p=0;h=n[p++];)h(g,v,s,a);if(r){if(f>0)for(;d--;)g[d]||v[d]||(v[d]=X.call(c));v=m(v)}J.apply(c,v),u&&!r&&v.length>0&&f+n.length>1&&t.uniqueSort(c)}return u&&(F=x,_=y),g};return i?r(s):s}var b,x,k,S,w,C,E,P,_,T,N,A,D,L,j,O,I,H,$,M="sizzle"+1*new Date,B=e.document,F=0,R=0,q=n(),W=n(),V=n(),U=function(e,t){return e===t&&(N=!0),0},z={}.hasOwnProperty,K=[],X=K.pop,G=K.push,J=K.push,Y=K.slice,Q=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ce=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(re),le=new RegExp("^"+te+"$"),pe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,de=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ke=function(){A()},Se=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(K=Y.call(B.childNodes),B.childNodes),K[B.childNodes.length].nodeType}catch(e){J={apply:K.length?function(e,t){G.apply(e,Y.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},w=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:B;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,L=D.documentElement,j=!w(D),B!==D&&(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ke,!1):n.attachEvent&&n.attachEvent("onunload",ke)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(D.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=de.test(D.getElementsByClassName),x.getById=i(function(e){return L.appendChild(e).id=M,!D.getElementsByName||!D.getElementsByName(M).length}),x.getById?(k.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},k.find.ID=function(e,t){if(void 0!==t.getElementById&&j){var n=t.getElementById(e);return n?[n]:[]}}):(k.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},k.find.ID=function(e,t){if(void 0!==t.getElementById&&j){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),k.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},k.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&j)return t.getElementsByClassName(e)},I=[],O=[],(x.qsa=de.test(D.querySelectorAll))&&(i(function(e){L.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+M+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||O.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=D.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&O.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(x.matchesSelector=de.test(H=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&i(function(e){x.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),I.push("!=",re)}),O=O.length&&new RegExp(O.join("|")),I=I.length&&new RegExp(I.join("|")),t=de.test(L.compareDocumentPosition),$=t||de.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return N=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===D||e.ownerDocument===B&&$(B,e)?-1:t===D||t.ownerDocument===B&&$(B,t)?1:T?Q(T,e)-Q(T,t):0:4&n?-1:1)}:function(e,t){if(e===t)return N=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],c=[t];if(!i||!o)return e===D?-1:t===D?1:i?-1:o?1:T?Q(T,e)-Q(T,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;a[r]===c[r];)r++;return r?s(a[r],c[r]):a[r]===B?-1:c[r]===B?1:0},D):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&A(e),n=n.replace(ce,"='$1']"),x.matchesSelector&&j&&!V[n+" "]&&(!I||!I.test(n))&&(!O||!O.test(n)))try{var r=H.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&A(e),$(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&A(e);var n=k.attrHandle[t.toLowerCase()],r=n&&z.call(k.attrHandle,t.toLowerCase())?n(e,t,!j):void 0;return void 0!==r?r:x.attributes||!j?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(N=!x.detectDuplicates,T=!x.sortStable&&e.slice(0),e.sort(U),N){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return T=null,e},S=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=S(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=S(t);return n},(k=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=q[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&q(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var u,l,p,h,f,d,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!c&&!a,b=!1;if(g){if(o){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;d=m="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?g.firstChild:g.lastChild],s&&y){for(b=(f=(u=(l=(p=(h=g)[M]||(h[M]={}))[h.uniqueID]||(p[h.uniqueID]={}))[e]||[])[0]===F&&u[1])&&u[2],h=f&&g.childNodes[f];h=++f&&h&&h[m]||(b=f=0)||d.pop();)if(1===h.nodeType&&++b&&h===t){l[e]=[F,f,b];break}}else if(y&&(b=f=(u=(l=(p=(h=t)[M]||(h[M]={}))[h.uniqueID]||(p[h.uniqueID]={}))[e]||[])[0]===F&&u[1]),!1===b)for(;(h=++f&&h&&h[m]||(b=f=0)||d.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((l=(p=h[M]||(h[M]={}))[h.uniqueID]||(p[h.uniqueID]={}))[e]=[F,b]),h!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=k.pseudos[e]||k.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[M]?o(n):o.length>1?(i=[e,e,"",n],k.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)e[r=Q(e,i[s])]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(oe,"$1"));return i[M]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||S(t)).indexOf(e)>-1}}),lang:r(function(e){return le.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=j?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!k.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[n<0?n+t:n]}),even:c(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=k.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})k.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return l.prototype=k.filters=k.pseudos,k.setFilters=new l,C=t.tokenize=function(e,n){var r,i,o,s,a,c,u,l=W[e+" "];if(l)return n?0:l.slice(0);for(a=e,c=[],u=k.preFilter;a;){r&&!(i=se.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(o=[])),r=!1,(i=ae.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),a=a.slice(r.length));for(s in k.filter)!(i=pe[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,c).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],o=V[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)(o=v(t[n]))[M]?r.push(o):i.push(o);(o=V(e,y(i,r))).selector=e}return o},P=t.select=function(e,t,n,r){var i,o,s,a,c,l="function"==typeof e&&e,h=!r&&C(e=l.selector||e);if(n=n||[],1===h.length){if((o=h[0]=h[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&j&&k.relative[o[1].type]){if(!(t=(k.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!k.relative[a=s.type]);)if((c=k.find[a])&&(r=c(s.matches[0].replace(ve,ye),ge.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&p(o)))return J.apply(n,r),n;break}}return(l||E(e,h))(r,t,!j,n,!t||ge.test(e)&&u(t.parentNode)||t),n},x.sortStable=M.split("").sort(U).join("")===M,x.detectDuplicates=!!N,A(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(D.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);fe.find=ye,fe.expr=ye.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ye.uniqueSort,fe.text=ye.getText,fe.isXMLDoc=ye.isXML,fe.contains=ye.contains,fe.escapeSelector=ye.escape;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&fe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=fe.expr.match.needsContext,Se=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,we=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?fe.find.matchesSelector(r,e)?[r]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<r;t++)if(fe.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)fe.find(e,i[t],n);return r>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&ke.test(e)?fe(e):e||[],!1).length}});var Ce,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ce,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Se.test(r[1])&&fe.isPlainObject(t))for(r in t)fe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=te.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,Ce=fe(te);var Pe=/^(?:parents|prev(?:Until|All))/,_e={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&fe(e);if(!ke.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?fe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(fe(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,r){var i=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=fe.filter(r,i)),this.length>1&&(_e[e]||fe.uniqueSort(i),Pe.test(e)&&i.reverse()),this.pushStack(i)}});var Te=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,r,i,o=[],s=[],c=-1,u=function(){for(i=i||e.once,r=t=!0;s.length;c=-1)for(n=s.shift();++c<o.length;)!1===o[c].apply(n[0],n[1])&&e.stopOnFalse&&(c=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(c=o.length-1,s.push(n)),function t(n){fe.each(n,function(n,r){fe.isFunction(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==fe.type(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=c&&c--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,r){var i=fe.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var a=this,l=arguments,p=function(){var e,p;if(!(t<s)){if((e=r.apply(a,l))===n.promise())throw new TypeError("Thenable self-resolution");p=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(p)?i?p.call(e,o(s,n,c,i),o(s,n,u,i)):(s++,p.call(e,o(s,n,c,i),o(s,n,u,i),o(s,n,c,n.notifyWith))):(r!==c&&(a=void 0,l=[e]),(i||n.resolveWith)(a,l))}},h=i?p:function(){try{p()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,h.stackTrace),t+1>=s&&(r!==u&&(a=void 0,l=[e]),n.rejectWith(a,l))}};t?h():(fe.Deferred.getStackHook&&(h.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(h))}}var s=0;return fe.Deferred(function(e){n[0][3].add(o(0,e,fe.isFunction(i)?i:c,e.notifyWith)),n[1][3].add(o(0,e,fe.isFunction(t)?t:c)),n[2][3].add(o(0,e,fe.isFunction(r)?r:u))}).promise()},promise:function(e){return null!=e?fe.extend(e,i):i}},o={};return fe.each(n,function(e,t){var s=t[2],a=t[5];i[t[1]]=s.add,a&&s.add(function(){r=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),o=fe.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(l(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||fe.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)l(i[n],s(n),o.reject);return o.promise()}});var Ne=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ne.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Ae=fe.Deferred();fe.fn.ready=function(e){return Ae.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Ae.resolveWith(te,[fe]))}}),fe.ready.then=Ae.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(fe.ready):(te.addEventListener("DOMContentLoaded",p),e.addEventListener("load",p));var De=function(e,t,n,r,i,o,s){var a=0,c=e.length,u=null==n;if("object"===fe.type(n)){i=!0;for(a in n)De(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,fe.isFunction(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(fe(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):c?t(e[0],n):o},Le=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Le(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[fe.camelCase(t)]=n;else for(r in t)i[fe.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in r?[t]:t.match(Te)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||fe.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var je=new h,Oe=new h,Ie=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;fe.extend({hasData:function(e){return Oe.hasData(e)||je.hasData(e)},data:function(e,t,n){return Oe.access(e,t,n)},removeData:function(e,t){Oe.remove(e,t)},_data:function(e,t,n){return je.access(e,t,n)},_removeData:function(e,t){je.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Oe.get(o),1===o.nodeType&&!je.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=fe.camelCase(r.slice(5)),d(o,r,i[r]));je.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Oe.set(this,e)}):De(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Oe.get(o,e)))return n;if(void 0!==(n=d(o,e)))return n}else this.each(function(){Oe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Oe.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=je.get(e,t),n&&(!r||Array.isArray(n)?r=je.access(e,t,fe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),r=n.length,i=n.shift(),o=fe._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){fe.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return je.get(e,n)||je.access(e,n,{empty:fe.Callbacks("once memory").add(function(){je.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=fe.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=je.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var $e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Me=new RegExp("^(?:([+-])=|)("+$e+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],Fe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},Re=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},qe={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Fe(this)?fe(this).show():fe(this).hide()})}});var We=/^(?:checkbox|radio)$/i,Ve=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ue=/^$|\/(?:java|ecma)script/i,ze={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var Ke=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),he.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",he.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Xe=te.documentElement,Ge=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ye=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,r,i){var o,s,a,c,u,l,p,h,f,d,m,g=je.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&fe.find.matchesSelector(Xe,i),n.guid||(n.guid=fe.guid++),(c=g.events)||(c=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(Te)||[""]).length;u--;)f=m=(a=Ye.exec(t[u])||[])[1],d=(a[2]||"").split(".").sort(),f&&(p=fe.event.special[f]||{},f=(i?p.delegateType:p.bindType)||f,p=fe.event.special[f]||{},l=fe.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&fe.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=c[f])||((h=c[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,d,s)||e.addEventListener&&e.addEventListener(f,s)),p.add&&(p.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),fe.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,c,u,l,p,h,f,d,m,g=je.hasData(e)&&je.get(e);if(g&&(c=g.events)){for(u=(t=(t||"").match(Te)||[""]).length;u--;)if(a=Ye.exec(t[u])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f){for(p=fe.event.special[f]||{},h=c[f=(r?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!i&&m!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,p.remove&&p.remove.call(e,l));s&&!h.length&&(p.teardown&&!1!==p.teardown.call(e,d,g.handle)||fe.removeEvent(e,f,g.handle),delete c[f])}else for(f in c)fe.event.remove(e,f+t[u],n,r,!0);fe.isEmptyObject(c)&&je.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=fe.event.fix(e),c=new Array(arguments.length),u=(je.get(this,"events")||{})[a.type]||[],l=fe.event.special[a.type]||{};for(c[0]=a,t=1;t<arguments.length;t++)c[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=fe.event.handlers.call(this,a,u),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((fe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<c;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?fe(i,this).index(u)>-1:fe.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==w()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===w()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?k:S,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:S,isPropagationStopped:S,isImmediatePropagationStopped:S,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=k,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=k,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=k,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||fe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,r){return C(this,e,t,n,r)},one:function(e,t,n,r){return C(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,fe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=S),this.each(function(){fe.event.remove(this,e,n,t)})}});var Qe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ze=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Qe,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),c=fe.contains(e.ownerDocument,e);if(!(he.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(a),r=0,i=(o=y(e)).length;r<i;r++)N(o[r],s[r]);if(t)if(n)for(o=o||y(e),s=s||y(a),r=0,i=o.length;r<i;r++)T(o[r],s[r]);else T(e,a);return(s=y(a,"script")).length>0&&b(s,!c&&y(e,"script")),a},cleanData:function(e){for(var t,n,r,i=fe.event.special,o=0;void 0!==(n=e[o]);o++)if(Le(n)){if(t=n[je.expando]){if(t.events)for(r in t.events)i[r]?fe.event.remove(n,r):fe.removeEvent(n,r,t.handle);n[je.expando]=void 0}n[Oe.expando]&&(n[Oe.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return D(this,e,!0)},remove:function(e){return D(this,e)},text:function(e){return De(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||E(this,e).appendChild(e)})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=E(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return De(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ze.test(e)&&!ze[(Ve.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,r=[],i=fe(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),fe(i[s])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var rt=/^margin/,it=new RegExp("^("+$e+")(?!px)[a-z%]+$","i"),ot=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Xe.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Xe.removeChild(s),a=null}}var n,r,i,o,s=te.createElement("div"),a=te.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",he.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),fe.extend(he,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var st=/^(none|table(?!-c[ea]).+)/,at=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},lt=["Webkit","Moz","ms"],pt=te.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=L(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=fe.camelCase(t),c=at.test(t),u=e.style;if(c||(t=I(a)),s=fe.cssHooks[t]||fe.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=Me.exec(n))&&i[1]&&(n=m(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(fe.cssNumber[a]?"":"px")),he.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=fe.camelCase(t);return at.test(t)||(t=I(a)),(s=fe.cssHooks[t]||fe.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=L(e,t,r)),"normal"===i&&t in ut&&(i=ut[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,r){if(n)return!st.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?M(e,t,r):Re(e,ct,function(){return M(e,t,r)})},set:function(e,n,r){var i,o=r&&ot(e),s=r&&$(e,t,r,"border-box"===fe.css(e,"boxSizing",!1,o),o);return s&&(i=Me.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),H(0,n,s)}}}),fe.cssHooks.marginLeft=j(he.reliableMarginLeft,function(e,t){if(t)return(parseFloat(L(e,"marginLeft"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Be[r]+t]=o[r]||o[r-2]||o[0];return i}},rt.test(e)||(fe.cssHooks[e+t].set=H)}),fe.fn.extend({css:function(e,t){return De(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=ot(e),i=t.length;s<i;s++)o[t[s]]=fe.css(e,t[s],!1,r);return o}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=B,B.prototype={constructor:B,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(fe.cssNumber[n]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,n=B.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=B.prototype.init,fe.fx.step={};var ht,ft,dt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;fe.Animation=fe.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,Me.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Te);for(var n,r=0,i=e.length;r<i;r++)n=e[r],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,c,u,l,p="width"in t||"height"in t,h=this,f={},d=e.style,m=e.nodeType&&Fe(e),g=je.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(i=t[r],dt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||fe.style(e,r)}if((c=!fe.isEmptyObject(t))||!fe.isEmptyObject(f)){p&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=g&&g.display)&&(u=je.get(e,"display")),"none"===(l=fe.css(e,"display"))&&(u?l=u:(v([e],!0),u=e.style.display||u,l=fe.css(e,"display"),v([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===fe.css(e,"float")&&(c||(h.done(function(){d.display=u}),null==u&&(l=d.display,u="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1;for(r in f)c||(g?"hidden"in g&&(m=g.hidden):g=je.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&v([e],!0),h.done(function(){m||v([e]),je.remove(e,"fxshow");for(r in f)fe.style(e,r,f[r])})),c=W(m?g[r]:0,r,h),r in g||(g[r]=c.start,m&&(c.end=c.start,c.start=0))}}],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),fe.speed=function(e,t,n){var r=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in fe.fx.speeds?r.duration=fe.fx.speeds[r.duration]:r.duration=fe.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){fe.isFunction(r.old)&&r.old.call(this),r.queue&&fe.dequeue(this,r.queue)},r},fe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Fe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=fe.isEmptyObject(e),o=fe.speed(t,n,r),s=function(){var t=U(this,fe.extend({},e),o);(i||je.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=fe.timers,s=je.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&mt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=je.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=fe.timers,s=r?r.length:0;for(n.finish=!0,fe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(q(t,!0),e,r,i)}}),fe.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(ht=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),ht=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,F())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",he.checkOn=""!==e.value,he.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",he.radioValue="t"===e.value}();var gt,vt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return De(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?fe.prop(e,t,n):(1===o&&fe.isXMLDoc(e)||(i=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=fe.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!he.radioValue&&"radio"===t&&i(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Te);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||fe.find.attr;vt[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=vt[s],vt[s]=i,i=null!=n(e,t,r)?s:null,vt[s]=o),i}});var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return De(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,i=fe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),he.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,c=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,K(this)))});if("string"==typeof e&&e)for(t=e.match(Te)||[];n=this[c++];)if(i=K(n),r=1===n.nodeType&&" "+z(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=z(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,c=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Te)||[];n=this[c++];)if(i=K(n),r=1===n.nodeType&&" "+z(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=z(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,K(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=fe(this),o=e.match(Te)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=K(this))&&je.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":je.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+z(K(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=fe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,fe(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=fe.map(i,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=fe.valHooks[i.type]||fe.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:z(fe.text(e))}},select:{get:function(e){var t,n,r,o=e.options,s=e.selectedIndex,a="select-one"===e.type,c=a?null:[],u=a?s+1:o.length;for(r=s<0?u:a?s:0;r<u;r++)if(((n=o[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;c.push(t)}return c},set:function(e,t){for(var n,r,i=e.options,o=fe.makeArray(t),s=i.length;s--;)((r=i[s]).selected=fe.inArray(fe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},he.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,r,i){var o,s,a,c,u,l,p,h=[r||te],f=ue.call(t,"type")?t.type:t,d=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!kt.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(f=(d=f.split(".")).shift(),d.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:fe.makeArray(n,[t]),p=fe.event.special[f]||{},i||!p.trigger||!1!==p.trigger.apply(r,n))){if(!i&&!p.noBubble&&!fe.isWindow(r)){for(c=p.delegateType||f,kt.test(c+f)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(r.ownerDocument||te)&&h.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=h[o++])&&!t.isPropagationStopped();)t.type=o>1?c:p.bindType||f,(l=(je.get(s,"events")||{})[t.type]&&je.get(s,"handle"))&&l.apply(s,n),(l=u&&s[u])&&l.apply&&Le(s)&&(t.result=l.apply(s,n),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),n)||!Le(r)||u&&fe.isFunction(r[f])&&!fe.isWindow(r)&&((a=r[u])&&(r[u]=null),fe.event.triggered=f,r[f](),fe.event.triggered=void 0,a&&(r[u]=a)),t.result}},simulate:function(e,t,n){var r=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(r,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),he.focusin="onfocusin"in e,he.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=je.access(r,t);i||r.addEventListener(e,n,!0),je.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=je.access(r,t)-1;i?je.access(r,t,i):(r.removeEventListener(e,n,!0),je.remove(r,t))}}});var St=e.location,wt=fe.now(),Ct=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Et=/\[\]$/,Pt=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,r=[],i=function(e,t){var n=fe.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){i(this.name,this.value)});else for(n in e)X(n,e[n],t,i);return r.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Tt.test(this.nodeName)&&!_t.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:n.replace(Pt,"\r\n")}}).get()}});var Nt=/%20/g,At=/#.*$/,Dt=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ot=/^(?:GET|HEAD)$/,It=/^\/\//,Ht={},$t={},Mt="*/".concat("*"),Bt=te.createElement("a");Bt.href=St.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:jt.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Y(Y(e,fe.ajaxSettings),t):Y(fe.ajaxSettings,e)},ajaxPrefilter:G(Ht),ajaxTransport:G($t),ajax:function(t,n){function r(t,n,r,a){var u,h,f,x,k,S=n;l||(l=!0,c&&e.clearTimeout(c),i=void 0,s=a||"",w.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(x=Q(d,w,r)),x=Z(d,x,w,u),u?(d.ifModified&&((k=w.getResponseHeader("Last-Modified"))&&(fe.lastModified[o]=k),(k=w.getResponseHeader("etag"))&&(fe.etag[o]=k)),204===t||"HEAD"===d.type?S="nocontent":304===t?S="notmodified":(S=x.state,h=x.data,u=!(f=x.error))):(f=S,!t&&S||(S="error",t<0&&(t=0))),w.status=t,w.statusText=(n||S)+"",u?v.resolveWith(m,[h,S,w]):v.rejectWith(m,[w,S,f]),w.statusCode(b),b=void 0,p&&g.trigger(u?"ajaxSuccess":"ajaxError",[w,d,u?h:f]),y.fireWith(m,[w,S]),p&&(g.trigger("ajaxComplete",[w,d]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,c,u,l,p,h,f,d=fe.ajaxSetup({},n),m=d.context||d,g=d.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),b=d.statusCode||{},x={},k={},S="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(l){if(!a)for(a={};t=Lt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?s:null},setRequestHeader:function(e,t){return null==l&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==l&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)w.always(e[w.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||S;return i&&i.abort(t),r(0,t),this}};if(v.promise(w),d.url=((t||d.url||St.href)+"").replace(It,St.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(Te)||[""],null==d.crossDomain){u=te.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=Bt.protocol+"//"+Bt.host!=u.protocol+"//"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=fe.param(d.data,d.traditional)),J(Ht,d,n,w),l)return w;(p=fe.event&&d.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Ot.test(d.type),o=d.url.replace(At,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Nt,"+")):(f=d.url.slice(o.length),d.data&&(o+=(Ct.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace(Dt,"$1"),f=(Ct.test(o)?"&":"?")+"_="+wt+++f),d.url=o+f),d.ifModified&&(fe.lastModified[o]&&w.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&w.setRequestHeader("If-None-Match",fe.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Mt+"; q=0.01":""):d.accepts["*"]);for(h in d.headers)w.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(m,w,d)||l))return w.abort();if(S="abort",y.add(d.complete),w.done(d.success),w.fail(d.error),i=J($t,d,n,w)){if(w.readyState=1,p&&g.trigger("ajaxSend",[w,d]),l)return w;d.async&&d.timeout>0&&(c=e.setTimeout(function(){w.abort("timeout")},d.timeout));try{l=!1,i.send(x,r)}catch(e){if(l)throw e;r(-1,e)}}else r(-1,"No Transport");return w},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,r,i){return fe.isFunction(n)&&(i=i||r,r=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:i,data:n,success:r},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ft={0:200,1223:204},Rt=fe.ajaxSettings.xhr();he.cors=!!Rt&&"withCredentials"in Rt,he.ajax=Rt=!!Rt,fe.ajaxTransport(function(t){var n,r;if(he.cors||Rt&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ft[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var qt=[],Wt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||fe.expando+"_"+wt++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Wt,"$1"+i):!1!==t.jsonp&&(t.url+=(Ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||fe.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?fe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,qt.push(i)),s&&fe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),he.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(he.createHTMLDocument?((r=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(r)):t=te),i=Se.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=x([e],t,o),o&&o.length&&fe(o).remove(),fe.merge([],i.childNodes))},fe.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=z(e.slice(a)),e=e.slice(0,a)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&fe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?fe("<div>").append(fe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var r,i,o,s,a,c,u=fe.css(e,"position"),l=fe(e),p={};"static"===u&&(e.style.position="relative"),a=l.offset(),o=fe.css(e,"top"),c=fe.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+c).indexOf("auto")>-1?(s=(r=l.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(c)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):l.css(p)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(r=e.offset()),r={top:r.top+fe.css(e[0],"borderTopWidth",!0),left:r.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-fe.css(n,"marginTop",!0),left:t.left-r.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Xe})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(r){return De(this,function(e,r,i){var o;if(fe.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=j(he.pixelPosition,function(e,n){if(n)return n=L(e,t),it.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){fe.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return De(this,function(t,n,i){var o;return fe.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?fe.css(t,n,a):fe.style(t,n,i,a)},t,s?i:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Vt=e.jQuery,Ut=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=Ut),t&&e.jQuery===fe&&(e.jQuery=Vt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Handlebars=t():e.Handlebars=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(){var e=h();return e.compile=function(t,n){return c.compile(t,n,e)},e.precompile=function(t,n){return c.precompile(t,n,e)},e.AST=s.default,e.Compiler=c.Compiler,e.JavaScriptCompiler=u.default,e.Parser=a.parser,e.parse=a.parse,e}var i=n(1).default;t.__esModule=!0;var o=i(n(2)),s=i(n(35)),a=n(36),c=n(41),u=i(n(42)),l=i(n(39)),p=i(n(34)),h=o.default.create,f=r();f.create=r,p.default(f),f.Visitor=l.default,f.default=f,t.default=f,e.exports=t.default},function(e,t){"use strict";t.default=function(e){return e&&e.__esModule?e:{default:e}},t.__esModule=!0},function(e,t,n){"use strict";function r(){var e=new s.HandlebarsEnvironment;return u.extend(e,s),e.SafeString=a.default,e.Exception=c.default,e.Utils=u,e.escapeExpression=u.escapeExpression,e.VM=l,e.template=function(t){return l.template(t,e)},e}var i=n(3).default,o=n(1).default;t.__esModule=!0;var s=i(n(4)),a=o(n(21)),c=o(n(6)),u=i(n(5)),l=i(n(22)),p=o(n(34)),h=r();h.create=r,p.default(h),h.default=h,t.default=h,e.exports=t.default},function(e,t){"use strict";t.default=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},t.__esModule=!0},function(e,t,n){"use strict";function r(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},a.registerDefaultHelpers(this),c.registerDefaultDecorators(this)}var i=n(1).default;t.__esModule=!0,t.HandlebarsEnvironment=r;var o=n(5),s=i(n(6)),a=n(10),c=n(18),u=i(n(20));t.VERSION="4.0.10";t.COMPILER_REVISION=7;var l={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};t.REVISION_CHANGES=l;r.prototype={constructor:r,logger:u.default,log:u.default.log,registerHelper:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new s.default("Arg not supported with multiple helpers");o.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===o.toString.call(e))o.extend(this.partials,e);else{if(void 0===t)throw new s.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new s.default("Arg not supported with multiple decorators");o.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]}};var p=u.default.log;t.log=p,t.createFrame=o.createFrame,t.logger=u.default},function(e,t){"use strict";function n(e){return i[e]}function r(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}t.__esModule=!0,t.extend=r,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return s.test(e)?e.replace(o,n):e},t.isEmpty=function(e){return!e&&0!==e||!(!u(e)||0!==e.length)},t.createFrame=function(e){var t=r({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},o=/[&<>"'`=]/g,s=/[&<>"'`=]/,a=Object.prototype.toString;t.toString=a;var c=function(e){return"function"==typeof e};c(/x/)&&(t.isFunction=c=function(e){return"function"==typeof e&&"[object Function]"===a.call(e)}),t.isFunction=c;var u=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===a.call(e)};t.isArray=u},function(e,t,n){"use strict";function r(e,t){var n=t&&t.loc,s=void 0,a=void 0;n&&(e+=" - "+(s=n.start.line)+":"+(a=n.start.column));for(var c=Error.prototype.constructor.call(this,e),u=0;u<o.length;u++)this[o[u]]=c[o[u]];Error.captureStackTrace&&Error.captureStackTrace(this,r);try{n&&(this.lineNumber=s,i?Object.defineProperty(this,"column",{value:a,enumerable:!0}):this.column=a)}catch(e){}}var i=n(7).default;t.__esModule=!0;var o=["description","fileName","lineNumber","message","name","number","stack"];r.prototype=new Error,t.default=r,e.exports=t.default},function(e,t,n){e.exports={default:n(8),__esModule:!0}},function(e,t,n){var r=n(9);e.exports=function(e,t,n){return r.setDesc(e,t,n)}},function(e,t){var n=Object;e.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(e,t,n){"use strict";var r=n(1).default;t.__esModule=!0,t.registerDefaultHelpers=function(e){i.default(e),o.default(e),s.default(e),a.default(e),c.default(e),u.default(e),l.default(e)};var i=r(n(11)),o=r(n(12)),s=r(n(13)),a=r(n(14)),c=r(n(15)),u=r(n(16)),l=r(n(17))},function(e,t,n){"use strict";t.__esModule=!0;var r=n(5);t.default=function(e){e.registerHelper("blockHelperMissing",function(t,n){var i=n.inverse,o=n.fn;if(!0===t)return o(this);if(!1===t||null==t)return i(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):i(this);if(n.data&&n.ids){var s=r.createFrame(n.data);s.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:s}}return o(t,n)})},e.exports=t.default},function(e,t,n){"use strict";var r=n(1).default;t.__esModule=!0;var i=n(5),o=r(n(6));t.default=function(e){e.registerHelper("each",function(e,t){function n(t,n,o){u&&(u.key=t,u.index=n,u.first=0===n,u.last=!!o,l&&(u.contextPath=l+t)),c+=r(e[t],{data:u,blockParams:i.blockParams([e[t],t],[l+t,null])})}if(!t)throw new o.default("Must pass iterator to #each");var r=t.fn,s=t.inverse,a=0,c="",u=void 0,l=void 0;if(t.data&&t.ids&&(l=i.appendContextPath(t.data.contextPath,t.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),t.data&&(u=i.createFrame(t.data)),e&&"object"==typeof e)if(i.isArray(e))for(var p=e.length;a<p;a++)a in e&&n(a,a,a===e.length-1);else{var h=void 0;for(var f in e)e.hasOwnProperty(f)&&(void 0!==h&&n(h,a-1),h=f,a++);void 0!==h&&n(h,a-1,!0)}return 0===a&&(c=s(this)),c})},e.exports=t.default},function(e,t,n){"use strict";var r=n(1).default;t.__esModule=!0;var i=r(n(6));t.default=function(e){e.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(5);t.default=function(e){e.registerHelper("if",function(e,t){return r.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||r.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,n){return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},e.exports=t.default},function(e,t){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),t[0]=i,e.log.apply(e,t)})},e.exports=t.default},function(e,t){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",function(e,t){return e&&e[t]})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(5);t.default=function(e){e.registerHelper("with",function(e,t){r.isFunction(e)&&(e=e.call(this));var n=t.fn;if(r.isEmpty(e))return t.inverse(this);var i=t.data;return t.data&&t.ids&&((i=r.createFrame(t.data)).contextPath=r.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:i,blockParams:r.blockParams([e],[i&&i.contextPath])})})},e.exports=t.default},function(e,t,n){"use strict";var r=n(1).default;t.__esModule=!0,t.registerDefaultDecorators=function(e){i.default(e)};var i=r(n(19))},function(e,t,n){"use strict";t.__esModule=!0;var r=n(5);t.default=function(e){e.registerDecorator("inline",function(e,t,n,i){var o=e;return t.partials||(t.partials={},o=function(i,o){var s=n.partials;n.partials=r.extend({},s,t.partials);var a=e(i,o);return n.partials=s,a}),t.partials[i.args[0]]=i.fn,o})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(5),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(i.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=i.lookupLevel(e),"undefined"!=typeof console&&i.lookupLevel(i.level)<=e){var t=i.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];console[t].apply(console,r)}}};t.default=i,e.exports=t.default},function(e,t){"use strict";function n(e){this.string=e}t.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},t.default=n,e.exports=t.default},function(e,t,n){"use strict";function r(e,t,n,r,i,o,a){function c(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a;return!a||t==a[0]||t===e.nullContext&&null===a[0]||(s=[t].concat(a)),n(e,t,e.helpers,e.partials,i.data||r,o&&[i.blockParams].concat(o),s)}return c=s(n,c,e,a,r,o),c.program=t,c.depth=a?a.length:0,c.blockParams=i||0,c}function i(){return""}function o(e,t){return t&&"root"in t||((t=t?h.createFrame(t):{}).root=e),t}function s(e,t,n,r,i,o){if(e.decorator){var s={};t=e.decorator(t,s,n,r&&r[0],i,o,r),l.extend(t,s)}return t}var a=n(23).default,c=n(3).default,u=n(1).default;t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=h.COMPILER_REVISION;if(t!==n){if(t<n){var r=h.REVISION_CHANGES[n],i=h.REVISION_CHANGES[t];throw new p.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new p.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){function n(t){function r(t){return""+e.main(i,t,i.helpers,i.partials,c,l,u)}var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],c=a.data;n._setup(a),!a.partial&&e.useData&&(c=o(t,c));var u=void 0,l=e.useBlockParams?[]:void 0;return e.useDepths&&(u=a.depths?t!=a.depths[0]?[t].concat(a.depths):a.depths:[t]),(r=s(e.main,r,i,a.depths||[],c,l))(t,a)}if(!t)throw new p.default("No environment passed to template");if(!e||!e.main)throw new p.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var i={strict:function(e,t){if(!(t in e))throw new p.default('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var n=e.length,r=0;r<n;r++)if(e[r]&&null!=e[r][t])return e[r][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:l.escapeExpression,invokePartial:function(n,r,i){i.hash&&(r=l.extend({},r,i.hash),i.ids&&(i.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,i);var o=t.VM.invokePartial.call(this,n,r,i);if(null==o&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),o=i.partials[i.name](r,i)),null!=o){if(i.indent){for(var s=o.split("\n"),a=0,c=s.length;a<c&&(s[a]||a+1!==c);a++)s[a]=i.indent+s[a];o=s.join("\n")}return o}throw new p.default("The partial "+i.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,i,o){var s=this.programs[e],a=this.fn(e);return t||o||i||n?s=r(this,e,a,t,n,i,o):s||(s=this.programs[e]=r(this,e,a)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=l.extend({},t,e)),n},nullContext:a({}),noop:t.VM.noop,compilerInfo:e.compiler};return n.isTop=!0,n._setup=function(n){n.partial?(i.helpers=n.helpers,i.partials=n.partials,i.decorators=n.decorators):(i.helpers=i.merge(n.helpers,t.helpers),e.usePartial&&(i.partials=i.merge(n.partials,t.partials)),(e.usePartial||e.useDecorators)&&(i.decorators=i.merge(n.decorators,t.decorators)))},n._child=function(t,n,o,s){if(e.useBlockParams&&!o)throw new p.default("must pass block params");if(e.useDepths&&!s)throw new p.default("must pass parent depths");return r(i,t,e[t],n,0,o,s)},n},t.wrapProgram=r,t.resolvePartial=function(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var o=void 0;if(n.fn&&n.fn!==i&&function(){n.data=h.createFrame(n.data);var e=n.fn;o=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=h.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=l.extend({},n.partials,e.partials))}(),void 0===e&&o&&(e=o),void 0===e)throw new p.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=i;var l=c(n(5)),p=u(n(6)),h=n(4)},function(e,t,n){e.exports={default:n(24),__esModule:!0}},function(e,t,n){n(25),e.exports=n(30).Object.seal},function(e,t,n){var r=n(26);n(27)("seal",function(e){return function(t){return e&&r(t)?e(t):t}})},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(28),i=n(30),o=n(33);e.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],s={};s[e]=t(n),r(r.S+r.F*o(function(){n(1)}),"Object",s)}},function(e,t,n){var r=n(29),i=n(30),o=n(31),s=function(e,t,n){var a,c,u,l=e&s.F,p=e&s.G,h=e&s.S,f=e&s.P,d=e&s.B,m=e&s.W,g=p?i:i[t]||(i[t]={}),v=p?r:h?r[t]:(r[t]||{}).prototype;p&&(n=t);for(a in n)(c=!l&&v&&a in v)&&a in g||(u=c?v[a]:n[a],g[a]=p&&"function"!=typeof v[a]?n[a]:d&&c?o(u,r):m&&v[a]==u?function(e){var t=function(t){return this instanceof e?new e(t):e(t)};return t.prototype=e.prototype,t}(u):f&&"function"==typeof u?o(Function.call,u):u,f&&((g.prototype||(g.prototype={}))[a]=u))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,e.exports=s},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){var n=e.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(32);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){(function(n){"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default}).call(t,function(){return this}())},function(e,t){"use strict";t.__esModule=!0;var n={helpers:{helperExpression:function(e){return"SubExpression"===e.type||("MustacheStatement"===e.type||"BlockStatement"===e.type)&&!!(e.params&&e.params.length||e.hash)},scopedId:function(e){return/^\.|this\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!n.helpers.scopedId(e)&&!e.depth}}};t.default=n,e.exports=t.default},function(e,t,n){"use strict";var r=n(1).default,i=n(3).default;t.__esModule=!0,t.parse=function(e,t){return"Program"===e.type?e:(o.default.yy=u,u.locInfo=function(e){return new u.SourceLocation(t&&t.srcName,e)},new s.default(t).accept(o.default.parse(e)))};var o=r(n(37)),s=r(n(38)),a=i(n(40)),c=n(5);t.parser=o.default;var u={};c.extend(u,a)},function(e,t){"use strict";t.__esModule=!0;var n=function(){function e(){this.yy={}}var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(e,t,n,r,i,o,s){var a=o.length-1;switch(i){case 1:return o[a-1];case 2:this.$=r.prepareProgram(o[a]);break;case 3:case 4:case 5:case 6:case 7:case 8:this.$=o[a];break;case 9:this.$={type:"CommentStatement",value:r.stripComment(o[a]),strip:r.stripFlags(o[a],o[a]),loc:r.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:o[a],value:o[a],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(o[a-2],o[a-1],o[a],this._$);break;case 12:this.$={path:o[a-3],params:o[a-2],hash:o[a-1]};break;case 13:this.$=r.prepareBlock(o[a-3],o[a-2],o[a-1],o[a],!1,this._$);break;case 14:this.$=r.prepareBlock(o[a-3],o[a-2],o[a-1],o[a],!0,this._$);break;case 15:this.$={open:o[a-5],path:o[a-4],params:o[a-3],hash:o[a-2],blockParams:o[a-1],strip:r.stripFlags(o[a-5],o[a])};break;case 16:case 17:this.$={path:o[a-4],params:o[a-3],hash:o[a-2],blockParams:o[a-1],strip:r.stripFlags(o[a-5],o[a])};break;case 18:this.$={strip:r.stripFlags(o[a-1],o[a-1]),program:o[a]};break;case 19:var c=r.prepareBlock(o[a-2],o[a-1],o[a],o[a],!1,this._$),u=r.prepareProgram([c],o[a-1].loc);u.chained=!0,this.$={strip:o[a-2].strip,program:u,chain:!0};break;case 20:this.$=o[a];break;case 21:this.$={path:o[a-1],strip:r.stripFlags(o[a-2],o[a])};break;case 22:case 23:this.$=r.prepareMustache(o[a-3],o[a-2],o[a-1],o[a-4],r.stripFlags(o[a-4],o[a]),this._$);break;case 24:this.$={type:"PartialStatement",name:o[a-3],params:o[a-2],hash:o[a-1],indent:"",strip:r.stripFlags(o[a-4],o[a]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(o[a-2],o[a-1],o[a],this._$);break;case 26:this.$={path:o[a-3],params:o[a-2],hash:o[a-1],strip:r.stripFlags(o[a-4],o[a])};break;case 27:case 28:this.$=o[a];break;case 29:this.$={type:"SubExpression",path:o[a-3],params:o[a-2],hash:o[a-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:o[a],loc:r.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:r.id(o[a-2]),value:o[a],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(o[a-1]);break;case 33:case 34:this.$=o[a];break;case 35:this.$={type:"StringLiteral",value:o[a],original:o[a],loc:r.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(o[a]),original:Number(o[a]),loc:r.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===o[a],original:"true"===o[a],loc:r.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:r.locInfo(this._$)};break;case 40:case 41:this.$=o[a];break;case 42:this.$=r.preparePath(!0,o[a],this._$);break;case 43:this.$=r.preparePath(!1,o[a],this._$);break;case 44:o[a-2].push({part:r.id(o[a]),original:o[a],separator:o[a-1]}),this.$=o[a-2];break;case 45:this.$=[{part:r.id(o[a]),original:o[a]}];break;case 46:this.$=[];break;case 47:o[a-1].push(o[a]);break;case 48:this.$=[o[a]];break;case 49:o[a-1].push(o[a]);break;case 50:this.$=[];break;case 51:o[a-1].push(o[a]);break;case 58:this.$=[];break;case 59:o[a-1].push(o[a]);break;case 64:this.$=[];break;case 65:o[a-1].push(o[a]);break;case 70:this.$=[];break;case 71:o[a-1].push(o[a]);break;case 78:this.$=[];break;case 79:o[a-1].push(o[a]);break;case 82:this.$=[];break;case 83:o[a-1].push(o[a]);break;case 86:this.$=[];break;case 87:o[a-1].push(o[a]);break;case 90:this.$=[];break;case 91:o[a-1].push(o[a]);break;case 94:this.$=[];break;case 95:o[a-1].push(o[a]);break;case 98:this.$=[o[a]];break;case 99:o[a-1].push(o[a]);break;case 100:this.$=[o[a]];break;case 101:o[a-1].push(o[a])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(e,t){throw new Error(e)},parse:function(e){var t=this,n=[0],r=[null],i=[],o=this.table,s="",a=0,c=0,u=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var l=this.lexer.yylloc;i.push(l);var p=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var h,f,d,m,g,v,y,b,x,k={};;){if(d=n[n.length-1],this.defaultActions[d]?m=this.defaultActions[d]:(null!==h&&void 0!==h||(h=function(){var e;return"number"!=typeof(e=t.lexer.lex()||1)&&(e=t.symbols_[e]||e),e}()),m=o[d]&&o[d][h]),void 0===m||!m.length||!m[0]){var S="";if(!u){x=[];for(v in o[d])this.terminals_[v]&&v>2&&x.push("'"+this.terminals_[v]+"'");S=this.lexer.showPosition?"Parse error on line "+(a+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+x.join(", ")+", got '"+(this.terminals_[h]||h)+"'":"Parse error on line "+(a+1)+": Unexpected "+(1==h?"end of input":"'"+(this.terminals_[h]||h)+"'"),this.parseError(S,{text:this.lexer.match,token:this.terminals_[h]||h,line:this.lexer.yylineno,loc:l,expected:x})}}if(m[0]instanceof Array&&m.length>1)throw new Error("Parse Error: multiple actions possible at state: "+d+", token: "+h);switch(m[0]){case 1:n.push(h),r.push(this.lexer.yytext),i.push(this.lexer.yylloc),n.push(m[1]),h=null,f?(h=f,f=null):(c=this.lexer.yyleng,s=this.lexer.yytext,a=this.lexer.yylineno,l=this.lexer.yylloc,u>0&&u--);break;case 2:if(y=this.productions_[m[1]][1],k.$=r[r.length-y],k._$={first_line:i[i.length-(y||1)].first_line,last_line:i[i.length-1].last_line,first_column:i[i.length-(y||1)].first_column,last_column:i[i.length-1].last_column},p&&(k._$.range=[i[i.length-(y||1)].range[0],i[i.length-1].range[1]]),void 0!==(g=this.performAction.call(k,s,c,a,this.yy,m[1],r,i)))return g;y&&(n=n.slice(0,-1*y*2),r=r.slice(0,-1*y),i=i.slice(0,-1*y)),n.push(this.productions_[m[1]][0]),r.push(k.$),i.push(k._$),b=o[n[n.length-2]][n[n.length-1]],n.push(b);break;case 3:return!0}}return!0}},n=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var e,t,n,r,i;this._more||(this.yytext="",this.match="");for(var o=this._currentRules(),s=0;s<o.length&&(!(n=this._input.match(this.rules[o[s]]))||t&&!(n[0].length>t[0].length)||(t=n,r=s,this.options.flex));s++);return t?((i=t[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,o[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return void 0!==e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)}};return e.options={},e.performAction=function(e,t,n,r){function i(e,n){return t.yytext=t.yytext.substr(e,t.yyleng-n)}switch(n){case 0:if("\\\\"===t.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===t.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),t.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(t.yytext=t.yytext.substr(5,t.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(t.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return t.yytext=i(1,2).replace(/\\"/g,'"'),80;case 32:return t.yytext=i(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return t.yytext=t.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},e.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],e.conditions={mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}},e}();return t.lexer=n,e.prototype=t,t.Parser=e,new e}();t.default=n,e.exports=t.default},function(e,t,n){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=e}function i(e,t,n){void 0===t&&(t=e.length);var r=e[t-1],i=e[t-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function o(e,t,n){void 0===t&&(t=-1);var r=e[t+1],i=e[t+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function s(e,t,n){var r=e[null==t?0:t+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function a(e,t,n){var r=e[null==t?e.length-1:t-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}var c=n(1).default;t.__esModule=!0;var u=c(n(39));(r.prototype=new u.default).Program=function(e){var t=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var r=e.body,c=0,u=r.length;c<u;c++){var l=r[c],p=this.accept(l);if(p){var h=i(r,c,n),f=o(r,c,n),d=p.openStandalone&&h,m=p.closeStandalone&&f,g=p.inlineStandalone&&h&&f;p.close&&s(r,c,!0),p.open&&a(r,c,!0),t&&g&&(s(r,c),a(r,c)&&"PartialStatement"===l.type&&(l.indent=/([ \t]+$)/.exec(r[c-1].original)[1])),t&&d&&(s((l.program||l.inverse).body),a(r,c)),t&&m&&(s(r,c),a((l.inverse||l.program).body))}}return e},r.prototype.BlockStatement=r.prototype.DecoratorBlock=r.prototype.PartialBlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,r=n,c=n;if(n&&n.chained)for(r=n.body[0].program;c.chained;)c=c.body[c.body.length-1].program;var u={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:o(t.body),closeStandalone:i((r||t).body)};if(e.openStrip.close&&s(t.body,null,!0),n){var l=e.inverseStrip;l.open&&a(t.body,null,!0),l.close&&s(r.body,null,!0),e.closeStrip.open&&a(c.body,null,!0),!this.options.ignoreStandalone&&i(t.body)&&o(r.body)&&(a(t.body),s(r.body))}else e.closeStrip.open&&a(t.body,null,!0);return u},r.prototype.Decorator=r.prototype.MustacheStatement=function(e){return e.strip},r.prototype.PartialStatement=r.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},t.default=r,e.exports=t.default},function(e,t,n){"use strict";function r(){this.parents=[]}function i(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")}function o(e){i.call(this,e),this.acceptKey(e,"program"),this.acceptKey(e,"inverse")}function s(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")}var a=n(1).default;t.__esModule=!0;var c=a(n(6));r.prototype={constructor:r,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&!r.prototype[n.type])throw new c.default('Unexpected node type "'+n.type+'" found when accepting '+t+" on "+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new c.default(e.type+" requires "+t)},acceptArray:function(e){for(var t=0,n=e.length;t<n;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){if(!this[e.type])throw new c.default("Unknown type: "+e.type,e);this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:!1!==t?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:i,Decorator:i,BlockStatement:o,DecoratorBlock:o,PartialStatement:s,PartialBlockStatement:function(e){s.call(this,e),this.acceptKey(e,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:i,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,"value")}},t.default=r,e.exports=t.default},function(e,t,n){"use strict";function r(e,t){if(t=t.path?t.path.original:t,e.path.original!==t){var n={loc:e.path.loc};throw new o.default(e.path.original+" doesn't match "+t,n)}}var i=n(1).default;t.__esModule=!0,t.SourceLocation=function(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}},t.id=function(e){return/^\[.*\]$/.test(e)?e.substr(1,e.length-2):e},t.stripFlags=function(e,t){return{open:"~"===e.charAt(2),close:"~"===t.charAt(t.length-3)}},t.stripComment=function(e){return e.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")},t.preparePath=function(e,t,n){n=this.locInfo(n);for(var r=e?"@":"",i=[],s=0,a="",c=0,u=t.length;c<u;c++){var l=t[c].part,p=t[c].original!==l;if(r+=(t[c].separator||"")+l,p||".."!==l&&"."!==l&&"this"!==l)i.push(l);else{if(i.length>0)throw new o.default("Invalid path: "+r,{loc:n});".."===l&&(s++,a+="../")}}return{type:"PathExpression",data:e,depth:s,parts:i,original:r,loc:n}},t.prepareMustache=function(e,t,n,r,i,o){var s=r.charAt(3)||r.charAt(2),a="{"!==s&&"&"!==s;return{type:/\*/.test(r)?"Decorator":"MustacheStatement",path:e,params:t,hash:n,escaped:a,strip:i,loc:this.locInfo(o)}},t.prepareRawBlock=function(e,t,n,i){r(e,n);var o={type:"Program",body:t,strip:{},loc:i=this.locInfo(i)};return{type:"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:o,openStrip:{},inverseStrip:{},closeStrip:{},loc:i}},t.prepareBlock=function(e,t,n,i,s,a){i&&i.path&&r(e,i);var c=/\*/.test(e.open);t.blockParams=e.blockParams;var u=void 0,l=void 0;if(n){if(c)throw new o.default("Unexpected inverse block on decorator",n);n.chain&&(n.program.body[0].closeStrip=i.strip),l=n.strip,u=n.program}return s&&(s=u,u=t,t=s),{type:c?"DecoratorBlock":"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:t,inverse:u,openStrip:e.strip,inverseStrip:l,closeStrip:i&&i.strip,loc:this.locInfo(a)}},t.prepareProgram=function(e,t){if(!t&&e.length){var n=e[0].loc,r=e[e.length-1].loc;n&&r&&(t={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:"Program",body:e,strip:{},loc:t}},t.preparePartialBlock=function(e,t,n,i){return r(e,n),{type:"PartialBlockStatement",name:e.path,params:e.params,hash:e.hash,program:t,openStrip:e.strip,closeStrip:n&&n.strip,loc:this.locInfo(i)}};var o=i(n(6))},function(e,t,n){"use strict";function r(){}function i(e,t){if(e===t)return!0;if(c.isArray(e)&&c.isArray(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!i(e[n],t[n]))return!1;return!0}}function o(e){if(!e.path.parts){var t=e.path;e.path={type:"PathExpression",data:!1,depth:0,parts:[t.original+""],original:t.original+"",loc:t.loc}}}var s=n(1).default;t.__esModule=!0,t.Compiler=r,t.precompile=function(e,t,n){if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new a.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+e);"data"in(t=t||{})||(t.data=!0),t.compat&&(t.useDepths=!0);var r=n.parse(e,t),i=(new n.Compiler).compile(r,t);return(new n.JavaScriptCompiler).compile(i,t)},t.compile=function(e,t,n){function r(){var r=n.parse(e,t),i=(new n.Compiler).compile(r,t),o=(new n.JavaScriptCompiler).compile(i,t,void 0,!0);return n.template(o)}function i(e,t){return o||(o=r()),o.call(this,e,t)}if(void 0===t&&(t={}),null==e||"string"!=typeof e&&"Program"!==e.type)throw new a.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+e);"data"in(t=c.extend({},t))||(t.data=!0),t.compat&&(t.useDepths=!0);var o=void 0;return i._setup=function(e){return o||(o=r()),o._setup(e)},i._child=function(e,t,n,i){return o||(o=r()),o._child(e,t,n,i)},i};var a=s(n(6)),c=n(5),u=s(n(35)),l=[].slice;r.prototype={compiler:r,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(o=0;o<t;o++){var n=this.opcodes[o],r=e.opcodes[o];if(n.opcode!==r.opcode||!i(n.args,r.args))return!1}t=this.children.length;for(var o=0;o<t;o++)if(!this.children[o].equals(e.children[o]))return!1;return!0},guid:0,compile:function(e,t){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[];var n=t.knownHelpers;if(t.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},n)for(var r in n)r in n&&(this.options.knownHelpers[r]=n[r]);return this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){if(!this[e.type])throw new a.default("Unknown type: "+e.type,e);this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=t.length,r=0;r<n;r++)this.accept(t[r]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){o(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var r=this.classifySexpr(e);"helper"===r?this.helperSexpr(e,t,n):"simple"===r?(this.simpleSexpr(e),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(e){var t=e.program&&this.compileProgram(e.program),n=this.setupFullMustacheParams(e,t,void 0),r=e.path;this.useDecorators=!0,this.opcode("registerDecorator",n.length,r.original)},PartialStatement:function(e){this.usePartial=!0;var t=e.program;t&&(t=this.compileProgram(e.program));var n=e.params;if(n.length>1)throw new a.default("Unsupported number of partial arguments: "+n.length,e);n.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):n.push({type:"PathExpression",parts:[],depth:0}));var r=e.name.original,i="SubExpression"===e.name.type;i&&this.accept(e.name),this.setupFullMustacheParams(e,t,void 0,!0);var o=e.indent||"";this.options.preventIndent&&o&&(this.opcode("appendContent",o),o=""),this.opcode("invokePartial",i,r,o),this.opcode("append")},PartialBlockStatement:function(e){this.PartialStatement(e)},MustacheStatement:function(e){this.SubExpression(e),e.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(e){this.DecoratorBlock(e)},ContentStatement:function(e){e.value&&this.opcode("appendContent",e.value)},CommentStatement:function(){},SubExpression:function(e){o(e);var t=this.classifySexpr(e);"simple"===t?this.simpleSexpr(e):"helper"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var r=e.path,i=r.parts[0],o=null!=t||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),r.strict=!0,this.accept(r),this.opcode("invokeAmbiguous",i,o)},simpleSexpr:function(e){var t=e.path;t.strict=!0,this.accept(t),this.opcode("resolvePossibleLambda")},helperSexpr:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.path,o=i.parts[0];if(this.options.knownHelpers[o])this.opcode("invokeKnownHelper",r.length,o);else{if(this.options.knownHelpersOnly)throw new a.default("You specified knownHelpersOnly, but used the unknown helper "+o,e);i.strict=!0,i.falsy=!0,this.accept(i),this.opcode("invokeHelper",r.length,i.original,u.default.helpers.simpleId(i))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0],n=u.default.helpers.scopedId(e),r=!e.depth&&!n&&this.blockParamIndex(t);r?this.opcode("lookupBlockParam",r,e.parts):t?e.data?(this.options.data=!0,this.opcode("lookupData",e.depth,e.parts,e.strict)):this.opcode("lookupOnContext",e.parts,e.falsy,e.strict,n):this.opcode("pushContext")},StringLiteral:function(e){this.opcode("pushString",e.value)},NumberLiteral:function(e){this.opcode("pushLiteral",e.value)},BooleanLiteral:function(e){this.opcode("pushLiteral",e.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(e){var t=e.pairs,n=0,r=t.length;for(this.opcode("pushHash");n<r;n++)this.pushParam(t[n].value);for(;n--;)this.opcode("assignToHash",t[n].key);this.opcode("popHash")},opcode:function(e){this.opcodes.push({opcode:e,args:l.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=u.default.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),r=!n&&u.default.helpers.helperExpression(e),i=!n&&(r||t);if(i&&!r){var o=e.path.parts[0],s=this.options;s.knownHelpers[o]?r=!0:s.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(e){for(var t=0,n=e.length;t<n;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||"";if(this.stringParams)t.replace&&(t=t.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),e.depth&&this.addDepth(e.depth),this.opcode("getContext",e.depth||0),this.opcode("pushStringParam",t,e.type),"SubExpression"===e.type&&this.accept(e);else{if(this.trackIds){var n=void 0;if(!e.parts||u.default.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var r=e.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else(t=e.original||t).replace&&(t=t.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,r){var i=e.params;return this.pushParams(i),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.accept(e.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;t<n;t++){var r=this.options.blockParams[t],i=r&&c.indexOf(r,e);if(r&&i>=0)return[t,i]}}}},function(e,t,n){"use strict";function r(e){this.value=e}function i(){}function o(e,t,n,r){var i=t.popStack(),o=0,s=n.length;for(e&&s--;o<s;o++)i=t.nameLookup(i,n[o],r);return e?[t.aliasable("container.strict"),"(",i,", ",t.quotedString(n[o]),")"]:i}var s=n(1).default;t.__esModule=!0;var a=n(4),c=s(n(6)),u=n(5),l=s(n(43));i.prototype={nameLookup:function(e,t){return i.isValidJavaScriptVariableName(t)?[e,".",t]:[e,"[",JSON.stringify(t),"]"]},depthedLookup:function(e){return[this.aliasable("container.lookup"),'(depths, "',e,'")']},compilerInfo:function(){var e=a.COMPILER_REVISION;return[e,a.REVISION_CHANGES[e]]},appendToBuffer:function(e,t,n){return u.isArray(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?["return ",e,";"]:n?["buffer += ",e,";"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString("")},compile:function(e,t,n,r){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||e.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var i=e.opcodes,o=void 0,s=void 0,a=void 0,u=void 0;for(a=0,u=i.length;a<u;a++)o=i[a],this.source.currentLocation=o.loc,s=s||o.loc,this[o.opcode].apply(this,o.args);if(this.source.currentLocation=s,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new c.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),r?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(r);if(this.isChild)return l;var p={compiler:this.compilerInfo(),main:l};this.decorators&&(p.main_d=this.decorators,p.useDecorators=!0);var h=this.context,f=h.programs,d=h.decorators;for(a=0,u=f.length;a<u;a++)f[a]&&(p[a]=f[a],d[a]&&(p[a+"_d"]=d[a],p.useDecorators=!0));return this.environment.usePartial&&(p.usePartial=!0),this.options.data&&(p.useData=!0),this.useDepths&&(p.useDepths=!0),this.useBlockParams&&(p.useBlockParams=!0),this.options.compat&&(p.compat=!0),r?p.compilerOptions=this.options:(p.compiler=JSON.stringify(p.compiler),this.source.currentLocation={start:{line:1,column:0}},p=this.objectLiteral(p),t.srcName?(p=p.toStringWithSourceMap({file:t.destName})).map=p.map&&p.map.toString():p=p.toString()),p},preamble:function(){this.lastContext=0,this.source=new l.default(this.options.srcName),this.decorators=new l.default(this.options.srcName)},createFunctionContext:function(e){var t="",n=this.stackVars.concat(this.registers.list);n.length>0&&(t+=", "+n.join(", "));var r=0;for(var i in this.aliases){var o=this.aliases[i];this.aliases.hasOwnProperty(i)&&o.children&&o.referenceCount>1&&(t+=", alias"+ ++r+"="+i,o.children[0]="alias"+r)}var s=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&s.push("blockParams"),this.useDepths&&s.push("depths");var a=this.mergeSource(t);return e?(s.push(a),Function.apply(this,s)):this.source.wrap(["function(",s.join(","),") {\n  ",a,"}"])},mergeSource:function(e){var t=this.environment.isSimple,n=!this.forceBuffer,r=void 0,i=void 0,o=void 0,s=void 0;return this.source.each(function(e){e.appendToBuffer?(o?e.prepend("  + "):o=e,s=e):(o&&(i?o.prepend("buffer += "):r=!0,s.add(";"),o=s=void 0),i=!0,t||(n=!1))}),n?o?(o.prepend("return "),s.add(";")):i||this.source.push('return "";'):(e+=", buffer = "+(r?"":this.initializeBuffer()),o?(o.prepend("return buffer + "),s.add(";")):this.source.push("return buffer;")),e&&this.source.prepend("var "+e.substring(2)+(r?"":";\n")),this.source.merge()},blockValue:function(e){var t=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(t,"call",n))},ambiguousBlockValue:function(){var e=this.aliasable("helpers.blockHelperMissing"),t=[this.contextName(0)];this.setupHelperArgs("",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(e,"call",t),"}"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack(function(e){return[" != null ? ",e,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource(["if (",e," != null) { ",this.appendToBuffer(e,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n,r){var i=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[i++])),this.resolvePath("context",e,i,t,n)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push(["blockParams[",e[0],"][",e[1],"]"]),this.resolvePath("context",t,1)},lookupData:function(e,t,n){e?this.pushStackLiteral("container.data(data, "+e+")"):this.pushStackLiteral("data"),this.resolvePath("data",t,0,!0,n)},resolvePath:function(e,t,n,r,i){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(o(this.options.strict&&i,this,t,e));else for(var a=t.length;n<a;n++)this.replaceStack(function(i){var o=s.nameLookup(i,t[n],e);return r?[" && ",o]:[" != null ? ",o," : ",i]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),"SubExpression"!==t&&("string"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(e?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){null!=e?this.pushStackLiteral(this.programExpression(e)):this.pushStackLiteral(null)},registerDecorator:function(e,t){var n=this.nameLookup("decorators",t,"decorator"),r=this.setupHelperArgs(t,e);this.decorators.push(["fn = ",this.decorators.functionCall(n,"",["fn","props","container",r])," || fn;"])},invokeHelper:function(e,t,n){var r=this.popStack(),i=this.setupHelper(e,t),o=n?[i.name," || "]:"",s=["("].concat(o,r);this.options.strict||s.push(" || ",this.aliasable("helpers.helperMissing")),s.push(")"),this.push(this.source.functionCall(s,"call",i.callParams))},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,e,t),i=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",e,"helper")," || ",n,")"];this.options.strict||(i[0]="(helper = ",i.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",i,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(e,t,n){var r=[],i=this.setupParams(t,1,r);e&&(t=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",i.decorators="container.decorators",e?r.unshift(t):r.unshift(this.nameLookup("partials",t,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("container.invokePartial","",r))},assignToHash:function(e){var t=this.popStack(),n=void 0,r=void 0,i=void 0;this.trackIds&&(i=this.popStack()),this.stringParams&&(r=this.popStack(),n=this.popStack());var o=this.hash;n&&(o.contexts[e]=n),r&&(o.types[e]=r),i&&(o.ids[e]=i),o.values[e]=t},pushId:function(e,t,n){"BlockParam"===e?this.pushStackLiteral("blockParams["+t[0]+"].path["+t[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===e?this.pushString(t):"SubExpression"===e?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:i,compileChildren:function(e,t){for(var n=e.children,r=void 0,i=void 0,o=0,s=n.length;o<s;o++){r=n[o],i=new this.compiler;var a=this.matchExistingProgram(r);if(null==a){this.context.programs.push("");var c=this.context.programs.length;r.index=c,r.name="program"+c,this.context.programs[c]=i.compile(r,t,this.context,!this.precompile),this.context.decorators[c]=i.decorators,this.context.environments[c]=r,this.useDepths=this.useDepths||i.useDepths,this.useBlockParams=this.useBlockParams||i.useBlockParams,r.useDepths=this.useDepths,r.useBlockParams=this.useBlockParams}else r.index=a.index,r.name="program"+a.index,this.useDepths=this.useDepths||a.useDepths,this.useBlockParams=this.useBlockParams||a.useBlockParams}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;t<n;t++){var r=this.context.environments[t];if(r&&r.equals(e))return r}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,"data",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"container.program("+n.join(", ")+")"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof r||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new r(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t=["("],n=void 0,i=void 0,o=void 0;if(!this.isInline())throw new c.default("replaceStack on non-inline");var s=this.popStack(!0);if(s instanceof r)t=["(",n=[s.value]],o=!0;else{i=!0;var a=this.incrStack();t=["((",this.push(a)," = ",s,")"],n=this.topStack()}var u=e.call(this,n);o||this.popStack(),i&&this.stackSlot--,this.push(t.concat(u,")"))},incrStack:function(){return++this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;t<n;t++){var i=e[t];if(i instanceof r)this.compileStack.push(i);else{var o=this.incrStack();this.pushSource([o," = ",i,";"]),this.compileStack.push(o)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof r)return n.value;if(!t){if(!this.stackSlot)throw new c.default("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof r?t.value:t},contextName:function(e){return this.useDepths&&e?"depths["+e+"]":"depth"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):(t=this.aliases[e]=this.source.wrap(e),t.aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var r=[];return{params:r,paramsInit:this.setupHelperArgs(t,e,r,n),name:this.nameLookup("helpers",t,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(r)}},setupParams:function(e,t,n){var r={},i=[],o=[],s=[],a=!n,c=void 0;a&&(n=[]),r.name=this.quotedString(e),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var u=this.popStack(),l=this.popStack();(l||u)&&(r.fn=l||"container.noop",r.inverse=u||"container.noop");for(var p=t;p--;)c=this.popStack(),n[p]=c,this.trackIds&&(s[p]=this.popStack()),this.stringParams&&(o[p]=this.popStack(),i[p]=this.popStack());return a&&(r.args=this.source.generateArray(n)),this.trackIds&&(r.ids=this.source.generateArray(s)),this.stringParams&&(r.types=this.source.generateArray(o),r.contexts=this.source.generateArray(i)),this.options.data&&(r.data="data"),this.useBlockParams&&(r.blockParams="blockParams"),r},setupHelperArgs:function(e,t,n,r){var i=this.setupParams(e,t,n);return i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):n?(n.push(i),""):i}},function(){for(var e="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),t=i.RESERVED_WORDS={},n=0,r=e.length;n<r;n++)t[e[n]]=!0}(),i.isValidJavaScriptVariableName=function(e){return!i.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},t.default=i,e.exports=t.default},function(e,t,n){"use strict";function r(e,t,n){if(o.isArray(e)){for(var r=[],i=0,s=e.length;i<s;i++)r.push(t.wrap(e[i],n));return r}return"boolean"==typeof e||"number"==typeof e?e+"":e}function i(e){this.srcFile=e,this.source=[]}t.__esModule=!0;var o=n(5),s=void 0;try{}catch(e){}s||((s=function(e,t,n,r){this.src="",r&&this.add(r)}).prototype={add:function(e){o.isArray(e)&&(e=e.join("")),this.src+=e},prepend:function(e){o.isArray(e)&&(e=e.join("")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),i.prototype={isEmpty:function(){return!this.source.length},prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each(function(t){e.add(["  ",t,"\n"])}),e},each:function(e){for(var t=0,n=this.source.length;t<n;t++)e(this.source[t])},empty:function(){var e=this.currentLocation||{start:{}};return new s(e.start.line,e.start.column,this.srcFile)},wrap:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return e instanceof s?e:(e=r(e,this,t),new s(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?"."+t+"(":"(",n,")"])},quotedString:function(e){return'"'+(e+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var i=r(e[n],this);"undefined"!==i&&t.push([this.quotedString(n),":",i])}var o=this.generateList(t);return o.prepend("{"),o.add("}"),o},generateList:function(e){for(var t=this.empty(),n=0,i=e.length;n<i;n++)n&&t.add(","),t.add(r(e[n],this));return t},generateArray:function(e){var t=this.generateList(e);return t.prepend("["),t.add("]"),t}},t.default=i,e.exports=t.default}])}),$(document).ready(function(){(new Controller).init();$(".js-insert-array").val('[    "https://c1.staticflickr.com/3/2491/3751647375_4695b378de_z.jpg",    "https://c1.staticflickr.com/3/2443/3752426198_ebe03fa615_z.jpg",    "https://c2.staticflickr.com/2/1032/3175022066_57fce505be_z.jpg",    "https://c1.staticflickr.com/3/2528/3751624573_08815f8950_z.jpg"  ]')});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGxpY2F0aW9uLmpzIiwicHJldmlldy5qcyIsInNsaWRlci5qcyIsImpxdWVyeS0zLjIuMS5qcyIsImhhbmRsZWJhcnMtdjQuMC4xMC5qcyJdLCJuYW1lcyI6WyJDb250cm9sbGVyIiwibGlzdGVuZXJzIiwiJCIsImRvY3VtZW50Iiwib24iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJ2YWwiLCJwcmV2aWV3IiwiY3JlYXRlRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlbmRlclNsaWRlc1RlbXBsYXRlIiwiZXJyb3IiLCJhbGVydCIsInJlbmRlcklucHV0VGVtcGxhdGUiLCJlZGl0RGF0YSIsInJlbmRlclNsaWRlclRlbXBsYXRlIiwic2xpZGVyIiwiU2xpZGVyIiwiaWQiLCJwYXJzZUludCIsInRoaXMiLCJkYXRhIiwiZGVsZXRlRGF0YSIsIm1vdmVTbGlkZSIsIm1hbmFnZUJ1bGxldCIsIlByZXZpZXciLCJpbml0IiwiY29uc29sZSIsImxvZyIsImFycmF5VVJMIiwiYXJyYXlPYmplY3RzIiwiaW5wdXRUZW1wbGF0ZSIsIkhhbmRsZWJhcnMiLCJjb21waWxlIiwiaHRtbCIsInNsaWRlc1RlbXBsYXRlIiwic2xpZGVyVGVtcGxhdGUiLCIkY29udGFpbmVyIiwicmVnaXN0ZXJIZWxwZXIiLCJjb250ZXh0Iiwic3RyaW5naWZ5IiwiYXJyYXkiLCJsZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwicHVzaCIsImltYWdlIiwibGluayIsImNvbW1lbnQiLCJpdGVtTGluayIsImkiLCJzcGxpY2UiLCJzbGlkZXMiLCJzZWxmIiwicG9zaXRpb24iLCIkc2xpZGVyTGlzdCIsIiRzbGlkZXJJdGVtIiwibWF4V2lkdGgiLCJ3aWR0aCIsImJ1dHRvbiIsImRpcmVjdGlvbiIsIiRjdXJyZW50U2xpZGUiLCJhZGRDbGFzcyIsImNzcyIsImxlZnQiLCJyZW1vdmVDbGFzcyIsIm5leHQiLCJjaGlsZHJlbiIsImZpcnN0Iiwic2libGluZ3MiLCJwcmV2IiwibGFzdCIsIiR0aGlzIiwiJHNsaWRlIiwib2Zmc2V0IiwiYXV0b3BsYXlTbGlkZXIiLCJzZXRJbnRlcnZhbCIsImhhc0NsYXNzIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpc0FycmF5TGlrZSIsIm9iaiIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVOYW1lIiwiZWxlbSIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJjYWxsIiwibm9kZVR5cGUiLCJpbmRleE9mIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJjcmVhdGVPcHRpb25zIiwib3B0aW9ucyIsIm9iamVjdCIsImVhY2giLCJtYXRjaCIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJhcHBseSIsInVuZGVmaW5lZCIsInNsaWNlIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJnZXREYXRhIiwicmJyYWNlIiwiZGF0YUF0dHIiLCJrZXkiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsImUiLCJkYXRhVXNlciIsInNldCIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3R5bGUiLCJzdGFydCIsImVuZCIsImdldERlZmF1bHREaXNwbGF5IiwidGVtcCIsIm93bmVyRG9jdW1lbnQiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiZGF0YVByaXYiLCJnZXQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJnZXRBbGwiLCJ0YWciLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImoiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwib2ZmIiwiYXJndW1lbnRzIiwiZ3VpZCIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXh0ZW5kIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJhcmdzIiwiY2FsbGJhY2siLCJjb25jYXQiLCJoYXNTY3JpcHRzIiwibm9kZSIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsImVxIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvdG90eXBlIiwic2NoZWR1bGUiLCJpblByb2dyZXNzIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImZ4IiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcEZpbHRlciIsInByb3BzIiwic3BlY2lhbEVhc2luZyIsImhvb2tzIiwiY2FtZWxDYXNlIiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wZXJ0aWVzIiwicmVzdWx0Iiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiYWx3YXlzIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJvcHRzIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwiX3F1ZXVlSG9va3MiLCJxdWV1ZSIsInByb3h5IiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInN0cmlwQW5kQ29sbGFwc2UiLCJqb2luIiwiZ2V0Q2xhc3MiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwicmJyYWNrZXQiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJ0YXJnZXQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInNwbGl0IiwidGhyb3dzIiwic3RhdGUiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxlbiIsInNvcnQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJpc05hTiIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJtIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJhIiwiYiIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJkaXNhYmxlZEFuY2VzdG9yIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwibWF4RGVwdGgiLCJUeXBlRXJyb3IiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwidG9nZ2xlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwicmZ4dHlwZXMiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImZvciIsImNsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImxvYWRlZCIsImMiLCJjcmVhdGUiLCJoYiIsIl9jcmVhdGUiLCJfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIiLCJwcmVjb21waWxlIiwiQVNUIiwiX2hhbmRsZWJhcnNDb21waWxlckFzdDIiLCJDb21waWxlciIsIkphdmFTY3JpcHRDb21waWxlciIsIl9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyIiwiUGFyc2VyIiwiX2hhbmRsZWJhcnNDb21waWxlckJhc2UiLCJwYXJzZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX19lc01vZHVsZSIsIl9oYW5kbGViYXJzUnVudGltZTIiLCJfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIiLCJfaGFuZGxlYmFyc05vQ29uZmxpY3QyIiwiaW5zdCIsIlZpc2l0b3IiLCJkZWZhdWx0IiwiSGFuZGxlYmFyc0Vudmlyb25tZW50IiwiVXRpbHMiLCJTYWZlU3RyaW5nIiwiX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIkV4Y2VwdGlvbiIsIl9oYW5kbGViYXJzRXhjZXB0aW9uMiIsImVzY2FwZUV4cHJlc3Npb24iLCJWTSIsInJ1bnRpbWUiLCJ0ZW1wbGF0ZSIsInNwZWMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm5ld09iaiIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRlY29yYXRvcnMiLCJfaGVscGVycyIsInJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMiLCJfZGVjb3JhdG9ycyIsInJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMiLCJfdXRpbHMiLCJfZXhjZXB0aW9uMiIsIl9sb2dnZXIyIiwiVkVSU0lPTiIsIkNPTVBJTEVSX1JFVklTSU9OIiwiUkVWSVNJT05fQ0hBTkdFUyIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCJsb2dnZXIiLCJ1bnJlZ2lzdGVySGVscGVyIiwicmVnaXN0ZXJQYXJ0aWFsIiwicGFydGlhbCIsInVucmVnaXN0ZXJQYXJ0aWFsIiwicmVnaXN0ZXJEZWNvcmF0b3IiLCJ1bnJlZ2lzdGVyRGVjb3JhdG9yIiwiY3JlYXRlRnJhbWUiLCJlc2NhcGVDaGFyIiwiY2hyIiwidG9IVE1MIiwicG9zc2libGUiLCJiYWRDaGFycyIsImlzRW1wdHkiLCJmcmFtZSIsIl9wYXJlbnQiLCJibG9ja1BhcmFtcyIsImlkcyIsInBhdGgiLCJhcHBlbmRDb250ZXh0UGF0aCIsImNvbnRleHRQYXRoIiwiJiIsIjwiLCJcIiIsIiciLCJgIiwiPSIsImxvYyIsImxpbmUiLCJjb2x1bW4iLCJlcnJvclByb3BzIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJsaW5lTnVtYmVyIiwiX09iamVjdCRkZWZpbmVQcm9wZXJ0eSIsIm5vcCIsIml0IiwiZGVzYyIsInNldERlc2MiLCIkT2JqZWN0IiwiaXNFbnVtIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXREZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0RGVzY3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0S2V5cyIsImdldE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpbnN0YW5jZSIsIl9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiIsIl9oZWxwZXJzRWFjaDIiLCJfaGVscGVyc0hlbHBlck1pc3NpbmcyIiwiX2hlbHBlcnNJZjIiLCJfaGVscGVyc0xvZzIiLCJfaGVscGVyc0xvb2t1cDIiLCJfaGVscGVyc1dpdGgyIiwiaW52ZXJzZSIsImV4ZWNJdGVyYXRpb24iLCJmaWVsZCIsInByaW9yS2V5IiwiY29uZGl0aW9uYWwiLCJpbmNsdWRlWmVybyIsImxldmVsIiwiX2RlY29yYXRvcnNJbmxpbmUyIiwibWV0aG9kTWFwIiwibG9va3VwTGV2ZWwiLCJsZXZlbE1hcCIsIl9sZW4iLCJfa2V5Iiwid3JhcFByb2dyYW0iLCJkZWNsYXJlZEJsb2NrUGFyYW1zIiwiZGVwdGhzIiwicHJvZyIsImN1cnJlbnREZXB0aHMiLCJudWxsQ29udGV4dCIsImV4ZWN1dGVEZWNvcmF0b3JzIiwicHJvZ3JhbSIsImluaXREYXRhIiwiX2Jhc2UiLCJkZWNvcmF0b3IiLCJfT2JqZWN0JHNlYWwiLCJjaGVja1JldmlzaW9uIiwiY29tcGlsZXJJbmZvIiwiY29tcGlsZXJSZXZpc2lvbiIsImN1cnJlbnRSZXZpc2lvbiIsInJ1bnRpbWVWZXJzaW9ucyIsImNvbXBpbGVyVmVyc2lvbnMiLCJ0ZW1wbGF0ZVNwZWMiLCJlbnYiLCJtYWluIiwiX3NldHVwIiwidXNlRGF0YSIsInVzZUJsb2NrUGFyYW1zIiwidXNlRGVwdGhzIiwibWFpbl9kIiwiY29tcGlsZXIiLCJzdHJpY3QiLCJsb29rdXAiLCJsYW1iZGEiLCJpbnZva2VQYXJ0aWFsIiwicmVzb2x2ZVBhcnRpYWwiLCJjb21waWxlck9wdGlvbnMiLCJpbmRlbnQiLCJsaW5lcyIsInByb2dyYW1zIiwicHJvZ3JhbVdyYXBwZXIiLCJjb21tb24iLCJpc1RvcCIsInVzZVBhcnRpYWwiLCJ1c2VEZWNvcmF0b3JzIiwiX2NoaWxkIiwiY3VycmVudFBhcnRpYWxCbG9jayIsInBhcnRpYWxCbG9jayIsIkZ1bmN0aW9uIiwic2VhbCIsImlzT2JqZWN0IiwiJHNlYWwiLCIkZXhwb3J0IiwiY29yZSIsImZhaWxzIiwiS0VZIiwiZXhwIiwiUyIsIkYiLCJjdHgiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsIkMiLCJfX2ciLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiJEhhbmRsZWJhcnMiLCJoZWxwZXJFeHByZXNzaW9uIiwic2NvcGVkSWQiLCJzaW1wbGVJZCIsIl9wYXJzZXIyIiwieXkiLCJsb2NJbmZvIiwiU291cmNlTG9jYXRpb24iLCJzcmNOYW1lIiwiX3doaXRlc3BhY2VDb250cm9sMiIsImFjY2VwdCIsIkhlbHBlcnMiLCJoYW5kbGViYXJzIiwidHJhY2UiLCJzeW1ib2xzXyIsIkVPRiIsInByb2dyYW1fcmVwZXRpdGlvbjAiLCJzdGF0ZW1lbnQiLCJtdXN0YWNoZSIsImJsb2NrIiwicmF3QmxvY2siLCJDT01NRU5UIiwiQ09OVEVOVCIsIm9wZW5SYXdCbG9jayIsInJhd0Jsb2NrX3JlcGV0aXRpb25fcGx1czAiLCJFTkRfUkFXX0JMT0NLIiwiT1BFTl9SQVdfQkxPQ0siLCJoZWxwZXJOYW1lIiwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wIiwib3BlblJhd0Jsb2NrX29wdGlvbjAiLCJDTE9TRV9SQVdfQkxPQ0siLCJvcGVuQmxvY2siLCJibG9ja19vcHRpb24wIiwiY2xvc2VCbG9jayIsIm9wZW5JbnZlcnNlIiwiYmxvY2tfb3B0aW9uMSIsIk9QRU5fQkxPQ0siLCJvcGVuQmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuQmxvY2tfb3B0aW9uMCIsIm9wZW5CbG9ja19vcHRpb24xIiwiQ0xPU0UiLCJPUEVOX0lOVkVSU0UiLCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMCIsIm9wZW5JbnZlcnNlX29wdGlvbjAiLCJvcGVuSW52ZXJzZV9vcHRpb24xIiwib3BlbkludmVyc2VDaGFpbiIsIk9QRU5fSU5WRVJTRV9DSEFJTiIsIm9wZW5JbnZlcnNlQ2hhaW5fcmVwZXRpdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjEiLCJpbnZlcnNlQW5kUHJvZ3JhbSIsIklOVkVSU0UiLCJpbnZlcnNlQ2hhaW4iLCJpbnZlcnNlQ2hhaW5fb3B0aW9uMCIsIk9QRU5fRU5EQkxPQ0siLCJPUEVOIiwibXVzdGFjaGVfcmVwZXRpdGlvbjAiLCJtdXN0YWNoZV9vcHRpb24wIiwiT1BFTl9VTkVTQ0FQRUQiLCJtdXN0YWNoZV9yZXBldGl0aW9uMSIsIm11c3RhY2hlX29wdGlvbjEiLCJDTE9TRV9VTkVTQ0FQRUQiLCJPUEVOX1BBUlRJQUwiLCJwYXJ0aWFsTmFtZSIsInBhcnRpYWxfcmVwZXRpdGlvbjAiLCJwYXJ0aWFsX29wdGlvbjAiLCJvcGVuUGFydGlhbEJsb2NrIiwiT1BFTl9QQVJUSUFMX0JMT0NLIiwib3BlblBhcnRpYWxCbG9ja19yZXBldGl0aW9uMCIsIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMCIsInNleHByIiwiT1BFTl9TRVhQUiIsInNleHByX3JlcGV0aXRpb24wIiwic2V4cHJfb3B0aW9uMCIsIkNMT1NFX1NFWFBSIiwiaGFzaF9yZXBldGl0aW9uX3BsdXMwIiwiaGFzaFNlZ21lbnQiLCJFUVVBTFMiLCJPUEVOX0JMT0NLX1BBUkFNUyIsImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czAiLCJDTE9TRV9CTE9DS19QQVJBTVMiLCJkYXRhTmFtZSIsIlNUUklORyIsIk5VTUJFUiIsIkJPT0xFQU4iLCJVTkRFRklORUQiLCJOVUxMIiwiREFUQSIsInBhdGhTZWdtZW50cyIsIlNFUCIsIiRhY2NlcHQiLCIkZW5kIiwidGVybWluYWxzXyIsIjE0IiwiMTUiLCIxOCIsIjE5IiwiMjMiLCIyOSIsIjMzIiwiMzQiLCIzOSIsIjQ0IiwiNDciLCI0OCIsIjUxIiwiNTQiLCI1NSIsIjYwIiwiNjUiLCI2OCIsIjcyIiwiNzMiLCI3NSIsIjc3IiwiODAiLCI4MSIsIjgyIiwiODMiLCI4NCIsIjg1IiwiODciLCJwcm9kdWN0aW9uc18iLCJwZXJmb3JtQWN0aW9uIiwieXl0ZXh0IiwieXlsZW5nIiwieXlsaW5lbm8iLCJ5eXN0YXRlIiwiJCQiLCIkMCIsInByZXBhcmVQcm9ncmFtIiwic3RyaXBDb21tZW50Iiwic3RyaXAiLCJzdHJpcEZsYWdzIiwicHJlcGFyZVJhd0Jsb2NrIiwicHJlcGFyZUJsb2NrIiwiY2hhaW5lZCIsImNoYWluIiwicHJlcGFyZU11c3RhY2hlIiwicHJlcGFyZVBhcnRpYWxCbG9jayIsInBhaXJzIiwiTnVtYmVyIiwicHJlcGFyZVBhdGgiLCJwYXJ0Iiwic2VwYXJhdG9yIiwidGFibGUiLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTYiLCIyNCIsIjI3IiwiNTkiLCIyMCIsIjc4IiwiNzkiLCI4NiIsIjE3IiwiNTYiLCI2NCIsIjQ5IiwiNTIiLCIyNSIsIjM4IiwiNDMiLCI0NSIsIjI4IiwiNTciLCIyNiIsIjMwIiwiMzUiLCIyMSIsIjYxIiwiNTAiLCI2MyIsIjY5IiwiNzAiLCI3MSIsIjUzIiwiNTgiLCI2NiIsIjMxIiwiMzYiLCIyMiIsIjYyIiwiNDYiLCI0MCIsIjY3IiwiMzIiLCI3NCIsIjM3IiwiNDEiLCI3NiIsIjQyIiwiZGVmYXVsdEFjdGlvbnMiLCI5MSIsIjEwMiIsIjEwNSIsIjExMSIsIjExMiIsIjExNyIsIjEyMCIsIjEyMyIsIjEyNCIsIjEzNiIsIjEzNyIsInBhcnNlRXJyb3IiLCJzdHIiLCJ2c3RhY2siLCJsc3RhY2siLCJyZWNvdmVyaW5nIiwibGV4ZXIiLCJzZXRJbnB1dCIsInl5bGxvYyIsInl5bG9jIiwicmFuZ2VzIiwic3ltYm9sIiwicHJlRXJyb3JTeW1ib2wiLCJhY3Rpb24iLCJyIiwibmV3U3RhdGUiLCJleHBlY3RlZCIsInl5dmFsIiwibGV4IiwiZXJyU3RyIiwic2hvd1Bvc2l0aW9uIiwiZmlyc3RfbGluZSIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwicmFuZ2UiLCJfaW5wdXQiLCJfbW9yZSIsIl9sZXNzIiwiY29uZGl0aW9uU3RhY2siLCJ1bnB1dCIsInN1YnN0ciIsIm9sZExpbmVzIiwibW9yZSIsImxlc3MiLCJwYXN0SW5wdXQiLCJwYXN0IiwidXBjb21pbmdJbnB1dCIsInByZSIsInRlbXBNYXRjaCIsInJ1bGVzIiwiX2N1cnJlbnRSdWxlcyIsImZsZXgiLCJiZWdpbiIsImNvbmRpdGlvbiIsInBvcFN0YXRlIiwiY29uZGl0aW9ucyIsInRvcFN0YXRlIiwicHVzaFN0YXRlIiwieXlfIiwiJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyIsIllZX1NUQVJUIiwibXUiLCJpbmNsdXNpdmUiLCJlbXUiLCJjb20iLCJJTklUSUFMIiwiV2hpdGVzcGFjZUNvbnRyb2wiLCJpc1ByZXZXaGl0ZXNwYWNlIiwiaXNSb290IiwiaXNOZXh0V2hpdGVzcGFjZSIsIm9taXRSaWdodCIsIm11bHRpcGxlIiwicmlnaHRTdHJpcHBlZCIsIm9taXRMZWZ0IiwibGVmdFN0cmlwcGVkIiwiX3Zpc2l0b3IyIiwiUHJvZ3JhbSIsImRvU3RhbmRhbG9uZSIsImlnbm9yZVN0YW5kYWxvbmUiLCJpc1Jvb3RTZWVuIiwiX2lzUHJldldoaXRlc3BhY2UiLCJfaXNOZXh0V2hpdGVzcGFjZSIsIm9wZW5TdGFuZGFsb25lIiwiY2xvc2VTdGFuZGFsb25lIiwiaW5saW5lU3RhbmRhbG9uZSIsImNsb3NlIiwiQmxvY2tTdGF0ZW1lbnQiLCJEZWNvcmF0b3JCbG9jayIsIlBhcnRpYWxCbG9ja1N0YXRlbWVudCIsImZpcnN0SW52ZXJzZSIsImxhc3RJbnZlcnNlIiwib3BlblN0cmlwIiwiY2xvc2VTdHJpcCIsImludmVyc2VTdHJpcCIsIkRlY29yYXRvciIsIk11c3RhY2hlU3RhdGVtZW50IiwiUGFydGlhbFN0YXRlbWVudCIsIkNvbW1lbnRTdGF0ZW1lbnQiLCJ2aXNpdFN1YkV4cHJlc3Npb24iLCJhY2NlcHRSZXF1aXJlZCIsImFjY2VwdEFycmF5IiwiYWNjZXB0S2V5IiwidmlzaXRCbG9jayIsInZpc2l0UGFydGlhbCIsIm11dGF0aW5nIiwiQ29udGVudFN0YXRlbWVudCIsIlN1YkV4cHJlc3Npb24iLCJQYXRoRXhwcmVzc2lvbiIsIlN0cmluZ0xpdGVyYWwiLCJOdW1iZXJMaXRlcmFsIiwiQm9vbGVhbkxpdGVyYWwiLCJVbmRlZmluZWRMaXRlcmFsIiwiTnVsbExpdGVyYWwiLCJIYXNoIiwiSGFzaFBhaXIiLCJwYWlyIiwidmFsaWRhdGVDbG9zZSIsImVycm9yTm9kZSIsImNoYXJBdCIsImRpZyIsImRlcHRoU3RyaW5nIiwiaXNMaXRlcmFsIiwiZXNjYXBlRmxhZyIsImludmVydGVkIiwic3RhdGVtZW50cyIsImZpcnN0TG9jIiwibGFzdExvYyIsImFyZ0VxdWFscyIsInRyYW5zZm9ybUxpdGVyYWxUb1BhdGgiLCJsaXRlcmFsIiwiY29tcGF0IiwiYXN0IiwiZW52aXJvbm1lbnQiLCJjb21waWxlSW5wdXQiLCJleGVjT3B0aW9ucyIsInNldHVwT3B0aW9ucyIsIl9hc3QyIiwiZXF1YWxzIiwib3RoZXIiLCJvcGNvZGVzIiwib3Bjb2RlIiwib3RoZXJPcGNvZGUiLCJzb3VyY2VOb2RlIiwic3RyaW5nUGFyYW1zIiwidHJhY2tJZHMiLCJrbm93bkhlbHBlcnMiLCJoZWxwZXJNaXNzaW5nIiwiYmxvY2tIZWxwZXJNaXNzaW5nIiwiaWYiLCJ1bmxlc3MiLCJ3aXRoIiwiX25hbWUiLCJjb21waWxlUHJvZ3JhbSIsImJvZHlMZW5ndGgiLCJpc1NpbXBsZSIsImNsYXNzaWZ5U2V4cHIiLCJoZWxwZXJTZXhwciIsInNpbXBsZVNleHByIiwiYW1iaWd1b3VzU2V4cHIiLCJzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyIsImV4cGxpY2l0UGFydGlhbENvbnRleHQiLCJpc0R5bmFtaWMiLCJwcmV2ZW50SW5kZW50Iiwibm9Fc2NhcGUiLCJpc0Jsb2NrIiwia25vd25IZWxwZXJzT25seSIsImZhbHN5IiwiYWRkRGVwdGgiLCJzY29wZWQiLCJibG9ja1BhcmFtSWQiLCJibG9ja1BhcmFtSW5kZXgiLCJudW1iZXIiLCJwdXNoUGFyYW0iLCJpc0Jsb2NrUGFyYW0iLCJpc0hlbHBlciIsImlzRWxpZ2libGUiLCJfbmFtZTIiLCJwdXNoUGFyYW1zIiwiYmxvY2tQYXJhbUNoaWxkIiwib21pdEVtcHR5IiwiTGl0ZXJhbCIsInN0cmljdExvb2t1cCIsInJlcXVpcmVUZXJtaW5hbCIsInBvcFN0YWNrIiwibmFtZUxvb2t1cCIsImFsaWFzYWJsZSIsInF1b3RlZFN0cmluZyIsIl9jb2RlR2VuMiIsImlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lIiwiZGVwdGhlZExvb2t1cCIsInJldmlzaW9uIiwiYXBwZW5kVG9CdWZmZXIiLCJleHBsaWNpdCIsImluaXRpYWxpemVCdWZmZXIiLCJhc09iamVjdCIsImlzQ2hpbGQiLCJlbnZpcm9ubWVudHMiLCJwcmVhbWJsZSIsInN0YWNrU2xvdCIsInN0YWNrVmFycyIsImFsaWFzZXMiLCJyZWdpc3RlcnMiLCJoYXNoZXMiLCJjb21waWxlU3RhY2siLCJpbmxpbmVTdGFjayIsImNvbXBpbGVDaGlsZHJlbiIsImN1cnJlbnRMb2NhdGlvbiIsInB1c2hTb3VyY2UiLCJjcmVhdGVGdW5jdGlvbkNvbnRleHQiLCJfY29udGV4dCIsIm9iamVjdExpdGVyYWwiLCJ0b1N0cmluZ1dpdGhTb3VyY2VNYXAiLCJkZXN0TmFtZSIsImxhc3RDb250ZXh0IiwidmFyRGVjbGFyYXRpb25zIiwibG9jYWxzIiwiYWxpYXNDb3VudCIsImFsaWFzIiwicmVmZXJlbmNlQ291bnQiLCJtZXJnZVNvdXJjZSIsImFwcGVuZE9ubHkiLCJmb3JjZUJ1ZmZlciIsImFwcGVuZEZpcnN0Iiwic291cmNlU2VlbiIsImJ1ZmZlclN0YXJ0IiwiYnVmZmVyRW5kIiwic3Vic3RyaW5nIiwiYmxvY2tWYWx1ZSIsImNvbnRleHROYW1lIiwic2V0dXBIZWxwZXJBcmdzIiwiYmxvY2tOYW1lIiwiZnVuY3Rpb25DYWxsIiwiYW1iaWd1b3VzQmxvY2tWYWx1ZSIsImZsdXNoSW5saW5lIiwidG9wU3RhY2siLCJsYXN0SGVscGVyIiwiYXBwZW5kQ29udGVudCIsInBlbmRpbmdDb250ZW50IiwicGVuZGluZ0xvY2F0aW9uIiwiaXNJbmxpbmUiLCJyZXBsYWNlU3RhY2siLCJsb2NhbCIsImFwcGVuZEVzY2FwZWQiLCJnZXRDb250ZXh0IiwicHVzaENvbnRleHQiLCJwdXNoU3RhY2tMaXRlcmFsIiwibG9va3VwT25Db250ZXh0IiwicmVzb2x2ZVBhdGgiLCJsb29rdXBCbG9ja1BhcmFtIiwibG9va3VwRGF0YSIsIl90aGlzIiwiYXNzdW1lT2JqZWN0cyIsInJlc29sdmVQb3NzaWJsZUxhbWJkYSIsInB1c2hTdHJpbmdQYXJhbSIsInB1c2hTdHJpbmciLCJlbXB0eUhhc2giLCJwdXNoSGFzaCIsInBvcEhhc2giLCJwdXNoTGl0ZXJhbCIsInB1c2hQcm9ncmFtIiwicHJvZ3JhbUV4cHJlc3Npb24iLCJwYXJhbVNpemUiLCJmb3VuZERlY29yYXRvciIsImludm9rZUhlbHBlciIsIm5vbkhlbHBlciIsImhlbHBlciIsInNldHVwSGVscGVyIiwiY2FsbFBhcmFtcyIsImludm9rZUtub3duSGVscGVyIiwiaW52b2tlQW1iaWd1b3VzIiwiaGVscGVyQ2FsbCIsInVzZVJlZ2lzdGVyIiwicGFyYW1zSW5pdCIsInNldHVwUGFyYW1zIiwiYXNzaWduVG9IYXNoIiwicHVzaElkIiwiY2hpbGQiLCJleGlzdGluZyIsIm1hdGNoRXhpc3RpbmdQcm9ncmFtIiwicHJvZ3JhbVBhcmFtcyIsImNyZWF0ZWRTdGFjayIsInVzZWRMaXRlcmFsIiwiaW5jclN0YWNrIiwidG9wU3RhY2tOYW1lIiwiZW50cnkiLCJ3cmFwcGVkIiwiaW5saW5lIiwiYmxvY2tIZWxwZXIiLCJvYmplY3RBcmdzIiwiaGFzaElkcyIsImhhc2hUeXBlcyIsImhhc2hDb250ZXh0cyIsImdlbmVyYXRlQXJyYXkiLCJyZXNlcnZlZFdvcmRzIiwiY29tcGlsZXJXb3JkcyIsIlJFU0VSVkVEX1dPUkRTIiwiY2FzdENodW5rIiwiY2h1bmsiLCJjb2RlR2VuIiwiQ29kZUdlbiIsInNyY0ZpbGUiLCJTb3VyY2VOb2RlIiwiY2h1bmtzIiwiaXRlciIsImdlbmVyYXRlTGlzdCIsImVudHJpZXMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQUFBLGFBS0EsU0FBQUMsSUFDQUMsRUFBQUMsVUFDQUMsR0FBQSxRQUFBLGdCQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLGlCQUNBLElBQ0EsSUFBQUMsRUFBQUwsRUFBQSxvQkFBQU0sTUFDQUMsRUFBQUMsV0FBQUMsS0FBQUMsTUFBQUwsSUFDQUUsRUFBQUksdUJBQ0EsTUFBQUMsR0FDQUMsTUFBQSxXQUFBRCxNQUdBVixHQUFBLFFBQUEsb0JBQUEsV0FDQUssRUFBQU8sd0JBRUFaLEdBQUEsU0FBQSxnQ0FBQSxXQUNBSyxFQUFBUSxhQUVBYixHQUFBLFFBQUEsa0JBQUEsV0FDQUssRUFBQVMsdUJBQ0FDLEVBQUEsSUFBQUMsU0FHQWhCLEdBQUEsUUFBQSxtQkFBQSxXQUNBLElBQUFpQixFQUFBQyxTQUFBcEIsRUFBQXFCLE1BQUFDLEtBQUEsT0FDQWYsRUFBQWdCLFdBQUFKLEdBQ0FaLEVBQUFJLHlCQUVBVCxHQUFBLFFBQUEsZUFBQSxXQUNBZSxFQUFBTyxVQUFBeEIsRUFBQXFCLE1BQUFyQixFQUFBcUIsTUFBQUMsS0FBQSxnQkFFQXBCLEdBQUEsUUFBQSxlQUFBLFdBQ0FlLEVBQUFPLFVBQUF4QixFQUFBcUIsTUFBQXJCLEVBQUFxQixNQUFBQyxLQUFBLGdCQUVBcEIsR0FBQSxRQUFBLGFBQUEsV0FDQSxJQUFBaUIsRUFBQUMsU0FBQXBCLEVBQUFxQixNQUFBQyxLQUFBLE9BRUFMLEVBQUFRLGFBQUF6QixFQUFBcUIsTUFBQUYsS0FRQWpCLEdBQUEsUUFBQSxvQkFBQSxXQUNBSyxFQUFBSSx5QkFsREEsSUFFQU0sRUFEQVYsRUFBQSxJQUFBbUIsUUFxREFMLEtBQUFNLEtBQUEsV0FDQUMsUUFBQUMsSUFBQSxRQUNBdEIsRUFBQU8sc0JBQ0FmLEtDckRBLFNBQUEyQixVQUNBLElBQ0FJLEtBQ0FDLEtBQ0FDLEVBQUFDLFdBQUFDLFFBQUFsQyxFQUFBLG1CQUFBbUMsUUFDQUMsRUFBQUgsV0FBQUMsUUFBQWxDLEVBQUEsb0JBQUFtQyxRQUNBRSxFQUFBSixXQUFBQyxRQUFBbEMsRUFBQSxvQkFBQW1DLFFBQ0FHLEVBQUF0QyxFQUFBLGlCQUVBaUMsV0FBQU0sZUFBQSxPQUFBLFNBQUFDLEdBQ0EsT0FBQS9CLEtBQUFnQyxVQUFBRCxLQUdBbkIsS0FBQWIsV0FBQSxTQUFBa0MsR0FDQSxJQUFBWCxFQUFBWSxRQUFBLElBQUFiLEVBQUFhLFNBQ0FaLEVBQUFZLE9BQUEsRUFDQWIsRUFBQWEsT0FBQSxHQUVBQyxNQUFBQyxRQUFBSCxHQUNBQSxFQUFBSSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FsQixFQUFBbUIsS0FBQUYsR0FDQWhCLEVBQUFrQixNQUNBOUIsR0FBQTZCLEVBQ0FFLE1BQUFILEVBQ0FJLEtBQUEsR0FDQUMsUUFBQSxPQUlBdkMsTUFBQSwwQ0FJQVEsS0FBQU4sU0FBQSxXQUNBZ0IsRUFBQWUsUUFBQSxTQUFBQyxHQUNBLElBQUFNLEVBRUFBLEVBQUFyRCxFQUFBLHlCQUFBK0MsRUFBQTVCLEdBQUEsTUFBQWIsTUFDQXlDLEVBQUFLLFFBQUFwRCxFQUFBLDRCQUFBK0MsRUFBQTVCLEdBQUEsTUFBQWIsTUFDQXlDLEVBQUFJLEtBQUFFLEtBSUFoQyxLQUFBRSxXQUFBLFNBQUFKLEdBQ0FZLEVBQUFlLFFBQUEsU0FBQUMsRUFBQU8sR0FDQVAsRUFBQTVCLEtBQUFBLEdBQ0FZLEVBQUF3QixPQUFBRCxFQUFBLE1BS0FqQyxLQUFBUCxvQkFBQSxXQUNBd0IsRUFBQUgsS0FBQUgsR0FBQXdCLE9BQUExQixNQUdBVCxLQUFBVixxQkFBQSxXQUNBMkIsRUFBQUgsS0FBQUMsR0FBQW9CLE9BQUF6QixNQzdEQVYsS0FBQUwscUJBQUEsV0FDQXNCLEVBQUFILEtBQUFFLEdBQUFtQixPQUFBekIsTUFJQSxTQUFBYixTQUNBLElBQ0F1QyxFQUFBcEMsS0FDQXFDLEVBQUEsRUFDQUMsRUFBQTNELEVBQUEsZ0JBQ0E0RCxFQUFBNUQsRUFBQSxnQkFDQTZELEVBQUFELEVBQUFFLFNBQUFGLEVBQUFqQixPQUFBLEdBRUF0QixLQUFBRyxVQUFBLFNBQUF1QyxFQUFBQyxHQUNBLElBQUFDLEVBQUFqRSxFQUFBLDBCQUdBLFVBQUFnRSxHQUNBTixHQUFBTyxFQUFBSCxRQUNBSCxFQUFBTyxTQUFBLFlBQUFDLEtBQUFDLEtBQUFWLEVBQUEsT0FDQU8sRUFBQUksWUFBQSxVQUFBQyxLQUFBLG1CQUFBSixTQUFBLFVBRUFSLElBQUFHLElBQ0FILEVBQUEsRUFDQUMsRUFBQVUsWUFBQSxZQUFBRixLQUFBQyxLQUFBVixFQUFBLE9BQ0FDLEVBQUFZLFdBQUFDLFFBQUFOLFNBQUEsVUFBQU8sV0FBQUosWUFBQSxVQUNBWixFQUFBakMsVUFBQSxXQUdBLFNBQUF3QyxJQUNBTixHQUFBTyxFQUFBSCxRQUNBSCxFQUFBTyxTQUFBLFlBQUFDLEtBQUFDLEtBQUFWLEVBQUEsT0FDQU8sRUFBQUksWUFBQSxVQUFBSyxLQUFBLG1CQUFBUixTQUFBLFVBRUFSLEVBQUEsSUFDQUEsR0FBQUcsRUFDQUYsRUFBQVUsWUFBQSxZQUFBRixLQUFBQyxLQUFBVixFQUFBLE9BQ0FDLEVBQUFZLFdBQUFJLE9BQUFULFNBQUEsVUFBQU8sV0FBQUosWUFBQSxVQUNBWixFQUFBakMsVUFBQSxVQUdBeEIsRUFBQSx1QkFBQUEsRUFBQSwwQkFBQXNCLEtBQUEsTUFBQSxNQUFBNEMsU0FBQSxVQUFBTyxXQUFBSixZQUFBLFdBWUFoRCxLQUFBSSxhQUFBLFNBQUFtRCxFQUFBekQsR0FDQSxJQUNBMEQsRUFBQTdFLEVBQUEsNEJBQUFtQixFQUFBLE1BQ0EyRCxFQUFBM0QsRUFBQTBELEVBQUFmLFFBRUFILEVBQUFPLFNBQUEsWUFBQUMsS0FBQUMsS0FBQSxJQUFBVSxFQUFBLE9BQ0FELEVBQUFYLFNBQUEsVUFBQU8sV0FBQUosWUFBQSxVQUNBTyxFQUFBVixTQUFBLFVBQUFPLFdBQUFKLFlBQUEsV0FHQWhELEtBQUEwRCxlQUFBLFdBQ0FDLFlBQUEsV0FDQWhGLEVBQUEsV0FBQWlGLFNBQUEsVUFDQXhCLEVBQUFqQyxVQUFBLGlCQ3JEQSxTQUFBMEQsRUFBQUMsR0FFQSxhQUVBLGlCQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxRQVNBRCxPQUFBQyxRQUFBSCxFQUFBakYsU0FDQWtGLEVBQUFELEdBQUEsR0FDQSxTQUFBSSxHQUNBLElBQUFBLEVBQUFyRixTQUNBLE1BQUEsSUFBQXNGLE1BQUEsNENBRUEsT0FBQUosRUFBQUcsSUFHQUgsRUFBQUQsSUFJQSxvQkFBQU0sT0FBQUEsT0FBQW5FLEtBQUEsU0FBQW1FLEVBQUFDLEdBTUEsYUE4QkEsU0FBQUMsRUFBQUMsRUFBQUMsR0FHQSxJQUFBQyxHQUZBRCxFQUFBQSxHQUFBM0YsSUFFQTZGLGNBQUEsVUFFQUQsRUFBQUUsS0FBQUosRUFDQUMsRUFBQUksS0FBQUMsWUFBQUosR0FBQUssV0FBQUMsWUFBQU4sR0F3YkEsU0FBQU8sRUFBQUMsR0FNQSxJQUFBMUQsSUFBQTBELEdBQUEsV0FBQUEsR0FBQUEsRUFBQTFELE9BQ0EyRCxFQUFBQyxHQUFBRCxLQUFBRCxHQUVBLE1BQUEsYUFBQUMsSUFBQUMsR0FBQUMsU0FBQUgsS0FJQSxVQUFBQyxHQUFBLElBQUEzRCxHQUNBLGlCQUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsS0FBQTBELEdBa3dFQSxTQUFBSSxFQUFBQyxFQUFBQyxHQUVBLE9BQUFELEVBQUFELFVBQUFDLEVBQUFELFNBQUFHLGdCQUFBRCxFQUFBQyxjQVVBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQVQsR0FBQVUsV0FBQUYsR0FDQVIsR0FBQVcsS0FBQUosRUFBQSxTQUFBSixFQUFBcEQsR0FDQSxRQUFBeUQsRUFBQUksS0FBQVQsRUFBQXBELEVBQUFvRCxLQUFBTSxJQUtBRCxFQUFBSyxTQUNBYixHQUFBVyxLQUFBSixFQUFBLFNBQUFKLEdBQ0EsT0FBQUEsSUFBQUssSUFBQUMsSUFLQSxpQkFBQUQsRUFDQVIsR0FBQVcsS0FBQUosRUFBQSxTQUFBSixHQUNBLE9BQUFXLEdBQUFGLEtBQUFKLEVBQUFMLElBQUEsSUFBQU0sSUFLQU0sR0FBQUMsS0FBQVIsR0FDQVIsR0FBQWlCLE9BQUFULEVBQUFELEVBQUFFLElBSUFELEVBQUFSLEdBQUFpQixPQUFBVCxFQUFBRCxHQUNBUCxHQUFBVyxLQUFBSixFQUFBLFNBQUFKLEdBQ0EsT0FBQVcsR0FBQUYsS0FBQUosRUFBQUwsSUFBQSxJQUFBTSxHQUFBLElBQUFOLEVBQUFVLFlBa1JBLFNBQUFLLEVBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsRUFBQUEsRUFBQUMsS0FBQSxJQUFBRCxFQUFBTixXQUNBLE9BQUFNLEVBcUZBLFNBQUFFLEVBQUFDLEdBQ0EsSUFBQUMsS0FJQSxPQUhBdkIsR0FBQXdCLEtBQUFGLEVBQUFHLE1BQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUwsRUFBQUssSUFBQSxJQUVBTCxFQTROQSxTQUFBTSxFQUFBQyxHQUNBLE9BQUFBLEVBRUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBQSxFQUdBLFNBQUFDLEVBQUFuSSxFQUFBb0ksRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUVBLElBR0F2SSxHQUFBa0csR0FBQVUsV0FBQTJCLEVBQUF2SSxFQUFBd0ksU0FDQUQsRUFBQXpCLEtBQUE5RyxHQUFBeUksS0FBQUwsR0FBQU0sS0FBQUwsR0FHQXJJLEdBQUFrRyxHQUFBVSxXQUFBMkIsRUFBQXZJLEVBQUEySSxNQUNBSixFQUFBekIsS0FBQTlHLEVBQUFvSSxFQUFBQyxHQVFBRCxFQUFBUSxXQUFBQyxHQUFBN0ksR0FBQThJLE1BQUFSLElBTUEsTUFBQXRJLEdBSUFxSSxFQUFBTyxXQUFBQyxHQUFBN0ksS0FzYUEsU0FBQStJLElBQ0FuSixHQUFBb0osb0JBQUEsbUJBQUFELEdBQ0E1RCxFQUFBNkQsb0JBQUEsT0FBQUQsR0FDQTdDLEdBQUErQyxRQW1HQSxTQUFBQyxJQUNBbEksS0FBQW1JLFFBQUFqRCxHQUFBaUQsUUFBQUQsRUFBQUUsTUF3S0EsU0FBQUMsRUFBQXBJLEdBQ0EsTUFBQSxTQUFBQSxHQUlBLFVBQUFBLElBSUEsU0FBQUEsRUFDQSxLQUlBQSxLQUFBQSxFQUFBLElBQ0FBLEVBR0FxSSxHQUFBcEMsS0FBQWpHLEdBQ0FiLEtBQUFDLE1BQUFZLEdBR0FBLEdBR0EsU0FBQXNJLEVBQUFsRCxFQUFBbUQsRUFBQXZJLEdBQ0EsSUFBQXFGLEVBSUEsUUFBQXVDLElBQUE1SCxHQUFBLElBQUFvRixFQUFBVSxTQUlBLEdBSEFULEVBQUEsUUFBQWtELEVBQUFDLFFBQUFDLEdBQUEsT0FBQW5ELGNBR0EsaUJBRkF0RixFQUFBb0YsRUFBQXNELGFBQUFyRCxJQUVBLENBQ0EsSUFDQXJGLEVBQUFvSSxFQUFBcEksR0FDQSxNQUFBMkksSUFHQUMsR0FBQUMsSUFBQXpELEVBQUFtRCxFQUFBdkksUUFFQUEsT0FBQTRILEVBR0EsT0FBQTVILEVBcVNBLFNBQUE4SSxFQUFBMUQsRUFBQTJELEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEdBQ0FDLEVBQUFKLEVBQ0EsV0FDQSxPQUFBQSxFQUFBN0MsT0FFQSxXQUNBLE9BQUFuQixHQUFBcEMsSUFBQXVDLEVBQUEyRCxFQUFBLEtBRUFPLEVBQUFELElBQ0FFLEVBQUFQLEdBQUFBLEVBQUEsS0FBQS9ELEdBQUF1RSxVQUFBVCxHQUFBLEdBQUEsTUFHQVUsR0FBQXhFLEdBQUF1RSxVQUFBVCxJQUFBLE9BQUFRLElBQUFELElBQ0FJLEdBQUFDLEtBQUExRSxHQUFBcEMsSUFBQXVDLEVBQUEyRCxJQUVBLEdBQUFVLEdBQUFBLEVBQUEsS0FBQUYsRUFBQSxDQUdBQSxFQUFBQSxHQUFBRSxFQUFBLEdBR0FULEVBQUFBLE1BR0FTLEdBQUFILEdBQUEsRUFFQSxHQU9BRyxHQUhBTixFQUFBQSxHQUFBLEtBSUFsRSxHQUFBMkUsTUFBQXhFLEVBQUEyRCxFQUFBVSxFQUFBRixTQUtBSixLQUFBQSxFQUFBRSxJQUFBQyxJQUFBLElBQUFILEtBQUFDLEdBaUJBLE9BYkFKLElBQ0FTLEdBQUFBLElBQUFILEdBQUEsRUFHQUosRUFBQUYsRUFBQSxHQUNBUyxHQUFBVCxFQUFBLEdBQUEsR0FBQUEsRUFBQSxJQUNBQSxFQUFBLEdBQ0FDLElBQ0FBLEVBQUFNLEtBQUFBLEVBQ0FOLEVBQUFZLE1BQUFKLEVBQ0FSLEVBQUFhLElBQUFaLElBR0FBLEVBTUEsU0FBQWEsRUFBQTNFLEdBQ0EsSUFBQTRFLEVBQ0ExRixFQUFBYyxFQUFBNkUsY0FDQTlFLEVBQUFDLEVBQUFELFNBQ0ErRSxFQUFBQyxHQUFBaEYsR0FFQSxPQUFBK0UsSUFJQUYsRUFBQTFGLEVBQUE4RixLQUFBekYsWUFBQUwsRUFBQUUsY0FBQVcsSUFDQStFLEVBQUFqRixHQUFBcEMsSUFBQW1ILEVBQUEsV0FFQUEsRUFBQXBGLFdBQUFDLFlBQUFtRixHQUVBLFNBQUFFLElBQ0FBLEVBQUEsU0FFQUMsR0FBQWhGLEdBQUErRSxFQUVBQSxHQUdBLFNBQUFHLEVBQUE3RSxFQUFBOEUsR0FPQSxJQU5BLElBQUFKLEVBQUE5RSxFQUNBbUYsS0FDQTdJLEVBQUEsRUFDQUwsRUFBQW1FLEVBQUFuRSxPQUdBSyxFQUFBTCxFQUFBSyxLQUNBMEQsRUFBQUksRUFBQTlELElBQ0FrSSxRQUlBTSxFQUFBOUUsRUFBQXdFLE1BQUFNLFFBQ0FJLEdBS0EsU0FBQUosSUFDQUssRUFBQTdJLEdBQUE4SSxHQUFBQyxJQUFBckYsRUFBQSxZQUFBLEtBQ0FtRixFQUFBN0ksS0FDQTBELEVBQUF3RSxNQUFBTSxRQUFBLEtBR0EsS0FBQTlFLEVBQUF3RSxNQUFBTSxTQUFBUSxHQUFBdEYsS0FDQW1GLEVBQUE3SSxHQUFBcUksRUFBQTNFLEtBR0EsU0FBQThFLElBQ0FLLEVBQUE3SSxHQUFBLE9BR0E4SSxHQUFBM0IsSUFBQXpELEVBQUEsVUFBQThFLEtBTUEsSUFBQXhJLEVBQUEsRUFBQUEsRUFBQUwsRUFBQUssSUFDQSxNQUFBNkksRUFBQTdJLEtBQ0E4RCxFQUFBOUQsR0FBQWtJLE1BQUFNLFFBQUFLLEVBQUE3SSxJQUlBLE9BQUE4RCxFQXdEQSxTQUFBbUYsRUFBQXpKLEVBQUEwSixHQUlBLElBQUFDLEVBWUEsT0FUQUEsT0FEQSxJQUFBM0osRUFBQTRKLHFCQUNBNUosRUFBQTRKLHFCQUFBRixHQUFBLFVBRUEsSUFBQTFKLEVBQUE2SixpQkFDQTdKLEVBQUE2SixpQkFBQUgsR0FBQSxhQU1BaEQsSUFBQWdELEdBQUFBLEdBQUF6RixFQUFBakUsRUFBQTBKLEdBQ0EzRixHQUFBK0YsT0FBQTlKLEdBQUEySixHQUdBQSxFQUtBLFNBQUFJLEVBQUFDLEVBQUFDLEdBSUEsSUFIQSxJQUFBbkosRUFBQSxFQUNBb0osRUFBQUYsRUFBQTdKLE9BRUFXLEVBQUFvSixFQUFBcEosSUFDQXdJLEdBQUEzQixJQUNBcUMsRUFBQWxKLEdBQ0EsY0FDQW1KLEdBQUFYLEdBQUFDLElBQUFVLEVBQUFuSixHQUFBLGVBUUEsU0FBQXFKLEVBQUFILEVBQUFoSyxFQUFBb0ssRUFBQUMsRUFBQUMsR0FPQSxJQU5BLElBQUFwRyxFQUFBcUcsRUFBQWIsRUFBQWMsRUFBQUMsRUFBQUMsRUFDQUMsRUFBQTNLLEVBQUE0Syx5QkFDQUMsS0FDQS9KLEVBQUEsRUFDQW9KLEVBQUFGLEVBQUE3SixPQUVBVyxFQUFBb0osRUFBQXBKLElBR0EsSUFGQW9ELEVBQUE4RixFQUFBbEosS0FFQSxJQUFBb0QsRUFHQSxHQUFBLFdBQUFILEdBQUFELEtBQUFJLEdBSUFILEdBQUErRixNQUFBZSxFQUFBM0csRUFBQVUsVUFBQVYsR0FBQUEsUUFHQSxHQUFBNEcsR0FBQS9GLEtBQUFiLEdBSUEsQ0FVQSxJQVRBcUcsRUFBQUEsR0FBQUksRUFBQWxILFlBQUF6RCxFQUFBc0QsY0FBQSxRQUdBb0csR0FBQXFCLEdBQUF0QyxLQUFBdkUsS0FBQSxHQUFBLEtBQUEsR0FBQUUsY0FDQW9HLEVBQUFRLEdBQUF0QixJQUFBc0IsR0FBQUMsU0FDQVYsRUFBQVcsVUFBQVYsRUFBQSxHQUFBekcsR0FBQW9ILGNBQUFqSCxHQUFBc0csRUFBQSxHQUdBRSxFQUFBRixFQUFBLEdBQ0FFLEtBQ0FILEVBQUFBLEVBQUFhLFVBS0FySCxHQUFBK0YsTUFBQWUsRUFBQU4sRUFBQWMsYUFHQWQsRUFBQUksRUFBQVcsWUFHQUMsWUFBQSxRQXpCQVYsRUFBQXBLLEtBQUFULEVBQUF3TCxlQUFBdEgsSUFrQ0EsSUFIQXlHLEVBQUFZLFlBQUEsR0FFQXpLLEVBQUEsRUFDQW9ELEVBQUEyRyxFQUFBL0osTUFHQSxHQUFBdUosR0FBQXRHLEdBQUEwSCxRQUFBdkgsRUFBQW1HLElBQUEsRUFDQUMsR0FDQUEsRUFBQTdKLEtBQUF5RCxRQWdCQSxHQVhBdUcsRUFBQTFHLEdBQUEwRyxTQUFBdkcsRUFBQTZFLGNBQUE3RSxHQUdBcUcsRUFBQWQsRUFBQWtCLEVBQUFsSCxZQUFBUyxHQUFBLFVBR0F1RyxHQUNBVixFQUFBUSxHQUlBSCxFQUVBLElBREFNLEVBQUEsRUFDQXhHLEVBQUFxRyxFQUFBRyxNQUNBZ0IsR0FBQTNHLEtBQUFiLEVBQUFKLE1BQUEsS0FDQXNHLEVBQUEzSixLQUFBeUQsR0FNQSxPQUFBeUcsRUFxQ0EsU0FBQWdCLElBQ0EsT0FBQSxFQUdBLFNBQUFDLElBQ0EsT0FBQSxFQUtBLFNBQUFDLElBQ0EsSUFDQSxPQUFBcE8sR0FBQXFPLGNBQ0EsTUFBQUMsS0FHQSxTQUFBck8sRUFBQXdHLEVBQUE4SCxFQUFBQyxFQUFBbk4sRUFBQW9OLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQXRJLEVBR0EsR0FBQSxpQkFBQWtJLEVBQUEsQ0FHQSxpQkFBQUMsSUFHQW5OLEVBQUFBLEdBQUFtTixFQUNBQSxPQUFBdkYsR0FFQSxJQUFBNUMsS0FBQWtJLEVBQ0F0TyxFQUFBd0csRUFBQUosRUFBQW1JLEVBQUFuTixFQUFBa04sRUFBQWxJLEdBQUFxSSxHQUVBLE9BQUFqSSxFQXNCQSxHQW5CQSxNQUFBcEYsR0FBQSxNQUFBb04sR0FHQUEsRUFBQUQsRUFDQW5OLEVBQUFtTixPQUFBdkYsR0FDQSxNQUFBd0YsSUFDQSxpQkFBQUQsR0FHQUMsRUFBQXBOLEVBQ0FBLE9BQUE0SCxJQUlBd0YsRUFBQXBOLEVBQ0FBLEVBQUFtTixFQUNBQSxPQUFBdkYsS0FHQSxJQUFBd0YsRUFDQUEsRUFBQU4sT0FDQSxJQUFBTSxFQUNBLE9BQUFoSSxFQWVBLE9BWkEsSUFBQWlJLElBQ0FDLEVBQUFGLEdBQ0FBLEVBQUEsU0FBQXZPLEdBSUEsT0FEQW9HLEtBQUFzSSxJQUFBMU8sR0FDQXlPLEVBQUEzRixNQUFBNUgsS0FBQXlOLGFBSUFDLEtBQUFILEVBQUFHLE9BQUFILEVBQUFHLEtBQUF4SSxHQUFBd0ksU0FFQXJJLEVBQUFxQixLQUFBLFdBQ0F4QixHQUFBcEcsTUFBQTZPLElBQUEzTixLQUFBbU4sRUFBQUUsRUFBQXBOLEVBQUFtTixLQWdxQkEsU0FBQVEsRUFBQXZJLEVBQUF3SSxHQUNBLE9BQUF6SSxFQUFBQyxFQUFBLFVBQ0FELEVBQUEsS0FBQXlJLEVBQUE5SCxTQUFBOEgsRUFBQUEsRUFBQXBCLFdBQUEsTUFFQXZILEdBQUEsU0FBQUcsR0FBQSxJQUFBQSxFQUdBQSxFQUlBLFNBQUF5SSxFQUFBekksR0FFQSxPQURBQSxFQUFBSixNQUFBLE9BQUFJLEVBQUFzRCxhQUFBLFNBQUEsSUFBQXRELEVBQUFKLEtBQ0FJLEVBRUEsU0FBQTBJLEVBQUExSSxHQUNBLElBQUFzQixFQUFBcUgsR0FBQXBFLEtBQUF2RSxFQUFBSixNQVFBLE9BTkEwQixFQUNBdEIsRUFBQUosS0FBQTBCLEVBQUEsR0FFQXRCLEVBQUE0SSxnQkFBQSxRQUdBNUksRUFHQSxTQUFBNkksRUFBQUMsRUFBQUMsR0FDQSxJQUFBbk0sRUFBQW9KLEVBQUFwRyxFQUFBb0osRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFFQSxHQUFBLElBQUFMLEVBQUFySSxTQUFBLENBS0EsR0FBQTBFLEdBQUFpRSxRQUFBUCxLQUNBRSxFQUFBNUQsR0FBQWtFLE9BQUFSLEdBQ0FHLEVBQUE3RCxHQUFBM0IsSUFBQXNGLEVBQUFDLEdBQ0FJLEVBQUFKLEVBQUFJLFFBRUEsUUFDQUgsRUFBQU0sT0FDQU4sRUFBQUcsVUFFQSxJQUFBeEosS0FBQXdKLEVBQ0EsSUFBQXhNLEVBQUEsRUFBQW9KLEVBQUFvRCxFQUFBeEosR0FBQTNELE9BQUFXLEVBQUFvSixFQUFBcEosSUFDQWlELEdBQUFwRyxNQUFBNk8sSUFBQVMsRUFBQW5KLEVBQUF3SixFQUFBeEosR0FBQWhELElBT0E0RyxHQUFBNkYsUUFBQVAsS0FDQUksRUFBQTFGLEdBQUE4RixPQUFBUixHQUNBSyxFQUFBdEosR0FBQTJKLFVBQUFOLEdBRUExRixHQUFBQyxJQUFBc0YsRUFBQUksS0FLQSxTQUFBTSxFQUFBWCxFQUFBQyxHQUNBLElBQUFoSixFQUFBZ0osRUFBQWhKLFNBQUFHLGNBR0EsVUFBQUgsR0FBQTJKLEdBQUE3SSxLQUFBaUksRUFBQWxKLE1BQ0FtSixFQUFBWSxRQUFBYixFQUFBYSxRQUdBLFVBQUE1SixHQUFBLGFBQUFBLElBQ0FnSixFQUFBYSxhQUFBZCxFQUFBYyxjQUlBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE1RCxHQUdBMkQsRUFBQUUsR0FBQTFILFNBQUF3SCxHQUVBLElBQUF0RCxFQUFBM0ksRUFBQW9JLEVBQUFnRSxFQUFBQyxFQUFBakwsRUFDQXRDLEVBQUEsRUFDQW9KLEVBQUE4RCxFQUFBN04sT0FDQW1PLEVBQUFwRSxFQUFBLEVBQ0FyTSxFQUFBb1EsRUFBQSxHQUNBeEosRUFBQVYsR0FBQVUsV0FBQTVHLEdBR0EsR0FBQTRHLEdBQ0F5RixFQUFBLEdBQUEsaUJBQUFyTSxJQUNBMFEsR0FBQUMsWUFBQUMsR0FBQTFKLEtBQUFsSCxHQUNBLE9BQUFtUSxFQUFBekksS0FBQSxTQUFBL0UsR0FDQSxJQUFBUyxFQUFBK00sRUFBQVUsR0FBQWxPLEdBQ0FpRSxJQUNBd0osRUFBQSxHQUFBcFEsRUFBQThHLEtBQUE5RixLQUFBMkIsRUFBQVMsRUFBQXRCLFNBRUFvTyxFQUFBOU0sRUFBQWdOLEVBQUFDLEVBQUE1RCxLQUlBLEdBQUFKLElBQ0FTLEVBQUFSLEVBQUE4RCxFQUFBRCxFQUFBLEdBQUFqRixlQUFBLEVBQUFpRixFQUFBMUQsR0FDQXRJLEVBQUEySSxFQUFBVyxXQUVBLElBQUFYLEVBQUFVLFdBQUFsTCxTQUNBd0ssRUFBQTNJLEdBSUFBLEdBQUFzSSxHQUFBLENBT0EsSUFMQThELEdBREFoRSxFQUFBckcsR0FBQTRLLElBQUFsRixFQUFBa0IsRUFBQSxVQUFBZ0MsSUFDQXhNLE9BS0FXLEVBQUFvSixFQUFBcEosSUFDQXVOLEVBQUExRCxFQUVBN0osSUFBQXdOLElBQ0FELEVBQUF0SyxHQUFBNkssTUFBQVAsR0FBQSxHQUFBLEdBR0FELEdBSUFySyxHQUFBK0YsTUFBQU0sRUFBQVgsRUFBQTRFLEVBQUEsWUFJQUgsRUFBQXZKLEtBQUFxSixFQUFBbE4sR0FBQXVOLEVBQUF2TixHQUdBLEdBQUFzTixFQU9BLElBTkFoTCxFQUFBZ0gsRUFBQUEsRUFBQWpLLE9BQUEsR0FBQTRJLGNBR0FoRixHQUFBNEssSUFBQXZFLEVBQUF3QyxHQUdBOUwsRUFBQSxFQUFBQSxFQUFBc04sRUFBQXROLElBQ0F1TixFQUFBakUsRUFBQXRKLEdBQ0E0SyxHQUFBM0csS0FBQXNKLEVBQUF2SyxNQUFBLE1BQ0F3RixHQUFBa0UsT0FBQWEsRUFBQSxlQUNBdEssR0FBQTBHLFNBQUFySCxFQUFBaUwsS0FFQUEsRUFBQXJCLElBR0FqSixHQUFBOEssVUFDQTlLLEdBQUE4SyxTQUFBUixFQUFBckIsS0FHQTlKLEVBQUFtTCxFQUFBOUMsWUFBQWpFLFFBQUF3SCxHQUFBLElBQUExTCxJQVFBLE9BQUE0SyxFQUdBLFNBQUFlLEVBQUE3SyxFQUFBK0gsRUFBQStDLEdBS0EsSUFKQSxJQUFBWCxFQUNBeEQsRUFBQW9CLEVBQUFsSSxHQUFBaUIsT0FBQWlILEVBQUEvSCxHQUFBQSxFQUNBcEQsRUFBQSxFQUVBLE9BQUF1TixFQUFBeEQsRUFBQS9KLElBQUFBLElBQ0FrTyxHQUFBLElBQUFYLEVBQUF6SixVQUNBYixHQUFBa0wsVUFBQXhGLEVBQUE0RSxJQUdBQSxFQUFBM0ssYUFDQXNMLEdBQUFqTCxHQUFBMEcsU0FBQTRELEVBQUF0RixjQUFBc0YsSUFDQXRFLEVBQUFOLEVBQUE0RSxFQUFBLFdBRUFBLEVBQUEzSyxXQUFBQyxZQUFBMEssSUFJQSxPQUFBbkssRUE2VkEsU0FBQWdMLEVBQUFoTCxFQUFBQyxFQUFBZ0wsR0FDQSxJQUFBN04sRUFBQThOLEVBQUEvTixFQUFBc0ksRUFNQWpCLEVBQUF4RSxFQUFBd0UsTUFxQ0EsT0FuQ0F5RyxFQUFBQSxHQUFBRSxHQUFBbkwsTUFRQSxNQUZBeUYsRUFBQXdGLEVBQUFHLGlCQUFBbkwsSUFBQWdMLEVBQUFoTCxLQUVBSixHQUFBMEcsU0FBQXZHLEVBQUE2RSxjQUFBN0UsS0FDQXlGLEVBQUE1RixHQUFBMkUsTUFBQXhFLEVBQUFDLEtBUUFvSyxHQUFBZ0Isb0JBQUFDLEdBQUF6SyxLQUFBNEUsSUFBQThGLEdBQUExSyxLQUFBWixLQUdBN0MsRUFBQW9ILEVBQUFwSCxNQUNBOE4sRUFBQTFHLEVBQUEwRyxTQUNBL04sRUFBQXFILEVBQUFySCxTQUdBcUgsRUFBQTBHLFNBQUExRyxFQUFBckgsU0FBQXFILEVBQUFwSCxNQUFBcUksRUFDQUEsRUFBQXdGLEVBQUE3TixNQUdBb0gsRUFBQXBILE1BQUFBLEVBQ0FvSCxFQUFBMEcsU0FBQUEsRUFDQTFHLEVBQUFySCxTQUFBQSxTQUlBcUYsSUFBQWlELEVBSUFBLEVBQUEsR0FDQUEsRUFJQSxTQUFBK0YsRUFBQUMsRUFBQUMsR0FHQSxPQUNBckcsSUFBQSxXQUNBLElBQUFvRyxJQVNBLE9BQUE5USxLQUFBMEssSUFBQXFHLEdBQUFuSixNQUFBNUgsS0FBQXlOLGtCQUxBek4sS0FBQTBLLE1BNEJBLFNBQUFzRyxFQUFBMUwsR0FHQSxHQUFBQSxLQUFBMkwsR0FDQSxPQUFBM0wsRUFPQSxJQUhBLElBQUE0TCxFQUFBNUwsRUFBQSxHQUFBNkwsY0FBQTdMLEVBQUF3QyxNQUFBLEdBQ0E3RixFQUFBbVAsR0FBQTlQLE9BRUFXLEtBRUEsSUFEQXFELEVBQUE4TCxHQUFBblAsR0FBQWlQLEtBQ0FELEdBQ0EsT0FBQTNMLEVBT0EsU0FBQStMLEVBQUEvTCxHQUNBLElBQUF3RixFQUFBNUYsR0FBQW9NLFNBQUFoTSxHQUlBLE9BSEF3RixJQUNBQSxFQUFBNUYsR0FBQW9NLFNBQUFoTSxHQUFBMEwsRUFBQTFMLElBQUFBLEdBRUF3RixFQUdBLFNBQUF5RyxFQUFBbE0sRUFBQXJHLEVBQUF3UyxHQUlBLElBQUFDLEVBQUE5SCxHQUFBQyxLQUFBNUssR0FDQSxPQUFBeVMsRUFHQUMsS0FBQUMsSUFBQSxFQUFBRixFQUFBLElBQUFELEdBQUEsS0FBQUMsRUFBQSxJQUFBLE1BQ0F6UyxFQUdBLFNBQUE0UyxFQUFBdk0sRUFBQUMsRUFBQXVNLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTlQLEVBQ0FoRCxFQUFBLEVBV0EsSUFQQWdELEVBREE0UCxLQUFBQyxFQUFBLFNBQUEsV0FDQSxFQUlBLFVBQUF4TSxFQUFBLEVBQUEsRUFHQXJELEVBQUEsRUFBQUEsR0FBQSxFQUdBLFdBQUE0UCxJQUNBNVMsR0FBQWlHLEdBQUFwQyxJQUFBdUMsRUFBQXdNLEVBQUFHLEdBQUEvUCxJQUFBLEVBQUE4UCxJQUdBRCxHQUdBLFlBQUFELElBQ0E1UyxHQUFBaUcsR0FBQXBDLElBQUF1QyxFQUFBLFVBQUEyTSxHQUFBL1AsSUFBQSxFQUFBOFAsSUFJQSxXQUFBRixJQUNBNVMsR0FBQWlHLEdBQUFwQyxJQUFBdUMsRUFBQSxTQUFBMk0sR0FBQS9QLEdBQUEsU0FBQSxFQUFBOFAsTUFLQTlTLEdBQUFpRyxHQUFBcEMsSUFBQXVDLEVBQUEsVUFBQTJNLEdBQUEvUCxJQUFBLEVBQUE4UCxHQUdBLFlBQUFGLElBQ0E1UyxHQUFBaUcsR0FBQXBDLElBQUF1QyxFQUFBLFNBQUEyTSxHQUFBL1AsR0FBQSxTQUFBLEVBQUE4UCxLQUtBLE9BQUE5UyxFQUdBLFNBQUFnVCxFQUFBNU0sRUFBQUMsRUFBQXVNLEdBR0EsSUFBQUssRUFDQUgsRUFBQXZCLEdBQUFuTCxHQUNBcEcsRUFBQW9SLEVBQUFoTCxFQUFBQyxFQUFBeU0sR0FDQUQsRUFBQSxlQUFBNU0sR0FBQXBDLElBQUF1QyxFQUFBLGFBQUEsRUFBQTBNLEdBR0EsT0FBQXBCLEdBQUF6SyxLQUFBakgsR0FDQUEsR0FLQWlULEVBQUFKLElBQ0FwQyxHQUFBeUMscUJBQUFsVCxJQUFBb0csRUFBQXdFLE1BQUF2RSxJQUlBLFNBQUFyRyxJQUNBQSxFQUFBb0csRUFBQSxTQUFBQyxFQUFBLEdBQUE2TCxjQUFBN0wsRUFBQXdDLE1BQUEsTUFJQTdJLEVBQUFtVCxXQUFBblQsSUFBQSxHQUlBMlMsRUFDQXZNLEVBQ0FDLEVBQ0F1TSxJQUFBQyxFQUFBLFNBQUEsV0FDQUksRUFDQUgsR0FFQSxNQWlSQSxTQUFBTSxFQUFBaE4sRUFBQW1CLEVBQUF3QyxFQUFBZSxFQUFBdUksR0FDQSxPQUFBLElBQUFELEVBQUFFLFVBQUFqUyxLQUFBK0UsRUFBQW1CLEVBQUF3QyxFQUFBZSxFQUFBdUksR0EwSEEsU0FBQUUsSUFDQUMsTUFDQSxJQUFBN1QsR0FBQThULFFBQUF2TyxFQUFBd08sc0JBQ0F4TyxFQUFBd08sc0JBQUFILEdBRUFyTyxFQUFBeU8sV0FBQUosRUFBQXROLEdBQUEyTixHQUFBQyxVQUdBNU4sR0FBQTJOLEdBQUFFLFFBS0EsU0FBQUMsSUFJQSxPQUhBN08sRUFBQXlPLFdBQUEsV0FDQUssUUFBQXBMLElBRUFvTCxHQUFBL04sR0FBQWdPLE1BSUEsU0FBQUMsRUFBQWxPLEVBQUFtTyxHQUNBLElBQUFDLEVBQ0FwUixFQUFBLEVBQ0FxUixHQUFBQyxPQUFBdE8sR0FLQSxJQURBbU8sRUFBQUEsRUFBQSxFQUFBLEVBQ0FuUixFQUFBLEVBQUFBLEdBQUEsRUFBQW1SLEVBRUFFLEVBQUEsVUFEQUQsRUFBQXJCLEdBQUEvUCxLQUNBcVIsRUFBQSxVQUFBRCxHQUFBcE8sRUFPQSxPQUpBbU8sSUFDQUUsRUFBQUUsUUFBQUYsRUFBQTdRLE1BQUF3QyxHQUdBcU8sRUFHQSxTQUFBRyxFQUFBelUsRUFBQWdLLEVBQUEwSyxHQUtBLElBSkEsSUFBQXhLLEVBQ0FpRyxHQUFBd0UsRUFBQUMsU0FBQTVLLFFBQUFzRyxPQUFBcUUsRUFBQUMsU0FBQSxNQUNBalMsRUFBQSxFQUNBTCxFQUFBNk4sRUFBQTdOLE9BQ0FLLEVBQUFMLEVBQUFLLElBQ0EsR0FBQXVILEVBQUFpRyxFQUFBeE4sR0FBQW1FLEtBQUE0TixFQUFBMUssRUFBQWhLLEdBR0EsT0FBQWtLLEVBZ0xBLFNBQUEySyxFQUFBQyxFQUFBQyxHQUNBLElBQUFwUyxFQUFBMkQsRUFBQWdOLEVBQUF0VCxFQUFBZ1YsRUFHQSxJQUFBclMsS0FBQW1TLEVBZUEsR0FkQXhPLEVBQUFKLEdBQUErTyxVQUFBdFMsR0FDQTJRLEVBQUF5QixFQUFBek8sR0FDQXRHLEVBQUE4VSxFQUFBblMsR0FDQUosTUFBQUMsUUFBQXhDLEtBQ0FzVCxFQUFBdFQsRUFBQSxHQUNBQSxFQUFBOFUsRUFBQW5TLEdBQUEzQyxFQUFBLElBR0EyQyxJQUFBMkQsSUFDQXdPLEVBQUF4TyxHQUFBdEcsU0FDQThVLEVBQUFuUyxLQUdBcVMsRUFBQTlPLEdBQUFnUCxTQUFBNU8sS0FDQSxXQUFBME8sRUFBQSxDQUNBaFYsRUFBQWdWLEVBQUFHLE9BQUFuVixVQUNBOFUsRUFBQXhPLEdBSUEsSUFBQTNELEtBQUEzQyxFQUNBMkMsS0FBQW1TLElBQ0FBLEVBQUFuUyxHQUFBM0MsRUFBQTJDLEdBQ0FvUyxFQUFBcFMsR0FBQTJRLFFBSUF5QixFQUFBek8sR0FBQWdOLEVBS0EsU0FBQXFCLEVBQUF0TyxFQUFBK08sRUFBQTVOLEdBQ0EsSUFBQTZOLEVBQ0FDLEVBQ0EzUyxFQUFBLEVBQ0FMLEVBQUFxUyxFQUFBWSxXQUFBalQsT0FDQWtULEVBQUF0UCxHQUFBdVAsV0FBQUMsT0FBQSxrQkFHQTNCLEVBQUExTixPQUVBME4sRUFBQSxXQUNBLEdBQUF1QixFQUNBLE9BQUEsRUFZQSxJQVZBLElBQUFLLEVBQUExQixJQUFBRCxJQUNBNEIsRUFBQWxELEtBQUFDLElBQUEsRUFBQStCLEVBQUFtQixVQUFBbkIsRUFBQW9CLFNBQUFILEdBS0FJLEVBQUEsR0FEQUgsRUFBQWxCLEVBQUFvQixVQUFBLEdBRUFuVCxFQUFBLEVBQ0FMLEVBQUFvUyxFQUFBc0IsT0FBQTFULE9BRUFLLEVBQUFMLEVBQUFLLElBQ0ErUixFQUFBc0IsT0FBQXJULEdBQUFzVCxJQUFBRixHQU1BLE9BSEFQLEVBQUFVLFdBQUE3UCxHQUFBcU8sRUFBQXFCLEVBQUFILElBR0FHLEVBQUEsR0FBQXpULEVBQ0FzVCxHQUlBdFQsR0FDQWtULEVBQUFVLFdBQUE3UCxHQUFBcU8sRUFBQSxFQUFBLElBSUFjLEVBQUFXLFlBQUE5UCxHQUFBcU8sS0FDQSxJQUVBQSxFQUFBYyxFQUFBaE4sU0FDQW5DLEtBQUFBLEVBQ0F5TyxNQUFBNU8sR0FBQTJKLFVBQUF1RixHQUNBZ0IsS0FBQWxRLEdBQUEySixRQUFBLEdBQ0FrRixpQkFDQXpCLE9BQUFwTixHQUFBb04sT0FBQWxHLFVBQ0E1RixHQUNBNk8sbUJBQUFqQixFQUNBa0IsZ0JBQUE5TyxFQUNBcU8sVUFBQTVCLElBQUFELElBQ0E4QixTQUFBdE8sRUFBQXNPLFNBQ0FFLFVBQ0F2QixZQUFBLFNBQUF6SyxFQUFBZSxHQUNBLElBQUFiLEVBQUFoRSxHQUFBbU4sTUFBQWhOLEVBQUFxTyxFQUFBMEIsS0FBQXBNLEVBQUFlLEVBQ0EySixFQUFBMEIsS0FBQXJCLGNBQUEvSyxJQUFBMEssRUFBQTBCLEtBQUE5QyxRQUVBLE9BREFvQixFQUFBc0IsT0FBQXBULEtBQUFzSCxHQUNBQSxHQUVBcU0sS0FBQSxTQUFBQyxHQUNBLElBQUE3VCxFQUFBLEVBSUFMLEVBQUFrVSxFQUFBOUIsRUFBQXNCLE9BQUExVCxPQUFBLEVBQ0EsR0FBQWdULEVBQ0EsT0FBQXRVLEtBR0EsSUFEQXNVLEdBQUEsRUFDQTNTLEVBQUFMLEVBQUFLLElBQ0ErUixFQUFBc0IsT0FBQXJULEdBQUFzVCxJQUFBLEdBVUEsT0FOQU8sR0FDQWhCLEVBQUFVLFdBQUE3UCxHQUFBcU8sRUFBQSxFQUFBLElBQ0FjLEVBQUFXLFlBQUE5UCxHQUFBcU8sRUFBQThCLEtBRUFoQixFQUFBaUIsV0FBQXBRLEdBQUFxTyxFQUFBOEIsSUFFQXhWLFFBR0E4VCxFQUFBSixFQUFBSSxNQUlBLElBRkFELEVBQUFDLEVBQUFKLEVBQUEwQixLQUFBckIsZUFFQXBTLEVBQUFMLEVBQUFLLElBRUEsR0FEQTBTLEVBQUFWLEVBQUFZLFdBQUE1UyxHQUFBbUUsS0FBQTROLEVBQUFyTyxFQUFBeU8sRUFBQUosRUFBQTBCLE1BTUEsT0FKQWxRLEdBQUFVLFdBQUF5TyxFQUFBa0IsUUFDQXJRLEdBQUF3USxZQUFBaEMsRUFBQXJPLEtBQUFxTyxFQUFBMEIsS0FBQU8sT0FBQUosS0FDQXJRLEdBQUEwUSxNQUFBdkIsRUFBQWtCLEtBQUFsQixJQUVBQSxFQXlCQSxPQXJCQW5QLEdBQUE0SyxJQUFBZ0UsRUFBQUwsRUFBQUMsR0FFQXhPLEdBQUFVLFdBQUE4TixFQUFBMEIsS0FBQXRMLFFBQ0E0SixFQUFBMEIsS0FBQXRMLE1BQUFoRSxLQUFBVCxFQUFBcU8sR0FJQUEsRUFDQW1DLFNBQUFuQyxFQUFBMEIsS0FBQVMsVUFDQXBPLEtBQUFpTSxFQUFBMEIsS0FBQTNOLEtBQUFpTSxFQUFBMEIsS0FBQVUsVUFDQXBPLEtBQUFnTSxFQUFBMEIsS0FBQTFOLE1BQ0FnTixPQUFBaEIsRUFBQTBCLEtBQUFWLFFBRUF4UCxHQUFBMk4sR0FBQWtELE1BQ0E3USxHQUFBMkosT0FBQWtFLEdBQ0ExTixLQUFBQSxFQUNBMlEsS0FBQXRDLEVBQ0FpQyxNQUFBakMsRUFBQTBCLEtBQUFPLFNBSUFqQyxFQWlsQkEsU0FBQXVDLEVBQUFqWCxHQUVBLE9BREFBLEVBQUEySCxNQUFBQyxTQUNBc1AsS0FBQSxLQUlBLFNBQUFDLEVBQUE5USxHQUNBLE9BQUFBLEVBQUFzRCxjQUFBdEQsRUFBQXNELGFBQUEsVUFBQSxHQSttQkEsU0FBQXlOLEVBQUFDLEVBQUFyUixFQUFBc1IsRUFBQTNJLEdBQ0EsSUFBQXJJLEVBRUEsR0FBQS9ELE1BQUFDLFFBQUF3RCxHQUdBRSxHQUFBd0IsS0FBQTFCLEVBQUEsU0FBQS9DLEVBQUErRSxHQUNBc1AsR0FBQUMsR0FBQXJRLEtBQUFtUSxHQUdBMUksRUFBQTBJLEVBQUFyUCxHQUtBb1AsRUFDQUMsRUFBQSxLQUFBLGlCQUFBclAsR0FBQSxNQUFBQSxFQUFBL0UsRUFBQSxJQUFBLElBQ0ErRSxFQUNBc1AsRUFDQTNJLFVBS0EsR0FBQTJJLEdBQUEsV0FBQXBSLEdBQUFELEtBQUFELEdBVUEySSxFQUFBMEksRUFBQXJSLFFBUEEsSUFBQU0sS0FBQU4sRUFDQW9SLEVBQUFDLEVBQUEsSUFBQS9RLEVBQUEsSUFBQU4sRUFBQU0sR0FBQWdSLEVBQUEzSSxHQTBIQSxTQUFBNkksRUFBQUMsR0FHQSxPQUFBLFNBQUFDLEVBQUFDLEdBRUEsaUJBQUFELElBQ0FDLEVBQUFELEVBQ0FBLEVBQUEsS0FHQSxJQUFBRSxFQUNBM1UsRUFBQSxFQUNBNFUsRUFBQUgsRUFBQW5SLGNBQUFvQixNQUFBQyxRQUVBLEdBQUExQixHQUFBVSxXQUFBK1EsR0FHQSxLQUFBQyxFQUFBQyxFQUFBNVUsTUFHQSxNQUFBMlUsRUFBQSxJQUNBQSxFQUFBQSxFQUFBOU8sTUFBQSxJQUFBLEtBQ0EyTyxFQUFBRyxHQUFBSCxFQUFBRyxRQUFBRSxRQUFBSCxLQUlBRixFQUFBRyxHQUFBSCxFQUFBRyxRQUFBaFYsS0FBQStVLElBUUEsU0FBQUksRUFBQU4sRUFBQWpRLEVBQUE4TyxFQUFBMEIsR0FLQSxTQUFBQyxFQUFBTCxHQUNBLElBQUFNLEVBY0EsT0FiQUMsRUFBQVAsSUFBQSxFQUNBMVIsR0FBQXdCLEtBQUErUCxFQUFBRyxPQUFBLFNBQUEvUCxFQUFBdVEsR0FDQSxJQUFBQyxFQUFBRCxFQUFBNVEsRUFBQThPLEVBQUEwQixHQUNBLE1BQUEsaUJBQUFLLEdBQ0FDLEdBQUFILEVBQUFFLEdBS0FDLElBQ0FKLEVBQUFHLFFBREEsR0FIQTdRLEVBQUFxUSxVQUFBQyxRQUFBTyxHQUNBSixFQUFBSSxJQUNBLEtBS0FILEVBbEJBLElBQUFDLEtBQ0FHLEVBQUFiLElBQUFjLEdBb0JBLE9BQUFOLEVBQUF6USxFQUFBcVEsVUFBQSxNQUFBTSxFQUFBLE1BQUFGLEVBQUEsS0FNQSxTQUFBTyxFQUFBQyxFQUFBdEosR0FDQSxJQUFBM0YsRUFBQWtQLEVBQ0FDLEVBQUF6UyxHQUFBMFMsYUFBQUQsZ0JBRUEsSUFBQW5QLEtBQUEyRixPQUNBdEcsSUFBQXNHLEVBQUEzRixNQUNBbVAsRUFBQW5QLEdBQUFpUCxFQUFBQyxJQUFBQSxPQUFBbFAsR0FBQTJGLEVBQUEzRixJQU9BLE9BSkFrUCxHQUNBeFMsR0FBQTJKLFFBQUEsRUFBQTRJLEVBQUFDLEdBR0FELEVBT0EsU0FBQUksRUFBQUMsRUFBQWQsRUFBQWUsR0FPQSxJQUxBLElBQUFDLEVBQUEvUyxFQUFBZ1QsRUFBQUMsRUFDQUMsRUFBQUwsRUFBQUssU0FDQXRCLEVBQUFpQixFQUFBakIsVUFHQSxNQUFBQSxFQUFBLElBQ0FBLEVBQUF1QixhQUNBdlEsSUFBQW1RLElBQ0FBLEVBQUFGLEVBQUFPLFVBQUFyQixFQUFBc0Isa0JBQUEsaUJBS0EsR0FBQU4sRUFDQSxJQUFBL1MsS0FBQWtULEVBQ0EsR0FBQUEsRUFBQWxULElBQUFrVCxFQUFBbFQsR0FBQWlCLEtBQUE4UixHQUFBLENBQ0FuQixFQUFBQyxRQUFBN1IsR0FDQSxNQU1BLEdBQUE0UixFQUFBLEtBQUFrQixFQUNBRSxFQUFBcEIsRUFBQSxPQUNBLENBR0EsSUFBQTVSLEtBQUE4UyxFQUFBLENBQ0EsSUFBQWxCLEVBQUEsSUFBQWlCLEVBQUFTLFdBQUF0VCxFQUFBLElBQUE0UixFQUFBLElBQUEsQ0FDQW9CLEVBQUFoVCxFQUNBLE1BRUFpVCxJQUNBQSxFQUFBalQsR0FLQWdULEVBQUFBLEdBQUFDLEVBTUEsR0FBQUQsRUFJQSxPQUhBQSxJQUFBcEIsRUFBQSxJQUNBQSxFQUFBQyxRQUFBbUIsR0FFQUYsRUFBQUUsR0FPQSxTQUFBTyxFQUFBVixFQUFBVyxFQUFBekIsRUFBQTBCLEdBQ0EsSUFBQUMsRUFBQUMsRUFBQUMsRUFBQW5OLEVBQUFySSxFQUNBa1YsS0FHQTFCLEVBQUFpQixFQUFBakIsVUFBQS9PLFFBR0EsR0FBQStPLEVBQUEsR0FDQSxJQUFBZ0MsS0FBQWYsRUFBQVMsV0FDQUEsRUFBQU0sRUFBQXRULGVBQUF1UyxFQUFBUyxXQUFBTSxHQU9BLElBSEFELEVBQUEvQixFQUFBdUIsUUFHQVEsR0FjQSxHQVpBZCxFQUFBZ0IsZUFBQUYsS0FDQTVCLEVBQUFjLEVBQUFnQixlQUFBRixJQUFBSCxJQUlBcFYsR0FBQXFWLEdBQUFaLEVBQUFpQixhQUNBTixFQUFBWCxFQUFBaUIsV0FBQU4sRUFBQVgsRUFBQWxCLFdBR0F2VCxFQUFBdVYsRUFDQUEsRUFBQS9CLEVBQUF1QixRQUtBLEdBQUEsTUFBQVEsRUFFQUEsRUFBQXZWLE9BR0EsR0FBQSxNQUFBQSxHQUFBQSxJQUFBdVYsRUFBQSxDQU1BLEtBSEFDLEVBQUFOLEVBQUFsVixFQUFBLElBQUF1VixJQUFBTCxFQUFBLEtBQUFLLElBSUEsSUFBQUQsS0FBQUosRUFJQSxJQURBN00sRUFBQWlOLEVBQUFLLE1BQUEsTUFDQSxLQUFBSixJQUdBQyxFQUFBTixFQUFBbFYsRUFBQSxJQUFBcUksRUFBQSxLQUNBNk0sRUFBQSxLQUFBN00sRUFBQSxLQUNBLEVBR0EsSUFBQW1OLEVBQ0FBLEVBQUFOLEVBQUFJLElBR0EsSUFBQUosRUFBQUksS0FDQUMsRUFBQWxOLEVBQUEsR0FDQW1MLEVBQUFDLFFBQUFwTCxFQUFBLEtBRUEsTUFPQSxJQUFBLElBQUFtTixFQUdBLEdBQUFBLEdBQUFmLEVBQUFtQixPQUNBUixFQUFBSSxFQUFBSixRQUVBLElBQ0FBLEVBQUFJLEVBQUFKLEdBQ0EsTUFBQTdQLEdBQ0EsT0FDQXNRLE1BQUEsY0FDQTNaLE1BQUFzWixFQUFBalEsRUFBQSxzQkFBQXZGLEVBQUEsT0FBQXVWLElBU0EsT0FBQU0sTUFBQSxVQUFBalosS0FBQXdZLEdBL2dSQSxJQUFBVSxNQUVBdmEsR0FBQXVGLEVBQUF2RixTQUVBd2EsR0FBQUMsT0FBQUMsZUFFQXhSLEdBQUFxUixHQUFBclIsTUFFQXdILEdBQUE2SixHQUFBN0osT0FFQTFOLEdBQUF1WCxHQUFBdlgsS0FFQW9FLEdBQUFtVCxHQUFBblQsUUFFQXVULE1BRUFDLEdBQUFELEdBQUFDLFNBRUFDLEdBQUFGLEdBQUFHLGVBRUFDLEdBQUFGLEdBQUFELFNBRUFJLEdBQUFELEdBQUE3VCxLQUFBdVQsUUFFQTNKLE1Bc0JBeEssR0FBQSxTQUFBa0ksRUFBQWpNLEdBSUEsT0FBQSxJQUFBK0QsR0FBQW1JLEdBQUEvTSxLQUFBOE0sRUFBQWpNLElBS0EwWSxHQUFBLHFDQUdBQyxHQUFBLFFBQ0FDLEdBQUEsWUFHQUMsR0FBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBQUEvSSxlQUdBak0sR0FBQW1JLEdBQUFuSSxHQUFBcU4sV0FHQTRILE9BMUJBLFFBNEJBQyxZQUFBbFYsR0FHQTVELE9BQUEsRUFFQStZLFFBQUEsV0FDQSxPQUFBdlMsR0FBQWhDLEtBQUE5RixPQUtBMEssSUFBQSxTQUFBNFAsR0FHQSxPQUFBLE1BQUFBLEVBQ0F4UyxHQUFBaEMsS0FBQTlGLE1BSUFzYSxFQUFBLEVBQUF0YSxLQUFBc2EsRUFBQXRhLEtBQUFzQixRQUFBdEIsS0FBQXNhLElBS0FDLFVBQUEsU0FBQXBQLEdBR0EsSUFBQUwsRUFBQTVGLEdBQUErRixNQUFBakwsS0FBQW9hLGNBQUFqUCxHQU1BLE9BSEFMLEVBQUEwUCxXQUFBeGEsS0FHQThLLEdBSUFwRSxLQUFBLFNBQUEySSxHQUNBLE9BQUFuSyxHQUFBd0IsS0FBQTFHLEtBQUFxUCxJQUdBUyxJQUFBLFNBQUFULEdBQ0EsT0FBQXJQLEtBQUF1YSxVQUFBclYsR0FBQTRLLElBQUE5UCxLQUFBLFNBQUFxRixFQUFBcEQsR0FDQSxPQUFBb04sRUFBQXZKLEtBQUFULEVBQUFwRCxFQUFBb0QsT0FJQXlDLE1BQUEsV0FDQSxPQUFBOUgsS0FBQXVhLFVBQUF6UyxHQUFBRixNQUFBNUgsS0FBQXlOLGFBR0F0SyxNQUFBLFdBQ0EsT0FBQW5ELEtBQUE2UCxHQUFBLElBR0F2TSxLQUFBLFdBQ0EsT0FBQXRELEtBQUE2UCxJQUFBLElBR0FBLEdBQUEsU0FBQTVOLEdBQ0EsSUFBQXdZLEVBQUF6YSxLQUFBc0IsT0FDQXVLLEdBQUE1SixHQUFBQSxFQUFBLEVBQUF3WSxFQUFBLEdBQ0EsT0FBQXphLEtBQUF1YSxVQUFBMU8sR0FBQSxHQUFBQSxFQUFBNE8sR0FBQXphLEtBQUE2TCxTQUdBOUIsSUFBQSxXQUNBLE9BQUEvSixLQUFBd2EsWUFBQXhhLEtBQUFvYSxlQUtBeFksS0FBQUEsR0FDQThZLEtBQUF2QixHQUFBdUIsS0FDQXhZLE9BQUFpWCxHQUFBalgsUUFHQWdELEdBQUEySixPQUFBM0osR0FBQW1JLEdBQUF3QixPQUFBLFdBQ0EsSUFBQXJJLEVBQUFsQixFQUFBNkksRUFBQXdNLEVBQUFDLEVBQUE3SyxFQUNBMEgsRUFBQWhLLFVBQUEsT0FDQXhMLEVBQUEsRUFDQVgsRUFBQW1NLFVBQUFuTSxPQUNBb1csR0FBQSxFQXNCQSxJQW5CQSxrQkFBQUQsSUFDQUMsRUFBQUQsRUFHQUEsRUFBQWhLLFVBQUF4TCxPQUNBQSxLQUlBLGlCQUFBd1YsR0FBQXZTLEdBQUFVLFdBQUE2UixLQUNBQSxNQUlBeFYsSUFBQVgsSUFDQW1XLEVBQUF6WCxLQUNBaUMsS0FHQUEsRUFBQVgsRUFBQVcsSUFHQSxHQUFBLE9BQUF1RSxFQUFBaUgsVUFBQXhMLElBR0EsSUFBQXFELEtBQUFrQixFQUNBMkgsRUFBQXNKLEVBQUFuUyxHQUlBbVMsS0FIQWtELEVBQUFuVSxFQUFBbEIsTUFRQW9TLEdBQUFpRCxJQUFBelYsR0FBQTJWLGNBQUFGLEtBQ0FDLEVBQUFyWixNQUFBQyxRQUFBbVosTUFFQUMsR0FDQUEsR0FBQSxFQUNBN0ssRUFBQTVCLEdBQUE1TSxNQUFBQyxRQUFBMk0sR0FBQUEsTUFHQTRCLEVBQUE1QixHQUFBakosR0FBQTJWLGNBQUExTSxHQUFBQSxLQUlBc0osRUFBQW5TLEdBQUFKLEdBQUEySixPQUFBNkksRUFBQTNILEVBQUE0SyxTQUdBOVMsSUFBQThTLElBQ0FsRCxFQUFBblMsR0FBQXFWLElBT0EsT0FBQWxELEdBR0F2UyxHQUFBMkosUUFHQTFHLFFBQUEsVUFoTEEsUUFnTEF1SixLQUFBb0osVUFBQXJTLFFBQUEsTUFBQSxJQUdBc1MsU0FBQSxFQUVBeGIsTUFBQSxTQUFBeWIsR0FDQSxNQUFBLElBQUE5VyxNQUFBOFcsSUFHQUMsS0FBQSxhQUVBclYsV0FBQSxTQUFBWixHQUNBLE1BQUEsYUFBQUUsR0FBQUQsS0FBQUQsSUFHQUcsU0FBQSxTQUFBSCxHQUNBLE9BQUEsTUFBQUEsR0FBQUEsSUFBQUEsRUFBQWIsUUFHQStXLFVBQUEsU0FBQWxXLEdBS0EsSUFBQUMsRUFBQUMsR0FBQUQsS0FBQUQsR0FDQSxPQUFBLFdBQUFDLEdBQUEsV0FBQUEsS0FLQWtXLE1BQUFuVyxFQUFBb04sV0FBQXBOLEtBR0E2VixjQUFBLFNBQUE3VixHQUNBLElBQUFvVyxFQUFBQyxFQUlBLFNBQUFyVyxHQUFBLG9CQUFBd1UsR0FBQTFULEtBQUFkLFFBSUFvVyxFQUFBaEMsR0FBQXBVLEtBU0EsbUJBREFxVyxFQUFBNUIsR0FBQTNULEtBQUFzVixFQUFBLGdCQUFBQSxFQUFBaEIsY0FDQVQsR0FBQTdULEtBQUF1VixLQUFBekIsS0FHQTBCLGNBQUEsU0FBQXRXLEdBSUEsSUFBQU0sRUFFQSxJQUFBQSxLQUFBTixFQUNBLE9BQUEsRUFFQSxPQUFBLEdBR0FDLEtBQUEsU0FBQUQsR0FDQSxPQUFBLE1BQUFBLEVBQ0FBLEVBQUEsR0FJQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFDQXVVLEdBQUFDLEdBQUExVCxLQUFBZCxLQUFBLGdCQUNBQSxHQUlBdVcsV0FBQSxTQUFBalgsR0FDQUQsRUFBQUMsSUFNQTJQLFVBQUEsU0FBQXVILEdBQ0EsT0FBQUEsRUFBQS9TLFFBQUFxUixHQUFBLE9BQUFyUixRQUFBc1IsR0FBQUMsS0FHQXRULEtBQUEsU0FBQTFCLEVBQUFxSyxHQUNBLElBQUEvTixFQUFBVyxFQUFBLEVBRUEsR0FBQThDLEVBQUFDLEdBRUEsSUFEQTFELEVBQUEwRCxFQUFBMUQsT0FDQVcsRUFBQVgsSUFDQSxJQUFBK04sRUFBQXZKLEtBQUFkLEVBQUEvQyxHQUFBQSxFQUFBK0MsRUFBQS9DLElBREFBLFVBTUEsSUFBQUEsS0FBQStDLEVBQ0EsSUFBQSxJQUFBcUssRUFBQXZKLEtBQUFkLEVBQUEvQyxHQUFBQSxFQUFBK0MsRUFBQS9DLElBQ0EsTUFLQSxPQUFBK0MsR0FJQXlXLEtBQUEsU0FBQS9XLEdBQ0EsT0FBQSxNQUFBQSxFQUNBLElBQ0FBLEVBQUEsSUFBQStELFFBQUFvUixHQUFBLEtBSUE2QixVQUFBLFNBQUF2QyxFQUFBd0MsR0FDQSxJQUFBN1EsRUFBQTZRLE1BYUEsT0FYQSxNQUFBeEMsSUFDQXBVLEVBQUFzVSxPQUFBRixJQUNBalUsR0FBQStGLE1BQUFILEVBQ0EsaUJBQUFxTyxHQUNBQSxHQUFBQSxHQUdBdlgsR0FBQWtFLEtBQUFnRixFQUFBcU8sSUFJQXJPLEdBR0E4QixRQUFBLFNBQUF2SCxFQUFBOFQsRUFBQWxYLEdBQ0EsT0FBQSxNQUFBa1gsR0FBQSxFQUFBblQsR0FBQUYsS0FBQXFULEVBQUE5VCxFQUFBcEQsSUFLQWdKLE1BQUEsU0FBQTlILEVBQUF5WSxHQUtBLElBSkEsSUFBQW5CLEdBQUFtQixFQUFBdGEsT0FDQXVLLEVBQUEsRUFDQTVKLEVBQUFrQixFQUFBN0IsT0FFQXVLLEVBQUE0TyxFQUFBNU8sSUFDQTFJLEVBQUFsQixLQUFBMlosRUFBQS9QLEdBS0EsT0FGQTFJLEVBQUE3QixPQUFBVyxFQUVBa0IsR0FHQTBDLEtBQUEsU0FBQXNGLEVBQUFrRSxFQUFBd00sR0FTQSxJQVJBLElBQ0FwSyxLQUNBeFAsRUFBQSxFQUNBWCxFQUFBNkosRUFBQTdKLE9BQ0F3YSxHQUFBRCxFQUlBNVosRUFBQVgsRUFBQVcsS0FDQW9OLEVBQUFsRSxFQUFBbEosR0FBQUEsS0FDQTZaLEdBQ0FySyxFQUFBN1AsS0FBQXVKLEVBQUFsSixJQUlBLE9BQUF3UCxHQUlBM0IsSUFBQSxTQUFBM0UsRUFBQWtFLEVBQUEwTSxHQUNBLElBQUF6YSxFQUFBdEMsRUFDQWlELEVBQUEsRUFDQTZJLEtBR0EsR0FBQS9GLEVBQUFvRyxHQUVBLElBREE3SixFQUFBNkosRUFBQTdKLE9BQ0FXLEVBQUFYLEVBQUFXLElBR0EsT0FGQWpELEVBQUFxUSxFQUFBbEUsRUFBQWxKLEdBQUFBLEVBQUE4WixLQUdBalIsRUFBQWxKLEtBQUE1QyxRQU1BLElBQUFpRCxLQUFBa0osRUFHQSxPQUZBbk0sRUFBQXFRLEVBQUFsRSxFQUFBbEosR0FBQUEsRUFBQThaLEtBR0FqUixFQUFBbEosS0FBQTVDLEdBTUEsT0FBQXNRLEdBQUExSCxTQUFBa0QsSUFJQTRDLEtBQUEsRUFJQWtJLE1BQUEsU0FBQXZJLEVBQUFsTSxHQUNBLElBQUF1SyxFQUFBMEQsRUFBQXdHLEVBVUEsR0FSQSxpQkFBQXpVLElBQ0F1SyxFQUFBMkIsRUFBQWxNLEdBQ0FBLEVBQUFrTSxFQUNBQSxFQUFBM0IsR0FLQXhHLEdBQUFVLFdBQUF5SCxHQWFBLE9BUkErQixFQUFBdEgsR0FBQWhDLEtBQUEySCxVQUFBLEdBQ0FtSSxFQUFBLFdBQ0EsT0FBQXZJLEVBQUF6RixNQUFBekcsR0FBQW5CLEtBQUFvUCxFQUFBRSxPQUFBeEgsR0FBQWhDLEtBQUEySCxjQUlBbUksRUFBQWxJLEtBQUFMLEVBQUFLLEtBQUFMLEVBQUFLLE1BQUF4SSxHQUFBd0ksT0FFQWtJLEdBR0ExQyxJQUFBOEksS0FBQTlJLElBSUF4RCxRQUFBQSxLQUdBLG1CQUFBdU0sU0FDQS9XLEdBQUFtSSxHQUFBNE8sT0FBQUMsVUFBQS9DLEdBQUE4QyxPQUFBQyxXQUlBaFgsR0FBQXdCLEtBQUEsdUVBQUFzUyxNQUFBLEtBQ0EsU0FBQS9XLEVBQUFxRCxHQUNBaVUsR0FBQSxXQUFBalUsRUFBQSxLQUFBQSxFQUFBQyxnQkFtQkEsSUFBQTRXLEdBV0EsU0FBQWhZLEdBNk1BLFNBQUFnWSxFQUFBL08sRUFBQWpNLEVBQUF3YSxFQUFBUyxHQUNBLElBQUFDLEVBQUFwYSxFQUFBb0QsRUFBQWlYLEVBQUEzVixFQUFBNFYsRUFBQUMsRUFDQUMsRUFBQXRiLEdBQUFBLEVBQUErSSxjQUdBbkUsRUFBQTVFLEVBQUFBLEVBQUE0RSxTQUFBLEVBS0EsR0FIQTRWLEVBQUFBLE1BR0EsaUJBQUF2TyxJQUFBQSxHQUNBLElBQUFySCxHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFFQSxPQUFBNFYsRUFJQSxJQUFBUyxLQUVBamIsRUFBQUEsRUFBQStJLGVBQUEvSSxFQUFBdWIsS0FBQTlkLEdBQ0ErZCxFQUFBeGIsR0FFQUEsRUFBQUEsR0FBQXZDLEVBRUFnZSxHQUFBLENBSUEsR0FBQSxLQUFBN1csSUFBQVksRUFBQWtXLEdBQUFqVCxLQUFBd0QsSUFHQSxHQUFBaVAsRUFBQTFWLEVBQUEsSUFHQSxHQUFBLElBQUFaLEVBQUEsQ0FDQSxLQUFBVixFQUFBbEUsRUFBQTJiLGVBQUFULElBVUEsT0FBQVYsRUFMQSxHQUFBdFcsRUFBQXZGLEtBQUF1YyxFQUVBLE9BREFWLEVBQUEvWixLQUFBeUQsR0FDQXNXLE9BWUEsR0FBQWMsSUFBQXBYLEVBQUFvWCxFQUFBSyxlQUFBVCxLQUNBelEsRUFBQXpLLEVBQUFrRSxJQUNBQSxFQUFBdkYsS0FBQXVjLEVBR0EsT0FEQVYsRUFBQS9aLEtBQUF5RCxHQUNBc1csTUFLQSxDQUFBLEdBQUFoVixFQUFBLEdBRUEsT0FEQS9FLEVBQUFnRyxNQUFBK1QsRUFBQXhhLEVBQUE0SixxQkFBQXFDLElBQ0F1TyxFQUdBLElBQUFVLEVBQUExVixFQUFBLEtBQUErSSxFQUFBcU4sd0JBQ0E1YixFQUFBNGIsdUJBR0EsT0FEQW5iLEVBQUFnRyxNQUFBK1QsRUFBQXhhLEVBQUE0Yix1QkFBQVYsSUFDQVYsRUFLQSxHQUFBak0sRUFBQXNOLE1BQ0FDLEVBQUE3UCxFQUFBLFFBQ0E4UCxJQUFBQSxFQUFBaFgsS0FBQWtILElBQUEsQ0FFQSxHQUFBLElBQUFySCxFQUNBMFcsRUFBQXRiLEVBQ0FxYixFQUFBcFAsT0FNQSxHQUFBLFdBQUFqTSxFQUFBaUUsU0FBQUcsY0FBQSxDQVlBLEtBVEErVyxFQUFBbmIsRUFBQXdILGFBQUEsT0FDQTJULEVBQUFBLEVBQUE3VCxRQUFBMFUsR0FBQUMsSUFFQWpjLEVBQUFrYyxhQUFBLEtBQUFmLEVBQUFuVSxHQUtBbEcsR0FEQXNhLEVBQUFlLEVBQUFsUSxJQUNBOUwsT0FDQVcsS0FDQXNhLEVBQUF0YSxHQUFBLElBQUFxYSxFQUFBLElBQUFpQixFQUFBaEIsRUFBQXRhLElBRUF1YSxFQUFBRCxFQUFBckcsS0FBQSxLQUdBdUcsRUFBQWUsR0FBQXRYLEtBQUFrSCxJQUFBcVEsRUFBQXRjLEVBQUEwRCxhQUNBMUQsRUFHQSxHQUFBcWIsRUFDQSxJQUlBLE9BSEE1YSxFQUFBZ0csTUFBQStULEVBQ0FjLEVBQUF6UixpQkFBQXdSLElBRUFiLEVBQ0EsTUFBQStCLElBQ0EsUUFDQXBCLElBQUFuVSxHQUNBaEgsRUFBQThNLGdCQUFBLFFBU0EsT0FBQTBQLEVBQUF2USxFQUFBM0UsUUFBQW9SLEdBQUEsTUFBQTFZLEVBQUF3YSxFQUFBUyxHQVNBLFNBQUF3QixJQUdBLFNBQUFDLEVBQUFyVixFQUFBeEosR0FNQSxPQUpBOGUsRUFBQWxjLEtBQUE0RyxFQUFBLEtBQUF1VixFQUFBQyxvQkFFQUgsRUFBQUMsRUFBQTFGLFNBRUF5RixFQUFBclYsRUFBQSxLQUFBeEosRUFSQSxJQUFBOGUsS0FVQSxPQUFBRCxFQU9BLFNBQUFJLEVBQUE1USxHQUVBLE9BREFBLEVBQUFsRixJQUFBLEVBQ0FrRixFQU9BLFNBQUE2USxFQUFBN1EsR0FDQSxJQUFBOFEsRUFBQXZmLEVBQUE2RixjQUFBLFlBRUEsSUFDQSxRQUFBNEksRUFBQThRLEdBQ0EsTUFBQXZWLEdBQ0EsT0FBQSxFQUNBLFFBRUF1VixFQUFBdFosWUFDQXNaLEVBQUF0WixXQUFBQyxZQUFBcVosR0FHQUEsRUFBQSxNQVNBLFNBQUFDLEVBQUE5SyxFQUFBK0ssR0FJQSxJQUhBLElBQUFsRixFQUFBN0YsRUFBQTBGLE1BQUEsS0FDQS9XLEVBQUFrWCxFQUFBN1gsT0FFQVcsS0FDQThiLEVBQUFPLFdBQUFuRixFQUFBbFgsSUFBQW9jLEVBVUEsU0FBQUUsRUFBQUMsRUFBQUMsR0FDQSxJQUFBcFksRUFBQW9ZLEdBQUFELEVBQ0FFLEVBQUFyWSxHQUFBLElBQUFtWSxFQUFBelksVUFBQSxJQUFBMFksRUFBQTFZLFVBQ0F5WSxFQUFBRyxZQUFBRixFQUFBRSxZQUdBLEdBQUFELEVBQ0EsT0FBQUEsRUFJQSxHQUFBclksRUFDQSxLQUFBQSxFQUFBQSxFQUFBdVksYUFDQSxHQUFBdlksSUFBQW9ZLEVBQ0EsT0FBQSxFQUtBLE9BQUFELEVBQUEsR0FBQSxFQTZCQSxTQUFBSyxFQUFBQyxHQUdBLE9BQUEsU0FBQXpaLEdBS0EsTUFBQSxTQUFBQSxFQVNBQSxFQUFBUixhQUFBLElBQUFRLEVBQUF5WixTQUdBLFVBQUF6WixFQUNBLFVBQUFBLEVBQUFSLFdBQ0FRLEVBQUFSLFdBQUFpYSxXQUFBQSxFQUVBelosRUFBQXlaLFdBQUFBLEVBTUF6WixFQUFBMFosYUFBQUQsR0FJQXpaLEVBQUEwWixjQUFBRCxHQUNBRSxHQUFBM1osS0FBQXlaLEVBR0F6WixFQUFBeVosV0FBQUEsRUFLQSxVQUFBelosR0FDQUEsRUFBQXlaLFdBQUFBLEdBWUEsU0FBQUcsRUFBQTVSLEdBQ0EsT0FBQTRRLEVBQUEsU0FBQWlCLEdBRUEsT0FEQUEsR0FBQUEsRUFDQWpCLEVBQUEsU0FBQTdCLEVBQUEzSyxHQU1BLElBTEEsSUFBQTVGLEVBQ0FzVCxFQUFBOVIsS0FBQStPLEVBQUE5YSxPQUFBNGQsR0FDQWpkLEVBQUFrZCxFQUFBN2QsT0FHQVcsS0FDQW1hLEVBQUF2USxFQUFBc1QsRUFBQWxkLE1BQ0FtYSxFQUFBdlEsS0FBQTRGLEVBQUE1RixHQUFBdVEsRUFBQXZRLFNBWUEsU0FBQTRSLEVBQUF0YyxHQUNBLE9BQUFBLFFBQUEsSUFBQUEsRUFBQTRKLHNCQUFBNUosRUF5akNBLFNBQUFpZSxLQXVFQSxTQUFBN0IsRUFBQThCLEdBSUEsSUFIQSxJQUFBcGQsRUFBQSxFQUNBd1ksRUFBQTRFLEVBQUEvZCxPQUNBOEwsRUFBQSxHQUNBbkwsRUFBQXdZLEVBQUF4WSxJQUNBbUwsR0FBQWlTLEVBQUFwZCxHQUFBakQsTUFFQSxPQUFBb08sRUFHQSxTQUFBa1MsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBblosRUFBQWtaLEVBQUFsWixJQUNBb1osRUFBQUYsRUFBQXZjLEtBQ0F1RixFQUFBa1gsR0FBQXBaLEVBQ0FxWixFQUFBRixHQUFBLGVBQUFqWCxFQUNBb1gsRUFBQW5ZLElBRUEsT0FBQStYLEVBQUFyYyxNQUVBLFNBQUFrQyxFQUFBbEUsRUFBQTBlLEdBQ0EsS0FBQXhhLEVBQUFBLEVBQUFpQixJQUNBLEdBQUEsSUFBQWpCLEVBQUFVLFVBQUE0WixFQUNBLE9BQUFKLEVBQUFsYSxFQUFBbEUsRUFBQTBlLEdBR0EsT0FBQSxHQUlBLFNBQUF4YSxFQUFBbEUsRUFBQTBlLEdBQ0EsSUFBQUMsRUFBQUMsRUFBQUMsRUFDQUMsR0FBQUMsRUFBQU4sR0FHQSxHQUFBQyxHQUNBLEtBQUF4YSxFQUFBQSxFQUFBaUIsSUFDQSxJQUFBLElBQUFqQixFQUFBVSxVQUFBNFosSUFDQUosRUFBQWxhLEVBQUFsRSxFQUFBMGUsR0FDQSxPQUFBLE9BS0EsS0FBQXhhLEVBQUFBLEVBQUFpQixJQUNBLEdBQUEsSUFBQWpCLEVBQUFVLFVBQUE0WixFQU9BLEdBTkFLLEVBQUEzYSxFQUFBOEMsS0FBQTlDLEVBQUE4QyxPQUlBNFgsRUFBQUMsRUFBQTNhLEVBQUE4YSxZQUFBSCxFQUFBM2EsRUFBQThhLGNBRUFULEdBQUFBLElBQUFyYSxFQUFBRCxTQUFBRyxjQUNBRixFQUFBQSxFQUFBaUIsSUFBQWpCLE1BQ0EsQ0FBQSxJQUFBeWEsRUFBQUMsRUFBQXZYLEtBQ0FzWCxFQUFBLEtBQUFJLEdBQUFKLEVBQUEsS0FBQUYsRUFHQSxPQUFBSyxFQUFBLEdBQUFILEVBQUEsR0FNQSxHQUhBQyxFQUFBdlgsR0FBQXlYLEVBR0FBLEVBQUEsR0FBQVYsRUFBQWxhLEVBQUFsRSxFQUFBMGUsR0FDQSxPQUFBLEVBTUEsT0FBQSxHQUlBLFNBQUFPLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQS9lLE9BQUEsRUFDQSxTQUFBK0QsRUFBQWxFLEVBQUEwZSxHQUVBLElBREEsSUFBQTVkLEVBQUFvZSxFQUFBL2UsT0FDQVcsS0FDQSxJQUFBb2UsRUFBQXBlLEdBQUFvRCxFQUFBbEUsRUFBQTBlLEdBQ0EsT0FBQSxFQUdBLE9BQUEsR0FFQVEsRUFBQSxHQUdBLFNBQUFDLEVBQUFsVCxFQUFBbVQsRUFBQTVFLEdBR0EsSUFGQSxJQUFBMVosRUFBQSxFQUNBd1ksRUFBQThGLEVBQUFqZixPQUNBVyxFQUFBd1ksRUFBQXhZLElBQ0FrYSxFQUFBL08sRUFBQW1ULEVBQUF0ZSxHQUFBMFosR0FFQSxPQUFBQSxFQUdBLFNBQUE2RSxFQUFBQyxFQUFBM1EsRUFBQTNKLEVBQUFoRixFQUFBMGUsR0FPQSxJQU5BLElBQUF4YSxFQUNBcWIsS0FDQXplLEVBQUEsRUFDQXdZLEVBQUFnRyxFQUFBbmYsT0FDQXFmLEVBQUEsTUFBQTdRLEVBRUE3TixFQUFBd1ksRUFBQXhZLEtBQ0FvRCxFQUFBb2IsRUFBQXhlLE1BQ0FrRSxJQUFBQSxFQUFBZCxFQUFBbEUsRUFBQTBlLEtBQ0FhLEVBQUE5ZSxLQUFBeUQsR0FDQXNiLEdBQ0E3USxFQUFBbE8sS0FBQUssS0FNQSxPQUFBeWUsRUFHQSxTQUFBRSxFQUFBQyxFQUFBelQsRUFBQW1TLEVBQUF1QixFQUFBQyxFQUFBQyxHQU9BLE9BTkFGLElBQUFBLEVBQUEzWSxLQUNBMlksRUFBQUYsRUFBQUUsSUFFQUMsSUFBQUEsRUFBQTVZLEtBQ0E0WSxFQUFBSCxFQUFBRyxFQUFBQyxJQUVBL0MsRUFBQSxTQUFBN0IsRUFBQVQsRUFBQXhhLEVBQUEwZSxHQUNBLElBQUE1VixFQUFBaEksRUFBQW9ELEVBQ0E0YixLQUNBQyxLQUNBQyxFQUFBeEYsRUFBQXJhLE9BR0E2SixFQUFBaVIsR0FBQWtFLEVBQUFsVCxHQUFBLElBQUFqTSxFQUFBNEUsVUFBQTVFLEdBQUFBLE1BR0FpZ0IsR0FBQVAsSUFBQXpFLEdBQUFoUCxFQUVBakMsRUFEQXFWLEVBQUFyVixFQUFBOFYsRUFBQUosRUFBQTFmLEVBQUEwZSxHQUdBd0IsRUFBQTlCLEVBRUF3QixJQUFBM0UsRUFBQXlFLEVBQUFNLEdBQUFMLE1BTUFuRixFQUNBeUYsRUFRQSxHQUxBN0IsR0FDQUEsRUFBQTZCLEVBQUFDLEVBQUFsZ0IsRUFBQTBlLEdBSUFpQixFQU1BLElBTEE3VyxFQUFBdVcsRUFBQWEsRUFBQUgsR0FDQUosRUFBQTdXLEtBQUE5SSxFQUFBMGUsR0FHQTVkLEVBQUFnSSxFQUFBM0ksT0FDQVcsTUFDQW9ELEVBQUE0RSxFQUFBaEksTUFDQW9mLEVBQUFILEVBQUFqZixNQUFBbWYsRUFBQUYsRUFBQWpmLElBQUFvRCxJQUtBLEdBQUErVyxHQUNBLEdBQUEyRSxHQUFBRixFQUFBLENBQ0EsR0FBQUUsRUFBQSxDQUlBLElBRkE5VyxLQUNBaEksRUFBQW9mLEVBQUEvZixPQUNBVyxNQUNBb0QsRUFBQWdjLEVBQUFwZixLQUVBZ0ksRUFBQXJJLEtBQUF3ZixFQUFBbmYsR0FBQW9ELEdBR0EwYixFQUFBLEtBQUFNLEtBQUFwWCxFQUFBNFYsR0FLQSxJQURBNWQsRUFBQW9mLEVBQUEvZixPQUNBVyxNQUNBb0QsRUFBQWdjLEVBQUFwZixNQUNBZ0ksRUFBQThXLEVBQUEvYSxFQUFBb1csRUFBQS9XLEdBQUE0YixFQUFBaGYsS0FBQSxJQUVBbWEsRUFBQW5TLEtBQUEwUixFQUFBMVIsR0FBQTVFLFVBT0FnYyxFQUFBYixFQUNBYSxJQUFBMUYsRUFDQTBGLEVBQUFuZixPQUFBaWYsRUFBQUUsRUFBQS9mLFFBQ0ErZixHQUVBTixFQUNBQSxFQUFBLEtBQUFwRixFQUFBMEYsRUFBQXhCLEdBRUFqZSxFQUFBZ0csTUFBQStULEVBQUEwRixLQU1BLFNBQUFDLEVBQUFqQyxHQXdCQSxJQXZCQSxJQUFBa0MsRUFBQWhDLEVBQUExVCxFQUNBNE8sRUFBQTRFLEVBQUEvZCxPQUNBa2dCLEVBQUF6RCxFQUFBMEQsU0FBQXBDLEVBQUEsR0FBQXBhLE1BQ0F5YyxFQUFBRixHQUFBekQsRUFBQTBELFNBQUEsS0FDQXhmLEVBQUF1ZixFQUFBLEVBQUEsRUFHQUcsRUFBQXJDLEVBQUEsU0FBQWphLEdBQ0EsT0FBQUEsSUFBQWtjLEdBQ0FHLEdBQUEsR0FDQUUsRUFBQXRDLEVBQUEsU0FBQWphLEdBQ0EsT0FBQVcsRUFBQXViLEVBQUFsYyxJQUFBLEdBQ0FxYyxHQUFBLEdBQ0FyQixHQUFBLFNBQUFoYixFQUFBbEUsRUFBQTBlLEdBQ0EsSUFBQS9VLEdBQUEwVyxJQUFBM0IsR0FBQTFlLElBQUEwZ0IsTUFDQU4sRUFBQXBnQixHQUFBNEUsU0FDQTRiLEVBQUF0YyxFQUFBbEUsRUFBQTBlLEdBQ0ErQixFQUFBdmMsRUFBQWxFLEVBQUEwZSxJQUdBLE9BREEwQixFQUFBLEtBQ0F6VyxJQUdBN0ksRUFBQXdZLEVBQUF4WSxJQUNBLEdBQUFzZCxFQUFBeEIsRUFBQTBELFNBQUFwQyxFQUFBcGQsR0FBQWdELE1BQ0FvYixHQUFBZixFQUFBYyxFQUFBQyxHQUFBZCxRQUNBLENBSUEsSUFIQUEsRUFBQXhCLEVBQUE1WCxPQUFBa1osRUFBQXBkLEdBQUFnRCxNQUFBMkMsTUFBQSxLQUFBeVgsRUFBQXBkLEdBQUF3UCxVQUdBdEosR0FBQSxDQUdBLElBREEwRCxJQUFBNUosRUFDQTRKLEVBQUE0TyxJQUNBc0QsRUFBQTBELFNBQUFwQyxFQUFBeFQsR0FBQTVHLE1BREE0RyxLQUtBLE9BQUErVSxFQUNBM2UsRUFBQSxHQUFBbWUsRUFBQUMsR0FDQXBlLEVBQUEsR0FBQXNiLEVBRUE4QixFQUFBdlgsTUFBQSxFQUFBN0YsRUFBQSxHQUFBcU4sUUFBQXRRLE1BQUEsTUFBQXFnQixFQUFBcGQsRUFBQSxHQUFBZ0QsS0FBQSxJQUFBLE1BQ0F3RCxRQUFBb1IsR0FBQSxNQUNBMEYsRUFDQXRkLEVBQUE0SixHQUFBeVYsRUFBQWpDLEVBQUF2WCxNQUFBN0YsRUFBQTRKLElBQ0FBLEVBQUE0TyxHQUFBNkcsRUFBQWpDLEVBQUFBLEVBQUF2WCxNQUFBK0QsSUFDQUEsRUFBQTRPLEdBQUE4QyxFQUFBOEIsSUFHQWdCLEVBQUF6ZSxLQUFBMmQsR0FJQSxPQUFBYSxFQUFBQyxHQUdBLFNBQUF5QixFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUExZ0IsT0FBQSxFQUNBNGdCLEVBQUFILEVBQUF6Z0IsT0FBQSxFQUNBNmdCLEVBQUEsU0FBQS9GLEVBQUFqYixFQUFBMGUsRUFBQWxFLEVBQUF5RyxHQUNBLElBQUEvYyxFQUFBd0csRUFBQTBULEVBQ0E4QyxFQUFBLEVBQ0FwZ0IsRUFBQSxJQUNBd2UsRUFBQXJFLE1BQ0FrRyxLQUNBQyxFQUFBVixFQUVBMVcsRUFBQWlSLEdBQUE4RixHQUFBbkUsRUFBQXlFLEtBQUEsSUFBQSxJQUFBSixHQUVBSyxFQUFBdkMsR0FBQSxNQUFBcUMsRUFBQSxFQUFBN1EsS0FBQW9KLFVBQUEsR0FDQUwsRUFBQXRQLEVBQUE3SixPQVNBLElBUEE4Z0IsSUFDQVAsRUFBQTFnQixJQUFBdkMsR0FBQXVDLEdBQUFpaEIsR0FNQW5nQixJQUFBd1ksR0FBQSxPQUFBcFYsRUFBQThGLEVBQUFsSixJQUFBQSxJQUFBLENBQ0EsR0FBQWlnQixHQUFBN2MsRUFBQSxDQU1BLElBTEF3RyxFQUFBLEVBQ0ExSyxHQUFBa0UsRUFBQTZFLGdCQUFBdEwsSUFDQStkLEVBQUF0WCxHQUNBd2EsR0FBQWpELEdBRUEyQyxFQUFBd0MsRUFBQWxXLE1BQ0EsR0FBQTBULEVBQUFsYSxFQUFBbEUsR0FBQXZDLEVBQUFpaEIsR0FBQSxDQUNBbEUsRUFBQS9aLEtBQUF5RCxHQUNBLE1BR0ErYyxJQUNBbEMsRUFBQXVDLEdBS0FSLEtBRUE1YyxHQUFBa2EsR0FBQWxhLElBQ0FnZCxJQUlBakcsR0FDQXFFLEVBQUE3ZSxLQUFBeUQsSUFnQkEsR0FUQWdkLEdBQUFwZ0IsRUFTQWdnQixHQUFBaGdCLElBQUFvZ0IsRUFBQSxDQUVBLElBREF4VyxFQUFBLEVBQ0EwVCxFQUFBeUMsRUFBQW5XLE1BQ0EwVCxFQUFBa0IsRUFBQTZCLEVBQUFuaEIsRUFBQTBlLEdBR0EsR0FBQXpELEVBQUEsQ0FFQSxHQUFBaUcsRUFBQSxFQUNBLEtBQUFwZ0IsS0FDQXdlLEVBQUF4ZSxJQUFBcWdCLEVBQUFyZ0IsS0FDQXFnQixFQUFBcmdCLEdBQUF5Z0IsRUFBQTVjLEtBQUE2VixJQU1BMkcsRUFBQTlCLEVBQUE4QixHQUlBMWdCLEVBQUFnRyxNQUFBK1QsRUFBQTJHLEdBR0FGLElBQUFoRyxHQUFBa0csRUFBQWhoQixPQUFBLEdBQ0ErZ0IsRUFBQUwsRUFBQTFnQixPQUFBLEdBRUE2YSxFQUFBd0csV0FBQWhILEdBVUEsT0FMQXlHLElBQ0FsQyxFQUFBdUMsRUFDQVosRUFBQVUsR0FHQTlCLEdBR0EsT0FBQXdCLEVBQ0FoRSxFQUFBa0UsR0FDQUEsRUEvZ0VBLElBQUFsZ0IsRUFDQXlOLEVBQ0FxTyxFQUNBNkUsRUFDQUMsRUFDQXZGLEVBQ0F6YyxFQUNBOGMsRUFDQWtFLEVBQ0FpQixFQUNBQyxFQUdBcEcsRUFDQS9kLEVBQ0Fva0IsRUFDQXBHLEVBQ0FNLEVBQ0ErRixFQUNBeFIsRUFDQTdGLEVBR0F6RCxFQUFBLFNBQUEsRUFBQSxJQUFBNlQsS0FDQVUsRUFBQXZZLEVBQUF2RixTQUNBc2hCLEVBQUEsRUFDQXpZLEVBQUEsRUFDQXliLEVBQUF0RixJQUNBdUYsRUFBQXZGLElBQ0FYLEVBQUFXLElBQ0F3RixFQUFBLFNBQUE1RSxFQUFBQyxHQUlBLE9BSEFELElBQUFDLElBQ0FzRSxHQUFBLEdBRUEsR0FJQXRKLEtBQUFDLGVBQ0FQLEtBQ0F1SixFQUFBdkosRUFBQXVKLElBQ0FXLEVBQUFsSyxFQUFBdlgsS0FDQUEsRUFBQXVYLEVBQUF2WCxLQUNBa0csRUFBQXFSLEVBQUFyUixNQUdBOUIsRUFBQSxTQUFBc2QsRUFBQWplLEdBR0EsSUFGQSxJQUFBcEQsRUFBQSxFQUNBd1ksRUFBQTZJLEVBQUFoaUIsT0FDQVcsRUFBQXdZLEVBQUF4WSxJQUNBLEdBQUFxaEIsRUFBQXJoQixLQUFBb0QsRUFDQSxPQUFBcEQsRUFHQSxPQUFBLEdBR0FzaEIsRUFBQSw2SEFLQUMsR0FBQSxzQkFHQUMsR0FBQSxnQ0FHQUMsR0FBQSxNQUFBRixHQUFBLEtBQUFDLEdBQUEsT0FBQUQsR0FFQSxnQkFBQUEsR0FFQSwyREFBQUMsR0FBQSxPQUFBRCxHQUNBLE9BRUFHLEdBQUEsS0FBQUYsR0FBQSx3RkFLQUMsR0FBQSxlQU1BRSxHQUFBLElBQUFDLE9BQUFMLEdBQUEsSUFBQSxLQUNBM0osR0FBQSxJQUFBZ0ssT0FBQSxJQUFBTCxHQUFBLDhCQUFBQSxHQUFBLEtBQUEsS0FFQU0sR0FBQSxJQUFBRCxPQUFBLElBQUFMLEdBQUEsS0FBQUEsR0FBQSxLQUNBTyxHQUFBLElBQUFGLE9BQUEsSUFBQUwsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FFQVEsR0FBQSxJQUFBSCxPQUFBLElBQUFMLEdBQUEsaUJBQUFBLEdBQUEsT0FBQSxLQUVBUyxHQUFBLElBQUFKLE9BQUFGLElBQ0FPLEdBQUEsSUFBQUwsT0FBQSxJQUFBSixHQUFBLEtBRUFVLElBQ0FDLEdBQUEsSUFBQVAsT0FBQSxNQUFBSixHQUFBLEtBQ0FZLE1BQUEsSUFBQVIsT0FBQSxRQUFBSixHQUFBLEtBQ0FhLElBQUEsSUFBQVQsT0FBQSxLQUFBSixHQUFBLFNBQ0FjLEtBQUEsSUFBQVYsT0FBQSxJQUFBSCxJQUNBYyxPQUFBLElBQUFYLE9BQUEsSUFBQUYsSUFDQWMsTUFBQSxJQUFBWixPQUFBLHlEQUFBTCxHQUNBLCtCQUFBQSxHQUFBLGNBQUFBLEdBQ0EsYUFBQUEsR0FBQSxTQUFBLEtBQ0FrQixLQUFBLElBQUFiLE9BQUEsT0FBQU4sRUFBQSxLQUFBLEtBR0FvQixhQUFBLElBQUFkLE9BQUEsSUFBQUwsR0FBQSxtREFDQUEsR0FBQSxtQkFBQUEsR0FBQSxtQkFBQSxNQUdBb0IsR0FBQSxzQ0FDQUMsR0FBQSxTQUVBQyxHQUFBLHlCQUdBakksR0FBQSxtQ0FFQVcsR0FBQSxPQUlBdUgsR0FBQSxJQUFBbEIsT0FBQSxxQkFBQUwsR0FBQSxNQUFBQSxHQUFBLE9BQUEsTUFDQXdCLEdBQUEsU0FBQW5lLEVBQUFvZSxFQUFBQyxHQUNBLElBQUFDLEVBQUEsS0FBQUYsRUFBQSxNQUlBLE9BQUFFLElBQUFBLEdBQUFELEVBQ0FELEVBQ0FFLEVBQUEsRUFFQUMsT0FBQUMsYUFBQUYsRUFBQSxPQUVBQyxPQUFBQyxhQUFBRixHQUFBLEdBQUEsTUFBQSxLQUFBQSxFQUFBLFFBS0FoSSxHQUFBLHNEQUNBQyxHQUFBLFNBQUFrSSxFQUFBQyxHQUNBLE9BQUFBLEVBR0EsT0FBQUQsRUFDQSxJQUlBQSxFQUFBeGQsTUFBQSxHQUFBLEdBQUEsS0FBQXdkLEVBQUFFLFdBQUFGLEVBQUFoa0IsT0FBQSxHQUFBa1ksU0FBQSxJQUFBLElBSUEsS0FBQThMLEdBT0FHLEdBQUEsV0FDQTlJLEtBR0FxQyxHQUFBTSxFQUNBLFNBQUFqYSxHQUNBLE9BQUEsSUFBQUEsRUFBQXlaLFdBQUEsU0FBQXpaLEdBQUEsVUFBQUEsS0FFQWlCLElBQUEsYUFBQXJELEtBQUEsV0FJQSxJQUNBckIsRUFBQWdHLE1BQ0F1UixFQUFBclIsRUFBQWhDLEtBQUE0VyxFQUFBbFEsWUFDQWtRLEVBQUFsUSxZQUlBMk0sRUFBQXVELEVBQUFsUSxXQUFBbEwsUUFBQXlFLFNBQ0EsTUFBQTZDLEdBQ0FoSCxHQUFBZ0csTUFBQXVSLEVBQUE3WCxPQUdBLFNBQUFtVyxFQUFBaU8sR0FDQXJDLEVBQUF6YixNQUFBNlAsRUFBQTNQLEVBQUFoQyxLQUFBNGYsS0FLQSxTQUFBak8sRUFBQWlPLEdBSUEsSUFIQSxJQUFBN1osRUFBQTRMLEVBQUFuVyxPQUNBVyxFQUFBLEVBRUF3VixFQUFBNUwsS0FBQTZaLEVBQUF6akIsT0FDQXdWLEVBQUFuVyxPQUFBdUssRUFBQSxJQW9WQTZELEVBQUF5TSxFQUFBek0sV0FPQW1ULEVBQUExRyxFQUFBMEcsTUFBQSxTQUFBeGQsR0FHQSxJQUFBc2dCLEVBQUF0Z0IsSUFBQUEsRUFBQTZFLGVBQUE3RSxHQUFBc2dCLGdCQUNBLFFBQUFBLEdBQUEsU0FBQUEsRUFBQXZnQixVQVFBdVgsRUFBQVIsRUFBQVEsWUFBQSxTQUFBbk4sR0FDQSxJQUFBb1csRUFBQUMsRUFDQXRoQixFQUFBaUwsRUFBQUEsRUFBQXRGLGVBQUFzRixFQUFBa04sRUFHQSxPQUFBblksSUFBQTNGLEdBQUEsSUFBQTJGLEVBQUF3QixVQUFBeEIsRUFBQW9oQixpQkFLQS9tQixFQUFBMkYsRUFDQXllLEVBQUFwa0IsRUFBQSttQixnQkFDQS9JLEdBQUFpRyxFQUFBamtCLEdBSUE4ZCxJQUFBOWQsSUFDQWluQixFQUFBam5CLEVBQUFrbkIsY0FBQUQsRUFBQUUsTUFBQUYsSUFHQUEsRUFBQUcsaUJBQ0FILEVBQUFHLGlCQUFBLFNBQUFQLElBQUEsR0FHQUksRUFBQUksYUFDQUosRUFBQUksWUFBQSxXQUFBUixLQVVBL1YsRUFBQWdVLFdBQUF4RixFQUFBLFNBQUFDLEdBRUEsT0FEQUEsRUFBQStILFVBQUEsS0FDQS9ILEVBQUF4VixhQUFBLGVBT0ErRyxFQUFBM0UscUJBQUFtVCxFQUFBLFNBQUFDLEdBRUEsT0FEQUEsRUFBQXZaLFlBQUFoRyxFQUFBdW5CLGNBQUEsTUFDQWhJLEVBQUFwVCxxQkFBQSxLQUFBekosU0FJQW9PLEVBQUFxTix1QkFBQStILEdBQUE1ZSxLQUFBdEgsRUFBQW1lLHdCQU1Bck4sRUFBQTBXLFFBQUFsSSxFQUFBLFNBQUFDLEdBRUEsT0FEQTZFLEVBQUFwZSxZQUFBdVosR0FBQXJlLEdBQUFxSSxHQUNBdkosRUFBQXluQixvQkFBQXpuQixFQUFBeW5CLGtCQUFBbGUsR0FBQTdHLFNBSUFvTyxFQUFBMFcsU0FDQXJJLEVBQUE1WCxPQUFBLEdBQUEsU0FBQXJHLEdBQ0EsSUFBQXdtQixFQUFBeG1CLEVBQUEySSxRQUFBc2MsR0FBQUMsSUFDQSxPQUFBLFNBQUEzZixHQUNBLE9BQUFBLEVBQUFzRCxhQUFBLFFBQUEyZCxJQUdBdkksRUFBQXlFLEtBQUEsR0FBQSxTQUFBMWlCLEVBQUFxQixHQUNBLFFBQUEsSUFBQUEsRUFBQTJiLGdCQUFBRixFQUFBLENBQ0EsSUFBQXZYLEVBQUFsRSxFQUFBMmIsZUFBQWhkLEdBQ0EsT0FBQXVGLEdBQUFBLFVBSUEwWSxFQUFBNVgsT0FBQSxHQUFBLFNBQUFyRyxHQUNBLElBQUF3bUIsRUFBQXhtQixFQUFBMkksUUFBQXNjLEdBQUFDLElBQ0EsT0FBQSxTQUFBM2YsR0FDQSxJQUFBbUssT0FBQSxJQUFBbkssRUFBQWtoQixrQkFDQWxoQixFQUFBa2hCLGlCQUFBLE1BQ0EsT0FBQS9XLEdBQUFBLEVBQUF4USxRQUFBc25CLElBTUF2SSxFQUFBeUUsS0FBQSxHQUFBLFNBQUExaUIsRUFBQXFCLEdBQ0EsUUFBQSxJQUFBQSxFQUFBMmIsZ0JBQUFGLEVBQUEsQ0FDQSxJQUFBcE4sRUFBQXZOLEVBQUFrSixFQUNBOUYsRUFBQWxFLEVBQUEyYixlQUFBaGQsR0FFQSxHQUFBdUYsRUFBQSxDQUlBLElBREFtSyxFQUFBbkssRUFBQWtoQixpQkFBQSxRQUNBL1csRUFBQXhRLFFBQUFjLEVBQ0EsT0FBQXVGLEdBTUEsSUFGQThGLEVBQUFoSyxFQUFBa2xCLGtCQUFBdm1CLEdBQ0FtQyxFQUFBLEVBQ0FvRCxFQUFBOEYsRUFBQWxKLE1BRUEsSUFEQXVOLEVBQUFuSyxFQUFBa2hCLGlCQUFBLFFBQ0EvVyxFQUFBeFEsUUFBQWMsRUFDQSxPQUFBdUYsR0FLQSxZQU1BMFksRUFBQXlFLEtBQUEsSUFBQTlTLEVBQUEzRSxxQkFDQSxTQUFBRixFQUFBMUosR0FDQSxZQUFBLElBQUFBLEVBQUE0SixxQkFDQTVKLEVBQUE0SixxQkFBQUYsR0FHQTZFLEVBQUFzTixJQUNBN2IsRUFBQTZKLGlCQUFBSCxRQURBLEdBS0EsU0FBQUEsRUFBQTFKLEdBQ0EsSUFBQWtFLEVBQ0FxRyxLQUNBekosRUFBQSxFQUVBMFosRUFBQXhhLEVBQUE0SixxQkFBQUYsR0FHQSxHQUFBLE1BQUFBLEVBQUEsQ0FDQSxLQUFBeEYsRUFBQXNXLEVBQUExWixNQUNBLElBQUFvRCxFQUFBVSxVQUNBMkYsRUFBQTlKLEtBQUF5RCxHQUlBLE9BQUFxRyxFQUVBLE9BQUFpUSxHQUlBb0MsRUFBQXlFLEtBQUEsTUFBQTlTLEVBQUFxTix3QkFBQSxTQUFBbUosRUFBQS9rQixHQUNBLFFBQUEsSUFBQUEsRUFBQTRiLHdCQUFBSCxFQUNBLE9BQUF6YixFQUFBNGIsdUJBQUFtSixJQVVBakQsS0FPQS9GLE1BRUF4TixFQUFBc04sSUFBQThILEdBQUE1ZSxLQUFBdEgsRUFBQW9NLHFCQUdBa1QsRUFBQSxTQUFBQyxHQU1BNkUsRUFBQXBlLFlBQUF1WixHQUFBOVIsVUFBQSxVQUFBbEUsRUFBQSxxQkFDQUEsRUFBQSxrRUFPQWdXLEVBQUFuVCxpQkFBQSx3QkFBQTFKLFFBQ0E0YixFQUFBdGIsS0FBQSxTQUFBNGhCLEdBQUEsZ0JBS0FyRixFQUFBblQsaUJBQUEsY0FBQTFKLFFBQ0E0YixFQUFBdGIsS0FBQSxNQUFBNGhCLEdBQUEsYUFBQUQsRUFBQSxLQUlBcEYsRUFBQW5ULGlCQUFBLFFBQUE3QyxFQUFBLE1BQUE3RyxRQUNBNGIsRUFBQXRiLEtBQUEsTUFNQXVjLEVBQUFuVCxpQkFBQSxZQUFBMUosUUFDQTRiLEVBQUF0YixLQUFBLFlBTUF1YyxFQUFBblQsaUJBQUEsS0FBQTdDLEVBQUEsTUFBQTdHLFFBQ0E0YixFQUFBdGIsS0FBQSxjQUlBc2MsRUFBQSxTQUFBQyxHQUNBQSxFQUFBOVIsVUFBQSxvRkFLQSxJQUFBbWEsRUFBQTVuQixFQUFBNkYsY0FBQSxTQUNBK2hCLEVBQUFuSixhQUFBLE9BQUEsVUFDQWMsRUFBQXZaLFlBQUE0aEIsR0FBQW5KLGFBQUEsT0FBQSxLQUlBYyxFQUFBblQsaUJBQUEsWUFBQTFKLFFBQ0E0YixFQUFBdGIsS0FBQSxPQUFBNGhCLEdBQUEsZUFLQSxJQUFBckYsRUFBQW5ULGlCQUFBLFlBQUExSixRQUNBNGIsRUFBQXRiLEtBQUEsV0FBQSxhQUtBb2hCLEVBQUFwZSxZQUFBdVosR0FBQVcsVUFBQSxFQUNBLElBQUFYLEVBQUFuVCxpQkFBQSxhQUFBMUosUUFDQTRiLEVBQUF0YixLQUFBLFdBQUEsYUFJQXVjLEVBQUFuVCxpQkFBQSxRQUNBa1MsRUFBQXRiLEtBQUEsWUFJQThOLEVBQUErVyxnQkFBQTNCLEdBQUE1ZSxLQUFBdUwsRUFBQXVSLEVBQUF2UixTQUNBdVIsRUFBQTBELHVCQUNBMUQsRUFBQTJELG9CQUNBM0QsRUFBQTRELGtCQUNBNUQsRUFBQTZELHFCQUVBM0ksRUFBQSxTQUFBQyxHQUdBek8sRUFBQW9YLGtCQUFBclYsRUFBQTNMLEtBQUFxWSxFQUFBLEtBSUExTSxFQUFBM0wsS0FBQXFZLEVBQUEsYUFDQThFLEVBQUFyaEIsS0FBQSxLQUFBK2hCLE1BSUF6RyxFQUFBQSxFQUFBNWIsUUFBQSxJQUFBdWlCLE9BQUEzRyxFQUFBaEgsS0FBQSxNQUNBK00sRUFBQUEsRUFBQTNoQixRQUFBLElBQUF1aUIsT0FBQVosRUFBQS9NLEtBQUEsTUFJQTBQLEVBQUFkLEdBQUE1ZSxLQUFBOGMsRUFBQStELHlCQUtBbmIsRUFBQWdhLEdBQUFkLEdBQUE1ZSxLQUFBOGMsRUFBQXBYLFVBQ0EsU0FBQTRTLEVBQUFDLEdBQ0EsSUFBQXVJLEVBQUEsSUFBQXhJLEVBQUF6WSxTQUFBeVksRUFBQW1ILGdCQUFBbkgsRUFDQXlJLEVBQUF4SSxHQUFBQSxFQUFBNVosV0FDQSxPQUFBMlosSUFBQXlJLE1BQUFBLEdBQUEsSUFBQUEsRUFBQWxoQixZQUNBaWhCLEVBQUFwYixTQUNBb2IsRUFBQXBiLFNBQUFxYixHQUNBekksRUFBQXVJLHlCQUFBLEdBQUF2SSxFQUFBdUksd0JBQUFFLE1BR0EsU0FBQXpJLEVBQUFDLEdBQ0EsR0FBQUEsRUFDQSxLQUFBQSxFQUFBQSxFQUFBNVosWUFDQSxHQUFBNFosSUFBQUQsRUFDQSxPQUFBLEVBSUEsT0FBQSxHQU9BNEUsRUFBQXdDLEVBQ0EsU0FBQXBILEVBQUFDLEdBR0EsR0FBQUQsSUFBQUMsRUFFQSxPQURBc0UsR0FBQSxFQUNBLEVBSUEsSUFBQW1FLEdBQUExSSxFQUFBdUkseUJBQUF0SSxFQUFBc0ksd0JBQ0EsT0FBQUcsSUFZQSxHQVBBQSxHQUFBMUksRUFBQXRVLGVBQUFzVSxNQUFBQyxFQUFBdlUsZUFBQXVVLEdBQ0FELEVBQUF1SSx3QkFBQXRJLEdBR0EsS0FJQS9PLEVBQUF5WCxjQUFBMUksRUFBQXNJLHdCQUFBdkksS0FBQTBJLEVBR0ExSSxJQUFBNWYsR0FBQTRmLEVBQUF0VSxnQkFBQXdTLEdBQUE5USxFQUFBOFEsRUFBQThCLElBQ0EsRUFFQUMsSUFBQTdmLEdBQUE2ZixFQUFBdlUsZ0JBQUF3UyxHQUFBOVEsRUFBQThRLEVBQUErQixHQUNBLEVBSUFxRSxFQUNBOWMsRUFBQThjLEVBQUF0RSxHQUFBeFksRUFBQThjLEVBQUFyRSxHQUNBLEVBR0EsRUFBQXlJLEdBQUEsRUFBQSxJQUVBLFNBQUExSSxFQUFBQyxHQUVBLEdBQUFELElBQUFDLEVBRUEsT0FEQXNFLEdBQUEsRUFDQSxFQUdBLElBQUExYyxFQUNBcEUsRUFBQSxFQUNBbWxCLEVBQUE1SSxFQUFBM1osV0FDQW9pQixFQUFBeEksRUFBQTVaLFdBQ0F3aUIsR0FBQTdJLEdBQ0E4SSxHQUFBN0ksR0FHQSxJQUFBMkksSUFBQUgsRUFDQSxPQUFBekksSUFBQTVmLEdBQUEsRUFDQTZmLElBQUE3ZixFQUFBLEVBQ0F3b0IsR0FBQSxFQUNBSCxFQUFBLEVBQ0FuRSxFQUNBOWMsRUFBQThjLEVBQUF0RSxHQUFBeFksRUFBQThjLEVBQUFyRSxHQUNBLEVBR0EsR0FBQTJJLElBQUFILEVBQ0EsT0FBQTFJLEVBQUFDLEVBQUFDLEdBS0EsSUFEQXBZLEVBQUFtWSxFQUNBblksRUFBQUEsRUFBQXhCLFlBQ0F3aUIsRUFBQXZRLFFBQUF6USxHQUdBLElBREFBLEVBQUFvWSxFQUNBcFksRUFBQUEsRUFBQXhCLFlBQ0F5aUIsRUFBQXhRLFFBQUF6USxHQUlBLEtBQUFnaEIsRUFBQXBsQixLQUFBcWxCLEVBQUFybEIsSUFDQUEsSUFHQSxPQUFBQSxFQUVBc2MsRUFBQThJLEVBQUFwbEIsR0FBQXFsQixFQUFBcmxCLElBR0FvbEIsRUFBQXBsQixLQUFBeWEsR0FBQSxFQUNBNEssRUFBQXJsQixLQUFBeWEsRUFBQSxFQUNBLEdBR0E5ZCxHQTNZQUEsR0E4WUF1ZCxFQUFBMUssUUFBQSxTQUFBOFYsRUFBQTloQixHQUNBLE9BQUEwVyxFQUFBb0wsRUFBQSxLQUFBLEtBQUE5aEIsSUFHQTBXLEVBQUFzSyxnQkFBQSxTQUFBcGhCLEVBQUFraUIsR0FTQSxJQVBBbGlCLEVBQUE2RSxlQUFBN0UsS0FBQXpHLEdBQ0ErZCxFQUFBdFgsR0FJQWtpQixFQUFBQSxFQUFBOWUsUUFBQXViLEdBQUEsVUFFQXRVLEVBQUErVyxpQkFBQTdKLElBQ0FLLEVBQUFzSyxFQUFBLFFBQ0F0RSxJQUFBQSxFQUFBL2MsS0FBQXFoQixPQUNBckssSUFBQUEsRUFBQWhYLEtBQUFxaEIsSUFFQSxJQUNBLElBQUF6YyxFQUFBMkcsRUFBQTNMLEtBQUFULEVBQUFraUIsR0FHQSxHQUFBemMsR0FBQTRFLEVBQUFvWCxtQkFHQXpoQixFQUFBekcsVUFBQSxLQUFBeUcsRUFBQXpHLFNBQUFtSCxTQUNBLE9BQUErRSxFQUVBLE1BQUFsQyxJQUdBLE9BQUF1VCxFQUFBb0wsRUFBQTNvQixFQUFBLE1BQUF5RyxJQUFBL0QsT0FBQSxHQUdBNmEsRUFBQXZRLFNBQUEsU0FBQXpLLEVBQUFrRSxHQUtBLE9BSEFsRSxFQUFBK0ksZUFBQS9JLEtBQUF2QyxHQUNBK2QsRUFBQXhiLEdBRUF5SyxFQUFBekssRUFBQWtFLElBR0E4VyxFQUFBcUwsS0FBQSxTQUFBbmlCLEVBQUFDLElBRUFELEVBQUE2RSxlQUFBN0UsS0FBQXpHLEdBQ0ErZCxFQUFBdFgsR0FHQSxJQUFBZ0ksRUFBQTBRLEVBQUFPLFdBQUFoWixFQUFBQyxlQUVBdEcsRUFBQW9PLEdBQUFvTSxFQUFBM1QsS0FBQWlZLEVBQUFPLFdBQUFoWixFQUFBQyxlQUNBOEgsRUFBQWhJLEVBQUFDLEdBQUFzWCxRQUNBL1UsRUFFQSxZQUFBQSxJQUFBNUksRUFDQUEsRUFDQXlRLEVBQUFnVSxhQUFBOUcsRUFDQXZYLEVBQUFzRCxhQUFBckQsSUFDQXJHLEVBQUFvRyxFQUFBa2hCLGlCQUFBamhCLEtBQUFyRyxFQUFBd29CLFVBQ0F4b0IsRUFBQUQsTUFDQSxNQUdBbWQsRUFBQXVMLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBLElBQUFsZixRQUFBMFUsR0FBQUMsS0FHQWpCLEVBQUE1YyxNQUFBLFNBQUF5YixHQUNBLE1BQUEsSUFBQTlXLE1BQUEsMENBQUE4VyxJQU9BbUIsRUFBQXdHLFdBQUEsU0FBQWhILEdBQ0EsSUFBQXRXLEVBQ0F1aUIsS0FDQS9iLEVBQUEsRUFDQTVKLEVBQUEsRUFPQSxHQUpBOGdCLEdBQUFyVCxFQUFBbVksaUJBQ0EvRSxHQUFBcFQsRUFBQW9ZLFlBQUFuTSxFQUFBN1QsTUFBQSxHQUNBNlQsRUFBQWpCLEtBQUEwSSxHQUVBTCxFQUFBLENBQ0EsS0FBQTFkLEVBQUFzVyxFQUFBMVosTUFDQW9ELElBQUFzVyxFQUFBMVosS0FDQTRKLEVBQUErYixFQUFBaG1CLEtBQUFLLElBR0EsS0FBQTRKLEtBQ0E4UCxFQUFBelosT0FBQTBsQixFQUFBL2IsR0FBQSxHQVFBLE9BRkFpWCxFQUFBLEtBRUFuSCxHQU9BaUgsRUFBQXpHLEVBQUF5RyxRQUFBLFNBQUF2ZCxHQUNBLElBQUFtSyxFQUNBMUUsRUFBQSxHQUNBN0ksRUFBQSxFQUNBOEQsRUFBQVYsRUFBQVUsU0FFQSxHQUFBQSxHQU1BLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxHQUFBLEtBQUFBLEVBQUEsQ0FHQSxHQUFBLGlCQUFBVixFQUFBcUgsWUFDQSxPQUFBckgsRUFBQXFILFlBR0EsSUFBQXJILEVBQUFBLEVBQUFvSCxXQUFBcEgsRUFBQUEsRUFBQUEsRUFBQXVaLFlBQ0E5VCxHQUFBOFgsRUFBQXZkLFFBR0EsR0FBQSxJQUFBVSxHQUFBLElBQUFBLEVBQ0EsT0FBQVYsRUFBQTBpQixlQWhCQSxLQUFBdlksRUFBQW5LLEVBQUFwRCxNQUVBNkksR0FBQThYLEVBQUFwVCxHQWtCQSxPQUFBMUUsSUFHQWlULEVBQUE1QixFQUFBNkwsV0FHQWhLLFlBQUEsR0FFQWlLLGFBQUFoSyxFQUVBdFgsTUFBQXdkLEdBRUE3RixjQUVBa0UsUUFFQWYsVUFDQXlHLEtBQUE1aEIsSUFBQSxhQUFBbkQsT0FBQSxHQUNBZ2xCLEtBQUE3aEIsSUFBQSxjQUNBOGhCLEtBQUE5aEIsSUFBQSxrQkFBQW5ELE9BQUEsR0FDQWtsQixLQUFBL2hCLElBQUEsb0JBR0F1YSxXQUNBMEQsS0FBQSxTQUFBNWQsR0FVQSxPQVRBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQThCLFFBQUFzYyxHQUFBQyxJQUdBcmUsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBLElBQUE4QixRQUFBc2MsR0FBQUMsSUFFQSxPQUFBcmUsRUFBQSxLQUNBQSxFQUFBLEdBQUEsSUFBQUEsRUFBQSxHQUFBLEtBR0FBLEVBQUFtQixNQUFBLEVBQUEsSUFHQTJjLE1BQUEsU0FBQTlkLEdBNkJBLE9BbEJBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQXBCLGNBRUEsUUFBQW9CLEVBQUEsR0FBQW1CLE1BQUEsRUFBQSxJQUVBbkIsRUFBQSxJQUNBd1YsRUFBQTVjLE1BQUFvSCxFQUFBLElBS0FBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxHQUFBLEdBQUEsU0FBQUEsRUFBQSxJQUFBLFFBQUFBLEVBQUEsS0FDQUEsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQSxRQUFBQSxFQUFBLEtBR0FBLEVBQUEsSUFDQXdWLEVBQUE1YyxNQUFBb0gsRUFBQSxJQUdBQSxHQUdBNmQsT0FBQSxTQUFBN2QsR0FDQSxJQUFBMmhCLEVBQ0FDLEdBQUE1aEIsRUFBQSxJQUFBQSxFQUFBLEdBRUEsT0FBQXdkLEdBQUEsTUFBQWplLEtBQUFTLEVBQUEsSUFDQSxNQUlBQSxFQUFBLEdBQ0FBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUEsR0FHQTRoQixHQUFBdEUsR0FBQS9kLEtBQUFxaUIsS0FFQUQsRUFBQWhMLEVBQUFpTCxHQUFBLE1BRUFELEVBQUFDLEVBQUF2aUIsUUFBQSxJQUFBdWlCLEVBQUFqbkIsT0FBQWduQixHQUFBQyxFQUFBam5CLFVBR0FxRixFQUFBLEdBQUFBLEVBQUEsR0FBQW1CLE1BQUEsRUFBQXdnQixHQUNBM2hCLEVBQUEsR0FBQTRoQixFQUFBemdCLE1BQUEsRUFBQXdnQixJQUlBM2hCLEVBQUFtQixNQUFBLEVBQUEsTUFJQTNCLFFBRUFtZSxJQUFBLFNBQUFrRSxHQUNBLElBQUFwakIsRUFBQW9qQixFQUFBL2YsUUFBQXNjLEdBQUFDLElBQUF6ZixjQUNBLE1BQUEsTUFBQWlqQixFQUNBLFdBQUEsT0FBQSxHQUNBLFNBQUFuakIsR0FDQSxPQUFBQSxFQUFBRCxVQUFBQyxFQUFBRCxTQUFBRyxnQkFBQUgsSUFJQWlmLE1BQUEsU0FBQTZCLEdBQ0EsSUFBQXVDLEVBQUF2RixFQUFBZ0QsRUFBQSxLQUVBLE9BQUF1QyxJQUNBQSxFQUFBLElBQUE1RSxPQUFBLE1BQUFMLEdBQUEsSUFBQTBDLEVBQUEsSUFBQTFDLEdBQUEsU0FDQU4sRUFBQWdELEVBQUEsU0FBQTdnQixHQUNBLE9BQUFvakIsRUFBQXZpQixLQUFBLGlCQUFBYixFQUFBNmdCLFdBQUE3Z0IsRUFBQTZnQixnQkFBQSxJQUFBN2dCLEVBQUFzRCxjQUFBdEQsRUFBQXNELGFBQUEsVUFBQSxPQUlBNGIsS0FBQSxTQUFBamYsRUFBQW9qQixFQUFBQyxHQUNBLE9BQUEsU0FBQXRqQixHQUNBLElBQUFnUCxFQUFBOEgsRUFBQXFMLEtBQUFuaUIsRUFBQUMsR0FFQSxPQUFBLE1BQUErTyxFQUNBLE9BQUFxVSxHQUVBQSxJQUlBclUsR0FBQSxHQUVBLE1BQUFxVSxFQUFBclUsSUFBQXNVLEVBQ0EsT0FBQUQsRUFBQXJVLElBQUFzVSxFQUNBLE9BQUFELEVBQUFDLEdBQUEsSUFBQXRVLEVBQUFyTyxRQUFBMmlCLEdBQ0EsT0FBQUQsRUFBQUMsR0FBQXRVLEVBQUFyTyxRQUFBMmlCLElBQUEsRUFDQSxPQUFBRCxFQUFBQyxHQUFBdFUsRUFBQXZNLE9BQUE2Z0IsRUFBQXJuQixVQUFBcW5CLEVBQ0EsT0FBQUQsR0FBQSxJQUFBclUsRUFBQTVMLFFBQUFtYixHQUFBLEtBQUEsS0FBQTVkLFFBQUEyaUIsSUFBQSxFQUNBLE9BQUFELElBQUFyVSxJQUFBc1UsR0FBQXRVLEVBQUF2TSxNQUFBLEVBQUE2Z0IsRUFBQXJuQixPQUFBLEtBQUFxbkIsRUFBQSxRQUtBbEUsTUFBQSxTQUFBeGYsRUFBQTJqQixFQUFBMUosRUFBQS9iLEVBQUFHLEdBQ0EsSUFBQXVsQixFQUFBLFFBQUE1akIsRUFBQTZDLE1BQUEsRUFBQSxHQUNBZ2hCLEVBQUEsU0FBQTdqQixFQUFBNkMsT0FBQSxHQUNBaWhCLEVBQUEsWUFBQUgsRUFFQSxPQUFBLElBQUF6bEIsR0FBQSxJQUFBRyxFQUdBLFNBQUErQixHQUNBLFFBQUFBLEVBQUFSLFlBR0EsU0FBQVEsRUFBQWxFLEVBQUEwZSxHQUNBLElBQUFoQyxFQUFBa0MsRUFBQUMsRUFBQXhRLEVBQUF3WixFQUFBbGYsRUFDQXhELEVBQUF1aUIsSUFBQUMsRUFBQSxjQUFBLGtCQUNBRyxFQUFBNWpCLEVBQUFSLFdBQ0FTLEVBQUF5akIsR0FBQTFqQixFQUFBRCxTQUFBRyxjQUNBMmpCLEdBQUFySixJQUFBa0osRUFDQXJLLEdBQUEsRUFFQSxHQUFBdUssRUFBQSxDQUdBLEdBQUFKLEVBQUEsQ0FDQSxLQUFBdmlCLEdBQUEsQ0FFQSxJQURBa0osRUFBQW5LLEVBQ0FtSyxFQUFBQSxFQUFBbEosSUFDQSxHQUFBeWlCLEVBQ0F2WixFQUFBcEssU0FBQUcsZ0JBQUFELEVBQ0EsSUFBQWtLLEVBQUF6SixTQUVBLE9BQUEsRUFJQStELEVBQUF4RCxFQUFBLFNBQUFyQixJQUFBNkUsR0FBQSxjQUVBLE9BQUEsRUFNQSxHQUhBQSxHQUFBZ2YsRUFBQUcsRUFBQXhjLFdBQUF3YyxFQUFBMWMsV0FHQXVjLEdBQUFJLEdBa0JBLElBSEF4SyxHQURBc0ssR0FEQW5MLEdBSEFrQyxHQUpBQyxHQURBeFEsRUFBQXlaLEdBQ0E5Z0IsS0FBQXFILEVBQUFySCxRQUlBcUgsRUFBQTJRLFlBQ0FILEVBQUF4USxFQUFBMlEsZUFFQWxiLFFBQ0EsS0FBQWliLEdBQUFyQyxFQUFBLEtBQ0FBLEVBQUEsR0FDQXJPLEVBQUF3WixHQUFBQyxFQUFBemMsV0FBQXdjLEdBRUF4WixJQUFBd1osR0FBQXhaLEdBQUFBLEVBQUFsSixLQUdBb1ksRUFBQXNLLEVBQUEsSUFBQWxmLEVBQUE0WSxPQUdBLEdBQUEsSUFBQWxULEVBQUF6SixZQUFBMlksR0FBQWxQLElBQUFuSyxFQUFBLENBQ0EwYSxFQUFBOWEsSUFBQWliLEVBQUE4SSxFQUFBdEssR0FDQSxZQXVCQSxHQWpCQXdLLElBWUF4SyxFQURBc0ssR0FEQW5MLEdBSEFrQyxHQUpBQyxHQURBeFEsRUFBQW5LLEdBQ0E4QyxLQUFBcUgsRUFBQXJILFFBSUFxSCxFQUFBMlEsWUFDQUgsRUFBQXhRLEVBQUEyUSxlQUVBbGIsUUFDQSxLQUFBaWIsR0FBQXJDLEVBQUEsS0FNQSxJQUFBYSxFQUVBLE1BQUFsUCxJQUFBd1osR0FBQXhaLEdBQUFBLEVBQUFsSixLQUNBb1ksRUFBQXNLLEVBQUEsSUFBQWxmLEVBQUE0WSxVQUVBcUcsRUFDQXZaLEVBQUFwSyxTQUFBRyxnQkFBQUQsRUFDQSxJQUFBa0ssRUFBQXpKLGNBQ0EyWSxJQUdBd0ssS0FLQW5KLEdBSkFDLEVBQUF4USxFQUFBckgsS0FBQXFILEVBQUFySCxRQUlBcUgsRUFBQTJRLFlBQ0FILEVBQUF4USxFQUFBMlEsZUFFQWxiLElBQUFpYixFQUFBeEIsSUFHQWxQLElBQUFuSyxNQVVBLE9BREFxWixHQUFBcGIsS0FDQUgsR0FBQXViLEVBQUF2YixHQUFBLEdBQUF1YixFQUFBdmIsR0FBQSxLQUtBcWhCLE9BQUEsU0FBQTJFLEVBQUFqSyxHQUtBLElBQUE5UCxFQUNBL0IsRUFBQTBRLEVBQUE0RixRQUFBd0YsSUFBQXBMLEVBQUFxQixXQUFBK0osRUFBQTVqQixnQkFDQTRXLEVBQUE1YyxNQUFBLHVCQUFBNHBCLEdBS0EsT0FBQTliLEVBQUFsRixHQUNBa0YsRUFBQTZSLEdBSUE3UixFQUFBL0wsT0FBQSxHQUNBOE4sR0FBQStaLEVBQUFBLEVBQUEsR0FBQWpLLEdBQ0FuQixFQUFBcUIsV0FBQTFGLGVBQUF5UCxFQUFBNWpCLGVBQ0EwWSxFQUFBLFNBQUE3QixFQUFBM0ssR0FJQSxJQUhBLElBQUEyWCxFQUNBQyxFQUFBaGMsRUFBQStPLEVBQUE4QyxHQUNBamQsRUFBQW9uQixFQUFBL25CLE9BQ0FXLEtBRUFtYSxFQURBZ04sRUFBQXBqQixFQUFBb1csRUFBQWlOLEVBQUFwbkIsT0FDQXdQLEVBQUEyWCxHQUFBQyxFQUFBcG5CLE1BR0EsU0FBQW9ELEdBQ0EsT0FBQWdJLEVBQUFoSSxFQUFBLEVBQUErSixLQUlBL0IsSUFJQXNXLFNBRUFoZSxJQUFBc1ksRUFBQSxTQUFBN1EsR0FJQSxJQUFBb1osS0FDQTdLLEtBQ0E0RCxFQUFBMWUsRUFBQXVNLEVBQUEzRSxRQUFBb1IsR0FBQSxPQUVBLE9BQUEwRixFQUFBcFgsR0FDQThWLEVBQUEsU0FBQTdCLEVBQUEzSyxFQUFBdFEsRUFBQTBlLEdBTUEsSUFMQSxJQUFBeGEsRUFDQW9iLEVBQUFsQixFQUFBbkQsRUFBQSxLQUFBeUQsTUFDQTVkLEVBQUFtYSxFQUFBOWEsT0FHQVcsTUFDQW9ELEVBQUFvYixFQUFBeGUsTUFDQW1hLEVBQUFuYSxLQUFBd1AsRUFBQXhQLEdBQUFvRCxNQUlBLFNBQUFBLEVBQUFsRSxFQUFBMGUsR0FLQSxPQUpBMkcsRUFBQSxHQUFBbmhCLEVBQ0FrYSxFQUFBaUgsRUFBQSxLQUFBM0csRUFBQWxFLEdBRUE2SyxFQUFBLEdBQUEsTUFDQTdLLEVBQUErRyxTQUlBNEcsSUFBQXJMLEVBQUEsU0FBQTdRLEdBQ0EsT0FBQSxTQUFBL0gsR0FDQSxPQUFBOFcsRUFBQS9PLEVBQUEvSCxHQUFBL0QsT0FBQSxLQUlBc0ssU0FBQXFTLEVBQUEsU0FBQXZaLEdBRUEsT0FEQUEsRUFBQUEsRUFBQStELFFBQUFzYyxHQUFBQyxJQUNBLFNBQUEzZixHQUNBLE9BQUFBLEVBQUFxSCxhQUFBckgsRUFBQWtrQixXQUFBM0csRUFBQXZkLElBQUFXLFFBQUF0QixJQUFBLEtBV0E4a0IsS0FBQXZMLEVBQUEsU0FBQXVMLEdBTUEsT0FKQXRGLEdBQUFoZSxLQUFBc2pCLEdBQUEsS0FDQXJOLEVBQUE1YyxNQUFBLHFCQUFBaXFCLEdBRUFBLEVBQUFBLEVBQUEvZ0IsUUFBQXNjLEdBQUFDLElBQUF6ZixjQUNBLFNBQUFGLEdBQ0EsSUFBQW9rQixFQUNBLEdBQ0EsR0FBQUEsRUFBQTdNLEVBQ0F2WCxFQUFBbWtCLEtBQ0Fua0IsRUFBQXNELGFBQUEsYUFBQXRELEVBQUFzRCxhQUFBLFFBR0EsT0FEQThnQixFQUFBQSxFQUFBbGtCLGlCQUNBaWtCLEdBQUEsSUFBQUMsRUFBQXpqQixRQUFBd2pCLEVBQUEsWUFFQW5rQixFQUFBQSxFQUFBUixhQUFBLElBQUFRLEVBQUFVLFVBQ0EsT0FBQSxLQUtBMFIsT0FBQSxTQUFBcFMsR0FDQSxJQUFBcWtCLEVBQUF2bEIsRUFBQXdsQixVQUFBeGxCLEVBQUF3bEIsU0FBQUQsS0FDQSxPQUFBQSxHQUFBQSxFQUFBNWhCLE1BQUEsS0FBQXpDLEVBQUF2RixJQUdBOHBCLEtBQUEsU0FBQXZrQixHQUNBLE9BQUFBLElBQUEyZCxHQUdBNkcsTUFBQSxTQUFBeGtCLEdBQ0EsT0FBQUEsSUFBQXpHLEVBQUFxTyxpQkFBQXJPLEVBQUFrckIsVUFBQWxyQixFQUFBa3JCLGdCQUFBemtCLEVBQUFKLE1BQUFJLEVBQUEwa0IsT0FBQTFrQixFQUFBMmtCLFdBSUFDLFFBQUFwTCxHQUFBLEdBQ0FDLFNBQUFELEdBQUEsR0FFQTdQLFFBQUEsU0FBQTNKLEdBR0EsSUFBQUQsRUFBQUMsRUFBQUQsU0FBQUcsY0FDQSxNQUFBLFVBQUFILEtBQUFDLEVBQUEySixTQUFBLFdBQUE1SixLQUFBQyxFQUFBNlIsVUFHQUEsU0FBQSxTQUFBN1IsR0FPQSxPQUpBQSxFQUFBUixZQUNBUSxFQUFBUixXQUFBcWxCLGVBR0EsSUFBQTdrQixFQUFBNlIsVUFJQWlULE1BQUEsU0FBQTlrQixHQUtBLElBQUFBLEVBQUFBLEVBQUFvSCxXQUFBcEgsRUFBQUEsRUFBQUEsRUFBQXVaLFlBQ0EsR0FBQXZaLEVBQUFVLFNBQUEsRUFDQSxPQUFBLEVBR0EsT0FBQSxHQUdBa2pCLE9BQUEsU0FBQTVqQixHQUNBLE9BQUEwWSxFQUFBNEYsUUFBQSxNQUFBdGUsSUFJQStrQixPQUFBLFNBQUEva0IsR0FDQSxPQUFBd2YsR0FBQTNlLEtBQUFiLEVBQUFELFdBR0FvaEIsTUFBQSxTQUFBbmhCLEdBQ0EsT0FBQXVmLEdBQUExZSxLQUFBYixFQUFBRCxXQUdBMUMsT0FBQSxTQUFBMkMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBRCxTQUFBRyxjQUNBLE1BQUEsVUFBQUQsR0FBQSxXQUFBRCxFQUFBSixNQUFBLFdBQUFLLEdBR0FaLEtBQUEsU0FBQVcsR0FDQSxJQUFBbWlCLEVBQ0EsTUFBQSxVQUFBbmlCLEVBQUFELFNBQUFHLGVBQ0EsU0FBQUYsRUFBQUosT0FJQSxPQUFBdWlCLEVBQUFuaUIsRUFBQXNELGFBQUEsVUFBQSxTQUFBNmUsRUFBQWppQixnQkFJQXBDLE1BQUE4YixFQUFBLFdBQ0EsT0FBQSxLQUdBM2IsS0FBQTJiLEVBQUEsU0FBQUUsRUFBQTdkLEdBQ0EsT0FBQUEsRUFBQSxLQUdBdU8sR0FBQW9QLEVBQUEsU0FBQUUsRUFBQTdkLEVBQUE0ZCxHQUNBLE9BQUFBLEVBQUEsRUFBQUEsRUFBQTVkLEVBQUE0ZCxLQUdBbUwsS0FBQXBMLEVBQUEsU0FBQUUsRUFBQTdkLEdBRUEsSUFEQSxJQUFBVyxFQUFBLEVBQ0FBLEVBQUFYLEVBQUFXLEdBQUEsRUFDQWtkLEVBQUF2ZCxLQUFBSyxHQUVBLE9BQUFrZCxJQUdBbUwsSUFBQXJMLEVBQUEsU0FBQUUsRUFBQTdkLEdBRUEsSUFEQSxJQUFBVyxFQUFBLEVBQ0FBLEVBQUFYLEVBQUFXLEdBQUEsRUFDQWtkLEVBQUF2ZCxLQUFBSyxHQUVBLE9BQUFrZCxJQUdBb0wsR0FBQXRMLEVBQUEsU0FBQUUsRUFBQTdkLEVBQUE0ZCxHQUVBLElBREEsSUFBQWpkLEVBQUFpZCxFQUFBLEVBQUFBLEVBQUE1ZCxFQUFBNGQsSUFDQWpkLEdBQUEsR0FDQWtkLEVBQUF2ZCxLQUFBSyxHQUVBLE9BQUFrZCxJQUdBcUwsR0FBQXZMLEVBQUEsU0FBQUUsRUFBQTdkLEVBQUE0ZCxHQUVBLElBREEsSUFBQWpkLEVBQUFpZCxFQUFBLEVBQUFBLEVBQUE1ZCxFQUFBNGQsSUFDQWpkLEVBQUFYLEdBQ0E2ZCxFQUFBdmQsS0FBQUssR0FFQSxPQUFBa2QsT0FLQXdFLFFBQUEsSUFBQTVGLEVBQUE0RixRQUFBLEdBR0EsSUFBQTFoQixLQUFBd29CLE9BQUEsRUFBQUMsVUFBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQS9vQixPQUFBLEdBQ0FrYyxFQUFBNEYsUUFBQTFoQixHQXhwQ0EsU0FBQWdELEdBQ0EsT0FBQSxTQUFBSSxHQUVBLE1BQUEsVUFEQUEsRUFBQUQsU0FBQUcsZUFDQUYsRUFBQUosT0FBQUEsSUFxcENBaEQsR0FFQSxJQUFBQSxLQUFBNG9CLFFBQUEsRUFBQUMsT0FBQSxHQUNBL00sRUFBQTRGLFFBQUExaEIsR0FocENBLFNBQUFnRCxHQUNBLE9BQUEsU0FBQUksR0FDQSxJQUFBQyxFQUFBRCxFQUFBRCxTQUFBRyxjQUNBLE9BQUEsVUFBQUQsR0FBQSxXQUFBQSxJQUFBRCxFQUFBSixPQUFBQSxJQTZvQ0FoRCxHQW1uQkEsT0E5bUJBbWQsRUFBQTdNLFVBQUF3TCxFQUFBZ04sUUFBQWhOLEVBQUE0RixRQUNBNUYsRUFBQXFCLFdBQUEsSUFBQUEsRUFFQTlCLEVBQUFuQixFQUFBbUIsU0FBQSxTQUFBbFEsRUFBQTRkLEdBQ0EsSUFBQTNCLEVBQUExaUIsRUFBQTBZLEVBQUFwYSxFQUNBZ21CLEVBQUExTyxFQUFBMk8sRUFDQUMsRUFBQWhJLEVBQUEvVixFQUFBLEtBRUEsR0FBQStkLEVBQ0EsT0FBQUgsRUFBQSxFQUFBRyxFQUFBcmpCLE1BQUEsR0FPQSxJQUpBbWpCLEVBQUE3ZCxFQUNBbVAsS0FDQTJPLEVBQUFuTixFQUFBOEMsVUFFQW9LLEdBQUEsQ0FHQTVCLEtBQUExaUIsRUFBQW1kLEdBQUFsYSxLQUFBcWhCLE1BQ0F0a0IsSUFFQXNrQixFQUFBQSxFQUFBbmpCLE1BQUFuQixFQUFBLEdBQUFyRixTQUFBMnBCLEdBRUExTyxFQUFBM2EsS0FBQXlkLE9BR0FnSyxHQUFBLEdBR0ExaUIsRUFBQW9kLEdBQUFuYSxLQUFBcWhCLE1BQ0E1QixFQUFBMWlCLEVBQUF5UixRQUNBaUgsRUFBQXpkLE1BQ0E1QyxNQUFBcXFCLEVBRUFwa0IsS0FBQTBCLEVBQUEsR0FBQThCLFFBQUFvUixHQUFBLE9BRUFvUixFQUFBQSxFQUFBbmpCLE1BQUF1aEIsRUFBQS9uQixTQUlBLElBQUEyRCxLQUFBOFksRUFBQTVYLFNBQ0FRLEVBQUF3ZCxHQUFBbGYsR0FBQTJFLEtBQUFxaEIsS0FBQUMsRUFBQWptQixNQUNBMEIsRUFBQXVrQixFQUFBam1CLEdBQUEwQixNQUNBMGlCLEVBQUExaUIsRUFBQXlSLFFBQ0FpSCxFQUFBemQsTUFDQTVDLE1BQUFxcUIsRUFDQXBrQixLQUFBQSxFQUNBd00sUUFBQTlLLElBRUFza0IsRUFBQUEsRUFBQW5qQixNQUFBdWhCLEVBQUEvbkIsU0FJQSxJQUFBK25CLEVBQ0EsTUFPQSxPQUFBMkIsRUFDQUMsRUFBQTNwQixPQUNBMnBCLEVBQ0E5TyxFQUFBNWMsTUFBQTZOLEdBRUErVixFQUFBL1YsRUFBQW1QLEdBQUF6VSxNQUFBLElBK1hBakgsRUFBQXNiLEVBQUF0YixRQUFBLFNBQUF1TSxFQUFBekcsR0FDQSxJQUFBMUUsRUFDQStmLEtBQ0FELEtBQ0FvSixFQUFBbE8sRUFBQTdQLEVBQUEsS0FFQSxJQUFBK2QsRUFBQSxDQU1BLElBSkF4a0IsSUFDQUEsRUFBQTJXLEVBQUFsUSxJQUVBbkwsRUFBQTBFLEVBQUFyRixPQUNBVyxNQUNBa3BCLEVBQUE3SixFQUFBM2EsRUFBQTFFLEtBQ0FrRyxHQUNBNlosRUFBQXBnQixLQUFBdXBCLEdBRUFwSixFQUFBbmdCLEtBQUF1cEIsSUFLQUEsRUFBQWxPLEVBQUE3UCxFQUFBMFUsRUFBQUMsRUFBQUMsS0FHQTVVLFNBQUFBLEVBRUEsT0FBQStkLEdBWUF4TixFQUFBeEIsRUFBQXdCLE9BQUEsU0FBQXZRLEVBQUFqTSxFQUFBd2EsRUFBQVMsR0FDQSxJQUFBbmEsRUFBQW9kLEVBQUErTCxFQUFBbm1CLEVBQUF1ZCxFQUNBNkksRUFBQSxtQkFBQWplLEdBQUFBLEVBQ0F6RyxHQUFBeVYsR0FBQWtCLEVBQUFsUSxFQUFBaWUsRUFBQWplLFVBQUFBLEdBTUEsR0FKQXVPLEVBQUFBLE1BSUEsSUFBQWhWLEVBQUFyRixPQUFBLENBSUEsSUFEQStkLEVBQUExWSxFQUFBLEdBQUFBLEVBQUEsR0FBQW1CLE1BQUEsSUFDQXhHLE9BQUEsR0FBQSxRQUFBOHBCLEVBQUEvTCxFQUFBLElBQUFwYSxNQUNBLElBQUE5RCxFQUFBNEUsVUFBQTZXLEdBQUFtQixFQUFBMEQsU0FBQXBDLEVBQUEsR0FBQXBhLE1BQUEsQ0FHQSxLQURBOUQsR0FBQTRjLEVBQUF5RSxLQUFBLEdBQUE0SSxFQUFBM1osUUFBQSxHQUFBaEosUUFBQXNjLEdBQUFDLElBQUE3akIsUUFBQSxJQUVBLE9BQUF3YSxFQUdBMFAsSUFDQWxxQixFQUFBQSxFQUFBMEQsWUFHQXVJLEVBQUFBLEVBQUF0RixNQUFBdVgsRUFBQWpILFFBQUFwWixNQUFBc0MsUUFLQSxJQURBVyxFQUFBa2lCLEdBQUEsYUFBQWplLEtBQUFrSCxHQUFBLEVBQUFpUyxFQUFBL2QsT0FDQVcsTUFDQW1wQixFQUFBL0wsRUFBQXBkLElBR0E4YixFQUFBMEQsU0FBQXhjLEVBQUFtbUIsRUFBQW5tQixRQUdBLElBQUF1ZCxFQUFBekUsRUFBQXlFLEtBQUF2ZCxNQUVBbVgsRUFBQW9HLEVBQ0E0SSxFQUFBM1osUUFBQSxHQUFBaEosUUFBQXNjLEdBQUFDLElBQ0F4SCxHQUFBdFgsS0FBQW1aLEVBQUEsR0FBQXBhLE9BQUF3WSxFQUFBdGMsRUFBQTBELGFBQUExRCxJQUNBLENBS0EsR0FGQWtlLEVBQUFuZCxPQUFBRCxFQUFBLEtBQ0FtTCxFQUFBZ1AsRUFBQTlhLFFBQUFpYyxFQUFBOEIsSUFHQSxPQURBemQsRUFBQWdHLE1BQUErVCxFQUFBUyxHQUNBVCxFQUdBLE9BZUEsT0FQQTBQLEdBQUF4cUIsRUFBQXVNLEVBQUF6RyxJQUNBeVYsRUFDQWpiLEdBQ0F5YixFQUNBakIsR0FDQXhhLEdBQUFxYyxHQUFBdFgsS0FBQWtILElBQUFxUSxFQUFBdGMsRUFBQTBELGFBQUExRCxHQUVBd2EsR0FNQWpNLEVBQUFvWSxXQUFBM2YsRUFBQTZRLE1BQUEsSUFBQTBCLEtBQUEwSSxHQUFBbE4sS0FBQSxNQUFBL04sRUFJQXVILEVBQUFtWSxtQkFBQTlFLEVBR0FwRyxJQUlBak4sRUFBQXlYLGFBQUFqSixFQUFBLFNBQUFDLEdBRUEsT0FBQSxFQUFBQSxFQUFBNEksd0JBQUFub0IsRUFBQTZGLGNBQUEsZUFNQXlaLEVBQUEsU0FBQUMsR0FFQSxPQURBQSxFQUFBOVIsVUFBQSxtQkFDQSxNQUFBOFIsRUFBQTFSLFdBQUE5RCxhQUFBLFdBRUF5VixFQUFBLHlCQUFBLFNBQUEvWSxFQUFBQyxFQUFBdWQsR0FDQSxJQUFBQSxFQUNBLE9BQUF4ZCxFQUFBc0QsYUFBQXJELEVBQUEsU0FBQUEsRUFBQUMsY0FBQSxFQUFBLEtBT0FtSyxFQUFBZ1UsWUFBQXhGLEVBQUEsU0FBQUMsR0FHQSxPQUZBQSxFQUFBOVIsVUFBQSxXQUNBOFIsRUFBQTFSLFdBQUE0USxhQUFBLFFBQUEsSUFDQSxLQUFBYyxFQUFBMVIsV0FBQTlELGFBQUEsWUFFQXlWLEVBQUEsUUFBQSxTQUFBL1ksRUFBQUMsRUFBQXVkLEdBQ0EsSUFBQUEsR0FBQSxVQUFBeGQsRUFBQUQsU0FBQUcsY0FDQSxPQUFBRixFQUFBNEosZUFPQWlQLEVBQUEsU0FBQUMsR0FDQSxPQUFBLE1BQUFBLEVBQUF4VixhQUFBLGVBRUF5VixFQUFBbUYsRUFBQSxTQUFBbGUsRUFBQUMsRUFBQXVkLEdBQ0EsSUFBQTVqQixFQUNBLElBQUE0akIsRUFDQSxPQUFBLElBQUF4ZCxFQUFBQyxHQUFBQSxFQUFBQyxlQUNBdEcsRUFBQW9HLEVBQUFraEIsaUJBQUFqaEIsS0FBQXJHLEVBQUF3b0IsVUFDQXhvQixFQUFBRCxNQUNBLE9BS0FtZCxHQUVBaFksR0FJQWUsR0FBQXNkLEtBQUFyRyxHQUNBalgsR0FBQXFpQixLQUFBcEwsR0FBQTZMLFVBR0E5aUIsR0FBQXFpQixLQUFBLEtBQUFyaUIsR0FBQXFpQixLQUFBNUQsUUFDQXplLEdBQUF5ZCxXQUFBemQsR0FBQW9tQixPQUFBblAsR0FBQXdHLFdBQ0F6ZCxHQUFBUixLQUFBeVgsR0FBQXlHLFFBQ0ExZCxHQUFBcW1CLFNBQUFwUCxHQUFBMEcsTUFDQTNkLEdBQUEwRyxTQUFBdVEsR0FBQXZRLFNBQ0ExRyxHQUFBc21CLGVBQUFyUCxHQUFBdUwsT0FLQSxJQUFBcGhCLEdBQUEsU0FBQWpCLEVBQUFpQixFQUFBbWxCLEdBSUEsSUFIQSxJQUFBcEMsS0FDQXFDLE9BQUE3akIsSUFBQTRqQixHQUVBcG1CLEVBQUFBLEVBQUFpQixLQUFBLElBQUFqQixFQUFBVSxVQUNBLEdBQUEsSUFBQVYsRUFBQVUsU0FBQSxDQUNBLEdBQUEybEIsR0FBQXhtQixHQUFBRyxHQUFBc21CLEdBQUFGLEdBQ0EsTUFFQXBDLEVBQUF6bkIsS0FBQXlELEdBR0EsT0FBQWdrQixHQUlBam1CLEdBQUEsU0FBQXdvQixFQUFBdm1CLEdBR0EsSUFGQSxJQUFBZ2tCLEtBRUF1QyxFQUFBQSxFQUFBQSxFQUFBaE4sWUFDQSxJQUFBZ04sRUFBQTdsQixVQUFBNmxCLElBQUF2bUIsR0FDQWdrQixFQUFBem5CLEtBQUFncUIsR0FJQSxPQUFBdkMsR0FJQXdDLEdBQUEzbUIsR0FBQXFpQixLQUFBNWdCLE1BQUFnZSxhQVNBbUgsR0FBQSxrRUFJQTdsQixHQUFBLGlCQW9DQWYsR0FBQWlCLE9BQUEsU0FBQW9oQixFQUFBcGMsRUFBQXhGLEdBQ0EsSUFBQU4sRUFBQThGLEVBQUEsR0FNQSxPQUpBeEYsSUFDQTRoQixFQUFBLFFBQUFBLEVBQUEsS0FHQSxJQUFBcGMsRUFBQTdKLFFBQUEsSUFBQStELEVBQUFVLFNBQ0FiLEdBQUFzZCxLQUFBaUUsZ0JBQUFwaEIsRUFBQWtpQixJQUFBbGlCLE1BR0FILEdBQUFzZCxLQUFBL1EsUUFBQThWLEVBQUFyaUIsR0FBQVcsS0FBQXNGLEVBQUEsU0FBQTlGLEdBQ0EsT0FBQSxJQUFBQSxFQUFBVSxhQUlBYixHQUFBbUksR0FBQXdCLFFBQ0EyVCxLQUFBLFNBQUFwVixHQUNBLElBQUFuTCxFQUFBNkksRUFDQTJQLEVBQUF6YSxLQUFBc0IsT0FDQWMsRUFBQXBDLEtBRUEsR0FBQSxpQkFBQW9OLEVBQ0EsT0FBQXBOLEtBQUF1YSxVQUFBclYsR0FBQWtJLEdBQUFqSCxPQUFBLFdBQ0EsSUFBQWxFLEVBQUEsRUFBQUEsRUFBQXdZLEVBQUF4WSxJQUNBLEdBQUFpRCxHQUFBMEcsU0FBQXhKLEVBQUFILEdBQUFqQyxNQUNBLE9BQUEsS0FRQSxJQUZBOEssRUFBQTlLLEtBQUF1YSxjQUVBdFksRUFBQSxFQUFBQSxFQUFBd1ksRUFBQXhZLElBQ0FpRCxHQUFBc2QsS0FBQXBWLEVBQUFoTCxFQUFBSCxHQUFBNkksR0FHQSxPQUFBMlAsRUFBQSxFQUFBdlYsR0FBQXlkLFdBQUE3WCxHQUFBQSxHQUVBM0UsT0FBQSxTQUFBaUgsR0FDQSxPQUFBcE4sS0FBQXVhLFVBQUEvVSxFQUFBeEYsS0FBQW9OLE9BQUEsS0FFQXpILElBQUEsU0FBQXlILEdBQ0EsT0FBQXBOLEtBQUF1YSxVQUFBL1UsRUFBQXhGLEtBQUFvTixPQUFBLEtBRUF1ZSxHQUFBLFNBQUF2ZSxHQUNBLFFBQUE1SCxFQUNBeEYsS0FJQSxpQkFBQW9OLEdBQUF5ZSxHQUFBM2xCLEtBQUFrSCxHQUNBbEksR0FBQWtJLEdBQ0FBLE9BQ0EsR0FDQTlMLFVBU0EsSUFBQXlxQixHQU1BbFAsR0FBQSx1Q0FFQTNYLEdBQUFtSSxHQUFBL00sS0FBQSxTQUFBOE0sRUFBQWpNLEVBQUF5b0IsR0FDQSxJQUFBampCLEVBQUF0QixFQUdBLElBQUErSCxFQUNBLE9BQUFwTixLQVFBLEdBSEE0cEIsRUFBQUEsR0FBQW1DLEdBR0EsaUJBQUEzZSxFQUFBLENBYUEsS0FQQXpHLEVBTEEsTUFBQXlHLEVBQUEsSUFDQSxNQUFBQSxFQUFBQSxFQUFBOUwsT0FBQSxJQUNBOEwsRUFBQTlMLFFBQUEsR0FHQSxLQUFBOEwsRUFBQSxNQUdBeVAsR0FBQWpULEtBQUF3RCxNQUlBekcsRUFBQSxJQUFBeEYsRUE2Q0EsT0FBQUEsR0FBQUEsRUFBQWdaLFFBQ0FoWixHQUFBeW9CLEdBQUFwSCxLQUFBcFYsR0FLQXBOLEtBQUFvYSxZQUFBalosR0FBQXFoQixLQUFBcFYsR0FoREEsR0FBQXpHLEVBQUEsR0FBQSxDQVlBLEdBWEF4RixFQUFBQSxhQUFBK0QsR0FBQS9ELEVBQUEsR0FBQUEsRUFJQStELEdBQUErRixNQUFBakwsS0FBQWtGLEdBQUE4bUIsVUFDQXJsQixFQUFBLEdBQ0F4RixHQUFBQSxFQUFBNEUsU0FBQTVFLEVBQUErSSxlQUFBL0ksRUFBQXZDLElBQ0EsSUFJQWt0QixHQUFBNWxCLEtBQUFTLEVBQUEsS0FBQXpCLEdBQUEyVixjQUFBMVosR0FDQSxJQUFBd0YsS0FBQXhGLEVBR0ErRCxHQUFBVSxXQUFBNUYsS0FBQTJHLElBQ0EzRyxLQUFBMkcsR0FBQXhGLEVBQUF3RixJQUlBM0csS0FBQXduQixLQUFBN2dCLEVBQUF4RixFQUFBd0YsSUFLQSxPQUFBM0csS0FZQSxPQVJBcUYsRUFBQXpHLEdBQUFrZSxlQUFBblcsRUFBQSxPQUtBM0csS0FBQSxHQUFBcUYsRUFDQXJGLEtBQUFzQixPQUFBLEdBRUF0QixLQWNBLE9BQUFvTixFQUFBckgsVUFDQS9GLEtBQUEsR0FBQW9OLEVBQ0FwTixLQUFBc0IsT0FBQSxFQUNBdEIsTUFJQWtGLEdBQUFVLFdBQUF3SCxRQUNBdkYsSUFBQStoQixFQUFBM2hCLE1BQ0EyaEIsRUFBQTNoQixNQUFBbUYsR0FHQUEsRUFBQWxJLElBR0FBLEdBQUF3VyxVQUFBdE8sRUFBQXBOLFFBSUF1UyxVQUFBck4sR0FBQW1JLEdBR0EwZSxHQUFBN21CLEdBQUF0RyxJQUdBLElBQUFxdEIsR0FBQSxpQ0FHQUMsSUFDQWhwQixVQUFBLEVBQ0FpVixVQUFBLEVBQ0FsVixNQUFBLEVBQ0FJLE1BQUEsR0FHQTZCLEdBQUFtSSxHQUFBd0IsUUFDQXlhLElBQUEsU0FBQTdSLEdBQ0EsSUFBQTBVLEVBQUFqbkIsR0FBQXVTLEVBQUF6WCxNQUNBcUwsRUFBQThnQixFQUFBN3FCLE9BRUEsT0FBQXRCLEtBQUFtRyxPQUFBLFdBRUEsSUFEQSxJQUFBbEUsRUFBQSxFQUNBQSxFQUFBb0osRUFBQXBKLElBQ0EsR0FBQWlELEdBQUEwRyxTQUFBNUwsS0FBQW1zQixFQUFBbHFCLElBQ0EsT0FBQSxLQU1BbXFCLFFBQUEsU0FBQXBFLEVBQUE3bUIsR0FDQSxJQUFBa0YsRUFDQXBFLEVBQUEsRUFDQW9KLEVBQUFyTCxLQUFBc0IsT0FDQStuQixLQUNBOEMsRUFBQSxpQkFBQW5FLEdBQUE5aUIsR0FBQThpQixHQUdBLElBQUE2RCxHQUFBM2xCLEtBQUE4aEIsR0FDQSxLQUFBL2xCLEVBQUFvSixFQUFBcEosSUFDQSxJQUFBb0UsRUFBQXJHLEtBQUFpQyxHQUFBb0UsR0FBQUEsSUFBQWxGLEVBQUFrRixFQUFBQSxFQUFBeEIsV0FHQSxHQUFBd0IsRUFBQU4sU0FBQSxLQUFBb21CLEVBQ0FBLEVBQUF4cUIsTUFBQTBFLElBQUEsRUFHQSxJQUFBQSxFQUFBTixVQUNBYixHQUFBc2QsS0FBQWlFLGdCQUFBcGdCLEVBQUEyaEIsSUFBQSxDQUVBcUIsRUFBQXpuQixLQUFBeUUsR0FDQSxNQU1BLE9BQUFyRyxLQUFBdWEsVUFBQThPLEVBQUEvbkIsT0FBQSxFQUFBNEQsR0FBQXlkLFdBQUEwRyxHQUFBQSxJQUlBMW5CLE1BQUEsU0FBQTBELEdBR0EsT0FBQUEsRUFLQSxpQkFBQUEsRUFDQVcsR0FBQUYsS0FBQVosR0FBQUcsR0FBQXJGLEtBQUEsSUFJQWdHLEdBQUFGLEtBQUE5RixLQUdBcUYsRUFBQThVLE9BQUE5VSxFQUFBLEdBQUFBLEdBWkFyRixLQUFBLElBQUFBLEtBQUEsR0FBQTZFLFdBQUE3RSxLQUFBbUQsUUFBQWtwQixVQUFBL3FCLFFBQUEsR0FnQkFxTSxJQUFBLFNBQUFQLEVBQUFqTSxHQUNBLE9BQUFuQixLQUFBdWEsVUFDQXJWLEdBQUF5ZCxXQUNBemQsR0FBQStGLE1BQUFqTCxLQUFBMEssTUFBQXhGLEdBQUFrSSxFQUFBak0sT0FLQW1yQixRQUFBLFNBQUFsZixHQUNBLE9BQUFwTixLQUFBMk4sSUFBQSxNQUFBUCxFQUNBcE4sS0FBQXdhLFdBQUF4YSxLQUFBd2EsV0FBQXJVLE9BQUFpSCxPQVVBbEksR0FBQXdCLE1BQ0F1aUIsT0FBQSxTQUFBNWpCLEdBQ0EsSUFBQTRqQixFQUFBNWpCLEVBQUFSLFdBQ0EsT0FBQW9rQixHQUFBLEtBQUFBLEVBQUFsakIsU0FBQWtqQixFQUFBLE1BRUFzRCxRQUFBLFNBQUFsbkIsR0FDQSxPQUFBaUIsR0FBQWpCLEVBQUEsZUFFQW1uQixhQUFBLFNBQUFubkIsRUFBQXBELEVBQUF3cEIsR0FDQSxPQUFBbmxCLEdBQUFqQixFQUFBLGFBQUFvbUIsSUFFQXhvQixLQUFBLFNBQUFvQyxHQUNBLE9BQUFlLEVBQUFmLEVBQUEsZ0JBRUFoQyxLQUFBLFNBQUFnQyxHQUNBLE9BQUFlLEVBQUFmLEVBQUEsb0JBRUFvbkIsUUFBQSxTQUFBcG5CLEdBQ0EsT0FBQWlCLEdBQUFqQixFQUFBLGdCQUVBZ25CLFFBQUEsU0FBQWhuQixHQUNBLE9BQUFpQixHQUFBakIsRUFBQSxvQkFFQXFuQixVQUFBLFNBQUFybkIsRUFBQXBELEVBQUF3cEIsR0FDQSxPQUFBbmxCLEdBQUFqQixFQUFBLGNBQUFvbUIsSUFFQWtCLFVBQUEsU0FBQXRuQixFQUFBcEQsRUFBQXdwQixHQUNBLE9BQUFubEIsR0FBQWpCLEVBQUEsa0JBQUFvbUIsSUFFQXJvQixTQUFBLFNBQUFpQyxHQUNBLE9BQUFqQyxJQUFBaUMsRUFBQVIsZ0JBQUE0SCxXQUFBcEgsSUFFQW5DLFNBQUEsU0FBQW1DLEdBQ0EsT0FBQWpDLEdBQUFpQyxFQUFBb0gsYUFFQTBMLFNBQUEsU0FBQTlTLEdBQ0EsT0FBQUQsRUFBQUMsRUFBQSxVQUNBQSxFQUFBdW5CLGlCQU1BeG5CLEVBQUFDLEVBQUEsY0FDQUEsRUFBQUEsRUFBQXdJLFNBQUF4SSxHQUdBSCxHQUFBK0YsU0FBQTVGLEVBQUFtSCxlQUVBLFNBQUFsSCxFQUFBK0gsR0FDQW5JLEdBQUFtSSxHQUFBL0gsR0FBQSxTQUFBbW1CLEVBQUFyZSxHQUNBLElBQUFpYyxFQUFBbmtCLEdBQUE0SyxJQUFBOVAsS0FBQXFOLEVBQUFvZSxHQXVCQSxNQXJCQSxVQUFBbm1CLEVBQUF3QyxPQUFBLEtBQ0FzRixFQUFBcWUsR0FHQXJlLEdBQUEsaUJBQUFBLElBQ0FpYyxFQUFBbmtCLEdBQUFpQixPQUFBaUgsRUFBQWljLElBR0FycEIsS0FBQXNCLE9BQUEsSUFHQTRxQixHQUFBNW1CLElBQ0FKLEdBQUF5ZCxXQUFBMEcsR0FJQTRDLEdBQUEvbEIsS0FBQVosSUFDQStqQixFQUFBd0QsV0FJQTdzQixLQUFBdWEsVUFBQThPLE1BR0EsSUFBQXppQixHQUFBLG9CQW1DQTFCLEdBQUE0bkIsVUFBQSxTQUFBdG1CLEdBSUFBLEVBQUEsaUJBQUFBLEVBQ0FELEVBQUFDLEdBQ0F0QixHQUFBMkosVUFBQXJJLEdBRUEsSUFDQXVtQixFQUdBQyxFQUdBQyxFQUdBQyxFQUdBNUosS0FHQTNOLEtBR0F3WCxHQUFBLEVBR0FDLEVBQUEsV0FRQSxJQUxBRixFQUFBQSxHQUFBMW1CLEVBQUE2bUIsS0FJQUosRUFBQUYsR0FBQSxFQUNBcFgsRUFBQXJVLE9BQUE2ckIsR0FBQSxFQUVBLElBREFILEVBQUFyWCxFQUFBeUMsVUFDQStVLEVBQUE3SixFQUFBaGlCLFNBR0EsSUFBQWdpQixFQUFBNkosR0FBQXZsQixNQUFBb2xCLEVBQUEsR0FBQUEsRUFBQSxLQUNBeG1CLEVBQUE4bUIsY0FHQUgsRUFBQTdKLEVBQUFoaUIsT0FDQTByQixHQUFBLEdBTUF4bUIsRUFBQXdtQixTQUNBQSxHQUFBLEdBR0FELEdBQUEsRUFHQUcsSUFJQTVKLEVBREEwSixLQUtBLEtBTUE1cUIsR0FHQXVMLElBQUEsV0EyQkEsT0ExQkEyVixJQUdBMEosSUFBQUQsSUFDQUksRUFBQTdKLEVBQUFoaUIsT0FBQSxFQUNBcVUsRUFBQS9ULEtBQUFvckIsSUFHQSxTQUFBcmYsRUFBQXlCLEdBQ0FsSyxHQUFBd0IsS0FBQTBJLEVBQUEsU0FBQXZJLEVBQUFrVixHQUNBN1csR0FBQVUsV0FBQW1XLEdBQ0F2VixFQUFBOGtCLFFBQUFscEIsRUFBQWtuQixJQUFBdk4sSUFDQXVILEVBQUExaEIsS0FBQW1hLEdBRUFBLEdBQUFBLEVBQUF6YSxRQUFBLFdBQUE0RCxHQUFBRCxLQUFBOFcsSUFHQXBPLEVBQUFvTyxNQUdBdE8sV0FFQXVmLElBQUFELEdBQ0FLLEtBR0FwdEIsTUFJQWtRLE9BQUEsV0FZQSxPQVhBaEwsR0FBQXdCLEtBQUErRyxVQUFBLFNBQUE1RyxFQUFBa1YsR0FFQSxJQURBLElBQUFwYSxHQUNBQSxFQUFBdUQsR0FBQTBILFFBQUFtUCxFQUFBdUgsRUFBQTNoQixLQUFBLEdBQ0EyaEIsRUFBQXBoQixPQUFBUCxFQUFBLEdBR0FBLEdBQUF3ckIsR0FDQUEsTUFJQW50QixNQUtBc3BCLElBQUEsU0FBQWpjLEdBQ0EsT0FBQUEsRUFDQW5JLEdBQUEwSCxRQUFBUyxFQUFBaVcsSUFBQSxFQUNBQSxFQUFBaGlCLE9BQUEsR0FJQTZvQixNQUFBLFdBSUEsT0FIQTdHLElBQ0FBLE1BRUF0akIsTUFNQXV0QixRQUFBLFdBR0EsT0FGQUwsRUFBQXZYLEtBQ0EyTixFQUFBMEosRUFBQSxHQUNBaHRCLE1BRUE4ZSxTQUFBLFdBQ0EsT0FBQXdFLEdBTUFrSyxLQUFBLFdBS0EsT0FKQU4sRUFBQXZYLEtBQ0FxWCxHQUFBRCxJQUNBekosRUFBQTBKLEVBQUEsSUFFQWh0QixNQUVBa3RCLE9BQUEsV0FDQSxRQUFBQSxHQUlBTyxTQUFBLFNBQUF0c0IsRUFBQWlPLEdBU0EsT0FSQThkLElBRUE5ZCxHQUFBak8sR0FEQWlPLEVBQUFBLE9BQ0F0SCxNQUFBc0gsRUFBQXRILFFBQUFzSCxHQUNBdUcsRUFBQS9ULEtBQUF3TixHQUNBMmQsR0FDQUssS0FHQXB0QixNQUlBb3RCLEtBQUEsV0FFQSxPQURBaHJCLEVBQUFxckIsU0FBQXp0QixLQUFBeU4sV0FDQXpOLE1BSUFpdEIsTUFBQSxXQUNBLFFBQUFBLElBSUEsT0FBQTdxQixHQTRDQThDLEdBQUEySixRQUVBNEYsU0FBQSxTQUFBa0MsR0FDQSxJQUFBK1csSUFJQSxTQUFBLFdBQUF4b0IsR0FBQTRuQixVQUFBLFVBQ0E1bkIsR0FBQTRuQixVQUFBLFVBQUEsSUFDQSxVQUFBLE9BQUE1bkIsR0FBQTRuQixVQUFBLGVBQ0E1bkIsR0FBQTRuQixVQUFBLGVBQUEsRUFBQSxhQUNBLFNBQUEsT0FBQTVuQixHQUFBNG5CLFVBQUEsZUFDQTVuQixHQUFBNG5CLFVBQUEsZUFBQSxFQUFBLGFBRUE1VCxFQUFBLFVBQ0ExUixHQUNBMFIsTUFBQSxXQUNBLE9BQUFBLEdBRUF4RSxPQUFBLFdBRUEsT0FEQUYsRUFBQS9NLEtBQUFnRyxXQUFBL0YsS0FBQStGLFdBQ0F6TixNQUVBMnRCLE1BQUEsU0FBQXRnQixHQUNBLE9BQUE3RixFQUFBRyxLQUFBLEtBQUEwRixJQUlBdWdCLEtBQUEsV0FDQSxJQUFBQyxFQUFBcGdCLFVBRUEsT0FBQXZJLEdBQUF1UCxTQUFBLFNBQUFxWixHQUNBNW9CLEdBQUF3QixLQUFBZ25CLEVBQUEsU0FBQXpyQixFQUFBOHJCLEdBR0EsSUFBQTFnQixFQUFBbkksR0FBQVUsV0FBQWlvQixFQUFBRSxFQUFBLE1BQUFGLEVBQUFFLEVBQUEsSUFLQXZaLEVBQUF1WixFQUFBLElBQUEsV0FDQSxJQUFBQyxFQUFBM2dCLEdBQUFBLEVBQUF6RixNQUFBNUgsS0FBQXlOLFdBQ0F1Z0IsR0FBQTlvQixHQUFBVSxXQUFBb29CLEVBQUF4bUIsU0FDQXdtQixFQUFBeG1CLFVBQ0FxTyxTQUFBaVksRUFBQUcsUUFDQXhtQixLQUFBcW1CLEVBQUExbUIsU0FDQU0sS0FBQW9tQixFQUFBem1CLFFBRUF5bUIsRUFBQUMsRUFBQSxHQUFBLFFBQ0EvdEIsS0FDQXFOLEdBQUEyZ0IsR0FBQXZnQixlQUtBb2dCLEVBQUEsT0FDQXJtQixXQUVBRyxLQUFBLFNBQUF1bUIsRUFBQUMsRUFBQUMsR0FFQSxTQUFBaG5CLEVBQUFpbkIsRUFBQTdaLEVBQUE2SixFQUFBaVEsR0FDQSxPQUFBLFdBQ0EsSUFBQUMsRUFBQXZ1QixLQUNBb1AsRUFBQTNCLFVBQ0ErZ0IsRUFBQSxXQUNBLElBQUFSLEVBQUFybUIsRUFLQSxLQUFBMG1CLEVBQUFJLEdBQUEsQ0FRQSxJQUpBVCxFQUFBM1AsRUFBQXpXLE1BQUEybUIsRUFBQW5mLE1BSUFvRixFQUFBaE4sVUFDQSxNQUFBLElBQUFrbkIsVUFBQSw0QkFPQS9tQixFQUFBcW1CLElBS0EsaUJBQUFBLEdBQ0EsbUJBQUFBLElBQ0FBLEVBQUFybUIsS0FHQXpDLEdBQUFVLFdBQUErQixHQUdBMm1CLEVBQ0EzbUIsRUFBQTdCLEtBQ0Frb0IsRUFDQTVtQixFQUFBcW5CLEVBQUFqYSxFQUFBek4sRUFBQXVuQixHQUNBbG5CLEVBQUFxbkIsRUFBQWphLEVBQUF2TixFQUFBcW5CLEtBT0FHLElBRUE5bUIsRUFBQTdCLEtBQ0Frb0IsRUFDQTVtQixFQUFBcW5CLEVBQUFqYSxFQUFBek4sRUFBQXVuQixHQUNBbG5CLEVBQUFxbkIsRUFBQWphLEVBQUF2TixFQUFBcW5CLEdBQ0FsbkIsRUFBQXFuQixFQUFBamEsRUFBQXpOLEVBQ0F5TixFQUFBVSxlQVNBbUosSUFBQXRYLElBQ0F3bkIsT0FBQTFtQixFQUNBdUgsR0FBQTRlLEtBS0FNLEdBQUE5WixFQUFBVyxhQUFBb1osRUFBQW5mLE1BS0F1ZixFQUFBTCxFQUNBRSxFQUNBLFdBQ0EsSUFDQUEsSUFDQSxNQUFBNWxCLEdBRUExRCxHQUFBdVAsU0FBQW1hLGVBQ0ExcEIsR0FBQXVQLFNBQUFtYSxjQUFBaG1CLEVBQ0ErbEIsRUFBQUUsWUFNQVIsRUFBQSxHQUFBSSxJQUlBcFEsSUFBQXBYLElBQ0FzbkIsT0FBQTFtQixFQUNBdUgsR0FBQXhHLElBR0E0TCxFQUFBaUIsV0FBQThZLEVBQUFuZixNQVNBaWYsRUFDQU0sS0FLQXpwQixHQUFBdVAsU0FBQXFhLGVBQ0FILEVBQUFFLFdBQUEzcEIsR0FBQXVQLFNBQUFxYSxnQkFFQTNxQixFQUFBeU8sV0FBQStiLEtBekhBLElBQUFGLEVBQUEsRUE4SEEsT0FBQXZwQixHQUFBdVAsU0FBQSxTQUFBcVosR0FHQUosRUFBQSxHQUFBLEdBQUEvZixJQUNBdkcsRUFDQSxFQUNBMG1CLEVBQ0E1b0IsR0FBQVUsV0FBQXdvQixHQUNBQSxFQUNBcm5CLEVBQ0ErbUIsRUFBQTVZLGFBS0F3WSxFQUFBLEdBQUEsR0FBQS9mLElBQ0F2RyxFQUNBLEVBQ0EwbUIsRUFDQTVvQixHQUFBVSxXQUFBc29CLEdBQ0FBLEVBQ0FubkIsSUFLQTJtQixFQUFBLEdBQUEsR0FBQS9mLElBQ0F2RyxFQUNBLEVBQ0EwbUIsRUFDQTVvQixHQUFBVSxXQUFBdW9CLEdBQ0FBLEVBQ0FsbkIsTUFHQU8sV0FLQUEsUUFBQSxTQUFBeEMsR0FDQSxPQUFBLE1BQUFBLEVBQUFFLEdBQUEySixPQUFBN0osRUFBQXdDLEdBQUFBLElBR0FnTixLQTJEQSxPQXhEQXRQLEdBQUF3QixLQUFBZ25CLEVBQUEsU0FBQXpyQixFQUFBOHJCLEdBQ0EsSUFBQXpLLEVBQUF5SyxFQUFBLEdBQ0FnQixFQUFBaEIsRUFBQSxHQUtBdm1CLEVBQUF1bUIsRUFBQSxJQUFBekssRUFBQTNWLElBR0FvaEIsR0FDQXpMLEVBQUEzVixJQUNBLFdBSUF1TCxFQUFBNlYsR0FLQXJCLEVBQUEsRUFBQXpyQixHQUFBLEdBQUFzckIsUUFHQUcsRUFBQSxHQUFBLEdBQUFGLE1BT0FsSyxFQUFBM1YsSUFBQW9nQixFQUFBLEdBQUFYLE1BS0E1WSxFQUFBdVosRUFBQSxJQUFBLFdBRUEsT0FEQXZaLEVBQUF1WixFQUFBLEdBQUEsUUFBQS90QixPQUFBd1UsT0FBQTNNLEVBQUE3SCxLQUFBeU4sV0FDQXpOLE1BTUF3VSxFQUFBdVosRUFBQSxHQUFBLFFBQUF6SyxFQUFBbUssV0FJQWptQixFQUFBQSxRQUFBZ04sR0FHQW1DLEdBQ0FBLEVBQUE3USxLQUFBME8sRUFBQUEsR0FJQUEsR0FJQXdhLEtBQUEsU0FBQUMsR0FDQSxJQUdBcmEsRUFBQW5ILFVBQUFuTSxPQUdBVyxFQUFBMlMsRUFHQXNhLEVBQUEzdEIsTUFBQVUsR0FDQWt0QixFQUFBcm5CLEdBQUFoQyxLQUFBMkgsV0FHQTJoQixFQUFBbHFCLEdBQUF1UCxXQUdBNGEsRUFBQSxTQUFBcHRCLEdBQ0EsT0FBQSxTQUFBakQsR0FDQWt3QixFQUFBanRCLEdBQUFqQyxLQUNBbXZCLEVBQUFsdEIsR0FBQXdMLFVBQUFuTSxPQUFBLEVBQUF3RyxHQUFBaEMsS0FBQTJILFdBQUF6TyxJQUNBNFYsR0FDQXdhLEVBQUFqYSxZQUFBK1osRUFBQUMsS0FNQSxHQUFBdmEsR0FBQSxJQUNBek4sRUFBQThuQixFQUFBRyxFQUFBM25CLEtBQUE0bkIsRUFBQXB0QixJQUFBbUYsUUFBQWdvQixFQUFBL25CLFFBQ0F1TixHQUdBLFlBQUF3YSxFQUFBbFcsU0FDQWhVLEdBQUFVLFdBQUF1cEIsRUFBQWx0QixJQUFBa3RCLEVBQUFsdEIsR0FBQTBGLE9BRUEsT0FBQXluQixFQUFBem5CLE9BS0EsS0FBQTFGLEtBQ0FrRixFQUFBZ29CLEVBQUFsdEIsR0FBQW90QixFQUFBcHRCLEdBQUFtdEIsRUFBQS9uQixRQUdBLE9BQUErbkIsRUFBQTVuQixhQU9BLElBQUE4bkIsR0FBQSx5REFFQXBxQixHQUFBdVAsU0FBQW1hLGNBQUEsU0FBQXJ2QixFQUFBZ3dCLEdBSUFwckIsRUFBQTVELFNBQUE0RCxFQUFBNUQsUUFBQWl2QixNQUFBandCLEdBQUErdkIsR0FBQXBwQixLQUFBM0csRUFBQStGLE9BQ0FuQixFQUFBNUQsUUFBQWl2QixLQUFBLDhCQUFBandCLEVBQUFrd0IsUUFBQWx3QixFQUFBZ3dCLE1BQUFBLElBT0FycUIsR0FBQXdxQixlQUFBLFNBQUFud0IsR0FDQTRFLEVBQUF5TyxXQUFBLFdBQ0EsTUFBQXJULEtBUUEsSUFBQW93QixHQUFBenFCLEdBQUF1UCxXQUVBdlAsR0FBQW1JLEdBQUFwRixNQUFBLFNBQUFvRixHQVlBLE9BVkFzaUIsR0FDQWhvQixLQUFBMEYsR0FLQXNnQixNQUFBLFNBQUFwdUIsR0FDQTJGLEdBQUF3cUIsZUFBQW53QixLQUdBUyxNQUdBa0YsR0FBQTJKLFFBR0FrTSxTQUFBLEVBSUE2VSxVQUFBLEVBR0EzbkIsTUFBQSxTQUFBNG5CLEtBR0EsSUFBQUEsSUFBQTNxQixHQUFBMHFCLFVBQUExcUIsR0FBQTZWLFdBS0E3VixHQUFBNlYsU0FBQSxHQUdBLElBQUE4VSxLQUFBM3FCLEdBQUEwcUIsVUFBQSxHQUtBRCxHQUFBeGEsWUFBQXZXLElBQUFzRyxTQUlBQSxHQUFBK0MsTUFBQU4sS0FBQWdvQixHQUFBaG9CLEtBYUEsYUFBQS9JLEdBQUFreEIsWUFDQSxZQUFBbHhCLEdBQUFreEIsYUFBQWx4QixHQUFBK21CLGdCQUFBb0ssU0FHQTVyQixFQUFBeU8sV0FBQTFOLEdBQUErQyxRQUtBckosR0FBQW9uQixpQkFBQSxtQkFBQWplLEdBR0E1RCxFQUFBNmhCLGlCQUFBLE9BQUFqZSxJQVFBLElBQUE0RyxHQUFBLFNBQUF4RCxFQUFBa0MsRUFBQTdFLEVBQUF4SixFQUFBZ3hCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQWp1QixFQUFBLEVBQ0F3WSxFQUFBdFAsRUFBQTdKLE9BQ0E2dUIsRUFBQSxNQUFBM25CLEVBR0EsR0FBQSxXQUFBdEQsR0FBQUQsS0FBQXVELEdBQUEsQ0FDQXduQixHQUFBLEVBQ0EsSUFBQS90QixLQUFBdUcsRUFDQW1HLEdBQUF4RCxFQUFBa0MsRUFBQXBMLEVBQUF1RyxFQUFBdkcsSUFBQSxFQUFBZ3VCLEVBQUFDLFFBSUEsUUFBQXJvQixJQUFBN0ksSUFDQWd4QixHQUFBLEVBRUE5cUIsR0FBQVUsV0FBQTVHLEtBQ0FreEIsR0FBQSxHQUdBQyxJQUdBRCxHQUNBN2lCLEVBQUF2SCxLQUFBcUYsRUFBQW5NLEdBQ0FxTyxFQUFBLE9BSUE4aUIsRUFBQTlpQixFQUNBQSxFQUFBLFNBQUFoSSxFQUFBbUQsRUFBQXhKLEdBQ0EsT0FBQW14QixFQUFBcnFCLEtBQUFaLEdBQUFHLEdBQUFyRyxNQUtBcU8sR0FDQSxLQUFBcEwsRUFBQXdZLEVBQUF4WSxJQUNBb0wsRUFDQWxDLEVBQUFsSixHQUFBdUcsRUFBQTBuQixFQUNBbHhCLEVBQ0FBLEVBQUE4RyxLQUFBcUYsRUFBQWxKLEdBQUFBLEVBQUFvTCxFQUFBbEMsRUFBQWxKLEdBQUF1RyxLQU1BLE9BQUF3bkIsRUFDQTdrQixFQUlBZ2xCLEVBQ0E5aUIsRUFBQXZILEtBQUFxRixHQUdBc1AsRUFBQXBOLEVBQUFsQyxFQUFBLEdBQUEzQyxHQUFBeW5CLEdBRUFHLEdBQUEsU0FBQUMsR0FRQSxPQUFBLElBQUFBLEVBQUF0cUIsVUFBQSxJQUFBc3FCLEVBQUF0cUIsWUFBQXNxQixFQUFBdHFCLFVBVUFtQyxFQUFBRSxJQUFBLEVBRUFGLEVBQUFxSyxXQUVBc0wsTUFBQSxTQUFBd1MsR0FHQSxJQUFBcnhCLEVBQUFxeEIsRUFBQXJ3QixLQUFBbUksU0E0QkEsT0F6QkFuSixJQUNBQSxLQUtBb3hCLEdBQUFDLEtBSUFBLEVBQUF0cUIsU0FDQXNxQixFQUFBcndCLEtBQUFtSSxTQUFBbkosRUFNQXFhLE9BQUFpWCxlQUFBRCxFQUFBcndCLEtBQUFtSSxTQUNBbkosTUFBQUEsRUFDQXV4QixjQUFBLE1BTUF2eEIsR0FFQThKLElBQUEsU0FBQXVuQixFQUFBcHdCLEVBQUFqQixHQUNBLElBQUFnSyxFQUNBNlUsRUFBQTdkLEtBQUE2ZCxNQUFBd1MsR0FJQSxHQUFBLGlCQUFBcHdCLEVBQ0E0ZCxFQUFBM1ksR0FBQStPLFVBQUFoVSxJQUFBakIsT0FNQSxJQUFBZ0ssS0FBQS9JLEVBQ0E0ZCxFQUFBM1ksR0FBQStPLFVBQUFqTCxJQUFBL0ksRUFBQStJLEdBR0EsT0FBQTZVLEdBRUFuVCxJQUFBLFNBQUEybEIsRUFBQTduQixHQUNBLFlBQUFYLElBQUFXLEVBQ0F4SSxLQUFBNmQsTUFBQXdTLEdBR0FBLEVBQUFyd0IsS0FBQW1JLFVBQUFrb0IsRUFBQXJ3QixLQUFBbUksU0FBQWpELEdBQUErTyxVQUFBekwsS0FFQW1HLE9BQUEsU0FBQTBoQixFQUFBN25CLEVBQUF4SixHQWFBLFlBQUE2SSxJQUFBVyxHQUNBQSxHQUFBLGlCQUFBQSxRQUFBWCxJQUFBN0ksRUFFQWdCLEtBQUEwSyxJQUFBMmxCLEVBQUE3bkIsSUFTQXhJLEtBQUE4SSxJQUFBdW5CLEVBQUE3bkIsRUFBQXhKLFFBSUE2SSxJQUFBN0ksRUFBQUEsRUFBQXdKLElBRUEwSCxPQUFBLFNBQUFtZ0IsRUFBQTduQixHQUNBLElBQUF2RyxFQUNBNGIsRUFBQXdTLEVBQUFyd0IsS0FBQW1JLFNBRUEsUUFBQU4sSUFBQWdXLEVBQUEsQ0FJQSxRQUFBaFcsSUFBQVcsRUFBQSxDQWtCQXZHLEdBWEF1RyxFQUpBakgsTUFBQUMsUUFBQWdILEdBSUFBLEVBQUFzSCxJQUFBNUssR0FBQStPLFlBRUF6TCxFQUFBdEQsR0FBQStPLFVBQUF6TCxNQUlBcVYsR0FDQXJWLEdBQ0FBLEVBQUE3QixNQUFBQyxTQUdBdEYsT0FFQSxLQUFBVyxZQUNBNGIsRUFBQXJWLEVBQUF2RyxVQUtBNEYsSUFBQVcsR0FBQXRELEdBQUFvVyxjQUFBdUMsTUFNQXdTLEVBQUF0cUIsU0FDQXNxQixFQUFBcndCLEtBQUFtSSxjQUFBTixTQUVBd29CLEVBQUFyd0IsS0FBQW1JLFlBSUF1RyxRQUFBLFNBQUEyaEIsR0FDQSxJQUFBeFMsRUFBQXdTLEVBQUFyd0IsS0FBQW1JLFNBQ0EsWUFBQU4sSUFBQWdXLElBQUEzWSxHQUFBb1csY0FBQXVDLEtBR0EsSUFBQXBULEdBQUEsSUFBQXZDLEVBRUFXLEdBQUEsSUFBQVgsRUFjQUksR0FBQSxnQ0FDQUksR0FBQSxTQWtEQXhELEdBQUEySixRQUNBSCxRQUFBLFNBQUFySixHQUNBLE9BQUF3RCxHQUFBNkYsUUFBQXJKLElBQUFvRixHQUFBaUUsUUFBQXJKLElBR0FwRixLQUFBLFNBQUFvRixFQUFBQyxFQUFBckYsR0FDQSxPQUFBNEksR0FBQThGLE9BQUF0SixFQUFBQyxFQUFBckYsSUFHQXV3QixXQUFBLFNBQUFuckIsRUFBQUMsR0FDQXVELEdBQUFxSCxPQUFBN0ssRUFBQUMsSUFLQW1yQixNQUFBLFNBQUFwckIsRUFBQUMsRUFBQXJGLEdBQ0EsT0FBQXdLLEdBQUFrRSxPQUFBdEosRUFBQUMsRUFBQXJGLElBR0F5d0IsWUFBQSxTQUFBcnJCLEVBQUFDLEdBQ0FtRixHQUFBeUYsT0FBQTdLLEVBQUFDLE1BSUFKLEdBQUFtSSxHQUFBd0IsUUFDQTVPLEtBQUEsU0FBQXVJLEVBQUF4SixHQUNBLElBQUFpRCxFQUFBcUQsRUFBQXJGLEVBQ0FvRixFQUFBckYsS0FBQSxHQUNBc1QsRUFBQWpPLEdBQUFBLEVBQUFxZSxXQUdBLFFBQUE3YixJQUFBVyxFQUFBLENBQ0EsR0FBQXhJLEtBQUFzQixTQUNBckIsRUFBQTRJLEdBQUE2QixJQUFBckYsR0FFQSxJQUFBQSxFQUFBVSxXQUFBMEUsR0FBQUMsSUFBQXJGLEVBQUEsaUJBQUEsQ0FFQSxJQURBcEQsRUFBQXFSLEVBQUFoUyxPQUNBVyxLQUlBcVIsRUFBQXJSLElBRUEsS0FEQXFELEVBQUFnTyxFQUFBclIsR0FBQXFELE1BQ0FVLFFBQUEsV0FDQVYsRUFBQUosR0FBQStPLFVBQUEzTyxFQUFBd0MsTUFBQSxJQUNBUyxFQUFBbEQsRUFBQUMsRUFBQXJGLEVBQUFxRixLQUlBbUYsR0FBQTNCLElBQUF6RCxFQUFBLGdCQUFBLEdBSUEsT0FBQXBGLEVBSUEsTUFBQSxpQkFBQXVJLEVBQ0F4SSxLQUFBMEcsS0FBQSxXQUNBbUMsR0FBQUMsSUFBQTlJLEtBQUF3SSxLQUlBbUcsR0FBQTNPLEtBQUEsU0FBQWhCLEdBQ0EsSUFBQWlCLEVBT0EsR0FBQW9GLFFBQUF3QyxJQUFBN0ksRUFBQSxDQUtBLFFBQUE2SSxLQURBNUgsRUFBQTRJLEdBQUE2QixJQUFBckYsRUFBQW1ELElBRUEsT0FBQXZJLEVBTUEsUUFBQTRILEtBREE1SCxFQUFBc0ksRUFBQWxELEVBQUFtRCxJQUVBLE9BQUF2SSxPQVFBRCxLQUFBMEcsS0FBQSxXQUdBbUMsR0FBQUMsSUFBQTlJLEtBQUF3SSxFQUFBeEosTUFFQSxLQUFBQSxFQUFBeU8sVUFBQW5NLE9BQUEsRUFBQSxNQUFBLElBR0FrdkIsV0FBQSxTQUFBaG9CLEdBQ0EsT0FBQXhJLEtBQUEwRyxLQUFBLFdBQ0FtQyxHQUFBcUgsT0FBQWxRLEtBQUF3SSxRQU1BdEQsR0FBQTJKLFFBQ0E4RyxNQUFBLFNBQUF0USxFQUFBSixFQUFBaEYsR0FDQSxJQUFBMFYsRUFFQSxHQUFBdFEsRUFZQSxPQVhBSixHQUFBQSxHQUFBLE1BQUEsUUFDQTBRLEVBQUFsTCxHQUFBQyxJQUFBckYsRUFBQUosR0FHQWhGLEtBQ0EwVixHQUFBcFUsTUFBQUMsUUFBQXZCLEdBQ0EwVixFQUFBbEwsR0FBQWtFLE9BQUF0SixFQUFBSixFQUFBQyxHQUFBd1csVUFBQXpiLElBRUEwVixFQUFBL1QsS0FBQTNCLElBR0EwVixPQUlBZ2IsUUFBQSxTQUFBdHJCLEVBQUFKLEdBQ0FBLEVBQUFBLEdBQUEsS0FFQSxJQUFBMFEsRUFBQXpRLEdBQUF5USxNQUFBdFEsRUFBQUosR0FDQTJyQixFQUFBamIsRUFBQXJVLE9BQ0ErTCxFQUFBc0ksRUFBQXlDLFFBQ0FwRSxFQUFBOU8sR0FBQXdRLFlBQUFyUSxFQUFBSixHQU1BLGVBQUFvSSxJQUNBQSxFQUFBc0ksRUFBQXlDLFFBQ0F3WSxLQUdBdmpCLElBSUEsT0FBQXBJLEdBQ0EwUSxFQUFBbUIsUUFBQSxxQkFJQTlDLEVBQUF1QixLQUNBbEksRUFBQXZILEtBQUFULEVBcEJBLFdBQ0FILEdBQUF5ckIsUUFBQXRyQixFQUFBSixJQW1CQStPLEtBR0E0YyxHQUFBNWMsR0FDQUEsRUFBQW1XLE1BQUFpRCxRQUtBMVgsWUFBQSxTQUFBclEsRUFBQUosR0FDQSxJQUFBdUQsRUFBQXZELEVBQUEsYUFDQSxPQUFBd0YsR0FBQUMsSUFBQXJGLEVBQUFtRCxJQUFBaUMsR0FBQWtFLE9BQUF0SixFQUFBbUQsR0FDQTJoQixNQUFBamxCLEdBQUE0bkIsVUFBQSxlQUFBbmYsSUFBQSxXQUNBbEQsR0FBQXlGLE9BQUE3SyxHQUFBSixFQUFBLFFBQUF1RCxXQU1BdEQsR0FBQW1JLEdBQUF3QixRQUNBOEcsTUFBQSxTQUFBMVEsRUFBQWhGLEdBQ0EsSUFBQTR3QixFQUFBLEVBUUEsTUFOQSxpQkFBQTVyQixJQUNBaEYsRUFBQWdGLEVBQ0FBLEVBQUEsS0FDQTRyQixLQUdBcGpCLFVBQUFuTSxPQUFBdXZCLEVBQ0EzckIsR0FBQXlRLE1BQUEzVixLQUFBLEdBQUFpRixRQUdBNEMsSUFBQTVILEVBQ0FELEtBQ0FBLEtBQUEwRyxLQUFBLFdBQ0EsSUFBQWlQLEVBQUF6USxHQUFBeVEsTUFBQTNWLEtBQUFpRixFQUFBaEYsR0FHQWlGLEdBQUF3USxZQUFBMVYsS0FBQWlGLEdBRUEsT0FBQUEsR0FBQSxlQUFBMFEsRUFBQSxJQUNBelEsR0FBQXlyQixRQUFBM3dCLEtBQUFpRixNQUlBMHJCLFFBQUEsU0FBQTFyQixHQUNBLE9BQUFqRixLQUFBMEcsS0FBQSxXQUNBeEIsR0FBQXlyQixRQUFBM3dCLEtBQUFpRixNQUdBNnJCLFdBQUEsU0FBQTdyQixHQUNBLE9BQUFqRixLQUFBMlYsTUFBQTFRLEdBQUEsVUFLQXVDLFFBQUEsU0FBQXZDLEVBQUFELEdBQ0EsSUFBQTBHLEVBQ0FxbEIsRUFBQSxFQUNBQyxFQUFBOXJCLEdBQUF1UCxXQUNBaFAsRUFBQXpGLEtBQ0FpQyxFQUFBakMsS0FBQXNCLE9BQ0E4RixFQUFBLGFBQ0EycEIsR0FDQUMsRUFBQTdiLFlBQUExUCxHQUFBQSxLQVVBLElBTkEsaUJBQUFSLElBQ0FELEVBQUFDLEVBQ0FBLE9BQUE0QyxHQUVBNUMsRUFBQUEsR0FBQSxLQUVBaEQsTUFDQXlKLEVBQUFqQixHQUFBQyxJQUFBakYsRUFBQXhELEdBQUFnRCxFQUFBLGdCQUNBeUcsRUFBQXllLFFBQ0E0RyxJQUNBcmxCLEVBQUF5ZSxNQUFBeGMsSUFBQXZHLElBSUEsT0FEQUEsSUFDQTRwQixFQUFBeHBCLFFBQUF4QyxNQUdBLElBQUFpc0IsR0FBQSxzQ0FBQUMsT0FFQXZuQixHQUFBLElBQUFrYSxPQUFBLGlCQUFBb04sR0FBQSxjQUFBLEtBR0FqZixJQUFBLE1BQUEsUUFBQSxTQUFBLFFBRUFySCxHQUFBLFNBQUF0RixFQUFBOFksR0FPQSxNQUFBLFVBSEE5WSxFQUFBOFksR0FBQTlZLEdBR0F3RSxNQUFBTSxTQUNBLEtBQUE5RSxFQUFBd0UsTUFBQU0sU0FNQWpGLEdBQUEwRyxTQUFBdkcsRUFBQTZFLGNBQUE3RSxJQUVBLFNBQUFILEdBQUFwQyxJQUFBdUMsRUFBQSxZQUdBOHJCLEdBQUEsU0FBQTlyQixFQUFBbUIsRUFBQTZJLEVBQUFELEdBQ0EsSUFBQXRFLEVBQUF4RixFQUNBOHJCLEtBR0EsSUFBQTlyQixLQUFBa0IsRUFDQTRxQixFQUFBOXJCLEdBQUFELEVBQUF3RSxNQUFBdkUsR0FDQUQsRUFBQXdFLE1BQUF2RSxHQUFBa0IsRUFBQWxCLEdBR0F3RixFQUFBdUUsRUFBQXpILE1BQUF2QyxFQUFBK0osT0FHQSxJQUFBOUosS0FBQWtCLEVBQ0FuQixFQUFBd0UsTUFBQXZFLEdBQUE4ckIsRUFBQTlyQixHQUdBLE9BQUF3RixHQXFFQVYsTUF5RUFsRixHQUFBbUksR0FBQXdCLFFBQ0F0RSxLQUFBLFdBQ0EsT0FBQUQsRUFBQXRLLE1BQUEsSUFFQXF4QixLQUFBLFdBQ0EsT0FBQS9tQixFQUFBdEssT0FFQXN4QixPQUFBLFNBQUFwWSxHQUNBLE1BQUEsa0JBQUFBLEVBQ0FBLEVBQUFsWixLQUFBdUssT0FBQXZLLEtBQUFxeEIsT0FHQXJ4QixLQUFBMEcsS0FBQSxXQUNBaUUsR0FBQTNLLE1BQ0FrRixHQUFBbEYsTUFBQXVLLE9BRUFyRixHQUFBbEYsTUFBQXF4QixZQUtBLElBQUF0aUIsR0FBQSx3QkFFQTdDLEdBQUEsaUNBRUFXLEdBQUEsNEJBS0FWLElBR0FvbEIsUUFBQSxFQUFBLCtCQUFBLGFBS0FDLE9BQUEsRUFBQSxVQUFBLFlBQ0FDLEtBQUEsRUFBQSxvQkFBQSx1QkFDQUMsSUFBQSxFQUFBLGlCQUFBLG9CQUNBQyxJQUFBLEVBQUEscUJBQUEseUJBRUF2bEIsVUFBQSxFQUFBLEdBQUEsS0FJQUQsR0FBQXlsQixTQUFBemxCLEdBQUFvbEIsT0FFQXBsQixHQUFBMGxCLE1BQUExbEIsR0FBQTJsQixNQUFBM2xCLEdBQUE0bEIsU0FBQTVsQixHQUFBNmxCLFFBQUE3bEIsR0FBQXFsQixNQUNBcmxCLEdBQUE4bEIsR0FBQTlsQixHQUFBd2xCLEdBMENBLElBQUExbEIsR0FBQSxhQTRGQSxXQUNBLElBQ0FpbUIsRUFEQXR6QixHQUFBbU4seUJBQ0FuSCxZQUFBaEcsR0FBQTZGLGNBQUEsUUFDQStoQixFQUFBNW5CLEdBQUE2RixjQUFBLFNBTUEraEIsRUFBQW5KLGFBQUEsT0FBQSxTQUNBbUosRUFBQW5KLGFBQUEsVUFBQSxXQUNBbUosRUFBQW5KLGFBQUEsT0FBQSxLQUVBNlUsRUFBQXR0QixZQUFBNGhCLEdBSUE5VyxHQUFBQyxXQUFBdWlCLEVBQUFDLFdBQUEsR0FBQUEsV0FBQSxHQUFBNWxCLFVBQUF5QyxRQUlBa2pCLEVBQUE3bEIsVUFBQSx5QkFDQXFELEdBQUEwaUIsaUJBQUFGLEVBQUFDLFdBQUEsR0FBQTVsQixVQUFBMEMsZ0JBRUEsSUFBQTBXLEdBQUEvbUIsR0FBQSttQixnQkFLQTBNLEdBQUEsT0FDQUMsR0FBQSxpREFDQUMsR0FBQSxzQkFtRkFydEIsR0FBQXBHLE9BRUErRSxVQUVBOEosSUFBQSxTQUFBdEksRUFBQThILEVBQUFrUixFQUFBcGUsRUFBQW1OLEdBRUEsSUFBQW9sQixFQUFBQyxFQUFBL21CLEVBQ0ErQyxFQUFBaWtCLEVBQUFDLEVBQ0FyRSxFQUFBc0UsRUFBQTN0QixFQUFBNHRCLEVBQUFDLEVBQ0FDLEVBQUF0b0IsR0FBQUMsSUFBQXJGLEdBR0EsR0FBQTB0QixFQXVDQSxJQWxDQTFVLEVBQUFBLFVBRUFBLEdBREFtVSxFQUFBblUsR0FDQUEsUUFDQWpSLEVBQUFvbEIsRUFBQXBsQixVQUtBQSxHQUNBbEksR0FBQXNkLEtBQUFpRSxnQkFBQWQsR0FBQXZZLEdBSUFpUixFQUFBM1EsT0FDQTJRLEVBQUEzUSxLQUFBeEksR0FBQXdJLFNBSUFlLEVBQUFza0IsRUFBQXRrQixVQUNBQSxFQUFBc2tCLEVBQUF0a0IsWUFFQWdrQixFQUFBTSxFQUFBbmtCLFVBQ0E2akIsRUFBQU0sRUFBQW5rQixPQUFBLFNBQUFoRyxHQUlBLFlBQUEsSUFBQTFELElBQUFBLEdBQUFwRyxNQUFBazBCLFlBQUFwcUIsRUFBQTNELEtBQ0FDLEdBQUFwRyxNQUFBbTBCLFNBQUFyckIsTUFBQXZDLEVBQUFvSSxnQkFBQTVGLElBTUE2cUIsR0FEQXZsQixHQUFBQSxHQUFBLElBQUF4RyxNQUFBQyxNQUFBLEtBQ0F0RixPQUNBb3hCLEtBRUF6dEIsRUFBQTZ0QixHQURBcG5CLEVBQUE2bUIsR0FBQTNvQixLQUFBdUQsRUFBQXVsQixTQUNBLEdBQ0FHLEdBQUFubkIsRUFBQSxJQUFBLElBQUFzTixNQUFBLEtBQUEwQixPQUdBelYsSUFLQXFwQixFQUFBcHBCLEdBQUFwRyxNQUFBd3ZCLFFBQUFycEIsT0FHQUEsR0FBQW1JLEVBQUFraEIsRUFBQTRFLGFBQUE1RSxFQUFBNkUsV0FBQWx1QixFQUdBcXBCLEVBQUFwcEIsR0FBQXBHLE1BQUF3dkIsUUFBQXJwQixPQUdBMHRCLEVBQUF6dEIsR0FBQTJKLFFBQ0E1SixLQUFBQSxFQUNBNnRCLFNBQUFBLEVBQ0E3eUIsS0FBQUEsRUFDQW9lLFFBQUFBLEVBQ0EzUSxLQUFBMlEsRUFBQTNRLEtBQ0FOLFNBQUFBLEVBQ0F1WCxhQUFBdlgsR0FBQWxJLEdBQUFxaUIsS0FBQTVnQixNQUFBZ2UsYUFBQXplLEtBQUFrSCxHQUNBZ21CLFVBQUFQLEVBQUEzYyxLQUFBLE1BQ0FzYyxJQUdBSSxFQUFBbmtCLEVBQUF4SixPQUNBMnRCLEVBQUFua0IsRUFBQXhKLE9BQ0FvdUIsY0FBQSxFQUdBL0UsRUFBQWdGLFFBQ0EsSUFBQWhGLEVBQUFnRixNQUFBeHRCLEtBQUFULEVBQUFwRixFQUFBNHlCLEVBQUFKLElBRUFwdEIsRUFBQTJnQixrQkFDQTNnQixFQUFBMmdCLGlCQUFBL2dCLEVBQUF3dEIsSUFLQW5FLEVBQUEzZ0IsTUFDQTJnQixFQUFBM2dCLElBQUE3SCxLQUFBVCxFQUFBc3RCLEdBRUFBLEVBQUF0VSxRQUFBM1EsT0FDQWlsQixFQUFBdFUsUUFBQTNRLEtBQUEyUSxFQUFBM1EsT0FLQU4sRUFDQXdsQixFQUFBMXdCLE9BQUEwd0IsRUFBQVMsZ0JBQUEsRUFBQVYsR0FFQUMsRUFBQWh4QixLQUFBK3dCLEdBSUF6dEIsR0FBQXBHLE1BQUErRSxPQUFBb0IsSUFBQSxJQU1BaUwsT0FBQSxTQUFBN0ssRUFBQThILEVBQUFrUixFQUFBalIsRUFBQW1tQixHQUVBLElBQUExbkIsRUFBQTJuQixFQUFBOW5CLEVBQ0ErQyxFQUFBaWtCLEVBQUFDLEVBQ0FyRSxFQUFBc0UsRUFBQTN0QixFQUFBNHRCLEVBQUFDLEVBQ0FDLEVBQUF0b0IsR0FBQWlFLFFBQUFySixJQUFBb0YsR0FBQUMsSUFBQXJGLEdBRUEsR0FBQTB0QixJQUFBdGtCLEVBQUFza0IsRUFBQXRrQixRQUFBLENBT0EsSUFEQWlrQixHQURBdmxCLEdBQUFBLEdBQUEsSUFBQXhHLE1BQUFDLE1BQUEsS0FDQXRGLE9BQ0FveEIsS0FNQSxHQUxBaG5CLEVBQUE2bUIsR0FBQTNvQixLQUFBdUQsRUFBQXVsQixRQUNBenRCLEVBQUE2dEIsRUFBQXBuQixFQUFBLEdBQ0FtbkIsR0FBQW5uQixFQUFBLElBQUEsSUFBQXNOLE1BQUEsS0FBQTBCLE9BR0F6VixFQUFBLENBZUEsSUFSQXFwQixFQUFBcHBCLEdBQUFwRyxNQUFBd3ZCLFFBQUFycEIsT0FFQTJ0QixFQUFBbmtCLEVBREF4SixHQUFBbUksRUFBQWtoQixFQUFBNEUsYUFBQTVFLEVBQUE2RSxXQUFBbHVCLE9BRUF5RyxFQUFBQSxFQUFBLElBQ0EsSUFBQW1ZLE9BQUEsVUFBQWdQLEVBQUEzYyxLQUFBLGlCQUFBLFdBR0FzZCxFQUFBM25CLEVBQUErbUIsRUFBQXR4QixPQUNBdUssS0FDQThtQixFQUFBQyxFQUFBL21CLElBRUEwbkIsR0FBQVQsSUFBQUgsRUFBQUcsVUFDQXpVLEdBQUFBLEVBQUEzUSxPQUFBaWxCLEVBQUFqbEIsTUFDQWhDLElBQUFBLEVBQUF4RixLQUFBeXNCLEVBQUFTLFlBQ0FobUIsR0FBQUEsSUFBQXVsQixFQUFBdmxCLFdBQ0EsT0FBQUEsSUFBQXVsQixFQUFBdmxCLFlBQ0F3bEIsRUFBQTF3QixPQUFBMkosRUFBQSxHQUVBOG1CLEVBQUF2bEIsVUFDQXdsQixFQUFBUyxnQkFFQS9FLEVBQUFwZSxRQUNBb2UsRUFBQXBlLE9BQUFwSyxLQUFBVCxFQUFBc3RCLElBT0FhLElBQUFaLEVBQUF0eEIsU0FDQWd0QixFQUFBbUYsV0FDQSxJQUFBbkYsRUFBQW1GLFNBQUEzdEIsS0FBQVQsRUFBQXd0QixFQUFBRSxFQUFBbmtCLFNBRUExSixHQUFBd3VCLFlBQUFydUIsRUFBQUosRUFBQTh0QixFQUFBbmtCLGVBR0FILEVBQUF4SixTQTFDQSxJQUFBQSxLQUFBd0osRUFDQXZKLEdBQUFwRyxNQUFBb1IsT0FBQTdLLEVBQUFKLEVBQUFrSSxFQUFBdWxCLEdBQUFyVSxFQUFBalIsR0FBQSxHQThDQWxJLEdBQUFvVyxjQUFBN00sSUFDQWhFLEdBQUF5RixPQUFBN0ssRUFBQSxtQkFJQTR0QixTQUFBLFNBQUFVLEdBR0EsSUFFQTF4QixFQUFBNEosRUFBQWYsRUFBQXVlLEVBQUFzSixFQUFBaUIsRUFGQTkwQixFQUFBb0csR0FBQXBHLE1BQUErMEIsSUFBQUYsR0FHQXZrQixFQUFBLElBQUE3TixNQUFBa00sVUFBQW5NLFFBQ0FzeEIsR0FBQW5vQixHQUFBQyxJQUFBMUssS0FBQSxlQUFBbEIsRUFBQW1HLFVBQ0FxcEIsRUFBQXBwQixHQUFBcEcsTUFBQXd2QixRQUFBeHZCLEVBQUFtRyxVQUtBLElBRkFtSyxFQUFBLEdBQUF0USxFQUVBbUQsRUFBQSxFQUFBQSxFQUFBd0wsVUFBQW5NLE9BQUFXLElBQ0FtTixFQUFBbk4sR0FBQXdMLFVBQUF4TCxHQU1BLEdBSEFuRCxFQUFBZzFCLGVBQUE5ekIsTUFHQXN1QixFQUFBeUYsY0FBQSxJQUFBekYsRUFBQXlGLFlBQUFqdUIsS0FBQTlGLEtBQUFsQixHQUFBLENBU0EsSUFKQTgwQixFQUFBMXVCLEdBQUFwRyxNQUFBOHpCLFNBQUE5c0IsS0FBQTlGLEtBQUFsQixFQUFBOHpCLEdBR0Ezd0IsRUFBQSxHQUNBb25CLEVBQUF1SyxFQUFBM3hCLFFBQUFuRCxFQUFBazFCLHdCQUlBLElBSEFsMUIsRUFBQW0xQixjQUFBNUssRUFBQWhrQixLQUVBd0csRUFBQSxHQUNBOG1CLEVBQUF0SixFQUFBdUosU0FBQS9tQixRQUNBL00sRUFBQW8xQixpQ0FJQXAxQixFQUFBcTFCLGFBQUFyMUIsRUFBQXExQixXQUFBanVCLEtBQUF5c0IsRUFBQVMsYUFFQXQwQixFQUFBNnpCLFVBQUFBLEVBQ0E3ekIsRUFBQW1CLEtBQUEweUIsRUFBQTF5QixVQUtBNEgsS0FIQWlELElBQUE1RixHQUFBcEcsTUFBQXd2QixRQUFBcUUsRUFBQUcsZUFBQWxrQixRQUNBK2pCLEVBQUF0VSxTQUFBelcsTUFBQXloQixFQUFBaGtCLEtBQUErSixNQUdBLEtBQUF0USxFQUFBdVYsT0FBQXZKLEtBQ0FoTSxFQUFBQyxpQkFDQUQsRUFBQXMxQixvQkFZQSxPQUpBOUYsRUFBQStGLGNBQ0EvRixFQUFBK0YsYUFBQXZ1QixLQUFBOUYsS0FBQWxCLEdBR0FBLEVBQUF1VixTQUdBdWUsU0FBQSxTQUFBOXpCLEVBQUE4ekIsR0FDQSxJQUFBM3dCLEVBQUEwd0IsRUFBQWhMLEVBQUEyTSxFQUFBQyxFQUNBWCxLQUNBUCxFQUFBVCxFQUFBUyxjQUNBaHRCLEVBQUF2SCxFQUFBMlksT0FHQSxHQUFBNGIsR0FJQWh0QixFQUFBTixZQU9BLFVBQUFqSCxFQUFBbUcsTUFBQW5HLEVBQUE0RCxRQUFBLEdBRUEsS0FBQTJELElBQUFyRyxLQUFBcUcsRUFBQUEsRUFBQXhCLFlBQUE3RSxLQUlBLEdBQUEsSUFBQXFHLEVBQUFOLFdBQUEsVUFBQWpILEVBQUFtRyxPQUFBLElBQUFvQixFQUFBeVksVUFBQSxDQUdBLElBRkF3VixLQUNBQyxLQUNBdHlCLEVBQUEsRUFBQUEsRUFBQW94QixFQUFBcHhCLFNBTUE0RixJQUFBMHNCLEVBRkE1TSxHQUhBZ0wsRUFBQUMsRUFBQTN3QixJQUdBbUwsU0FBQSxPQUdBbW5CLEVBQUE1TSxHQUFBZ0wsRUFBQWhPLGFBQ0F6ZixHQUFBeWlCLEVBQUEzbkIsTUFBQTJCLE1BQUEwRSxJQUFBLEVBQ0FuQixHQUFBc2QsS0FBQW1GLEVBQUEzbkIsS0FBQSxNQUFBcUcsSUFBQS9FLFFBRUFpekIsRUFBQTVNLElBQ0EyTSxFQUFBMXlCLEtBQUErd0IsR0FHQTJCLEVBQUFoekIsUUFDQXN5QixFQUFBaHlCLE1BQUF5RCxLQUFBZ0IsRUFBQXVzQixTQUFBMEIsSUFZQSxPQUxBanVCLEVBQUFyRyxLQUNBcXpCLEVBQUFULEVBQUF0eEIsUUFDQXN5QixFQUFBaHlCLE1BQUF5RCxLQUFBZ0IsRUFBQXVzQixTQUFBQSxFQUFBOXFCLE1BQUF1ckIsS0FHQU8sR0FHQVksUUFBQSxTQUFBbHZCLEVBQUFtdkIsR0FDQXBiLE9BQUFpWCxlQUFBcHJCLEdBQUF3dkIsTUFBQW5pQixVQUFBak4sR0FDQXF2QixZQUFBLEVBQ0FwRSxjQUFBLEVBRUE3bEIsSUFBQXhGLEdBQUFVLFdBQUE2dUIsR0FDQSxXQUNBLEdBQUF6MEIsS0FBQTQwQixjQUNBLE9BQUFILEVBQUF6MEIsS0FBQTQwQixnQkFHQSxXQUNBLEdBQUE1MEIsS0FBQTQwQixjQUNBLE9BQUE1MEIsS0FBQTQwQixjQUFBdHZCLElBSUF3RCxJQUFBLFNBQUE5SixHQUNBcWEsT0FBQWlYLGVBQUF0d0IsS0FBQXNGLEdBQ0FxdkIsWUFBQSxFQUNBcEUsY0FBQSxFQUNBc0UsVUFBQSxFQUNBNzFCLE1BQUFBLFFBTUE2MEIsSUFBQSxTQUFBZSxHQUNBLE9BQUFBLEVBQUExdkIsR0FBQWlELFNBQ0F5c0IsRUFDQSxJQUFBMXZCLEdBQUF3dkIsTUFBQUUsSUFHQXRHLFNBQ0F3RyxNQUdBQyxVQUFBLEdBRUFsTCxPQUdBbUwsUUFBQSxXQUNBLEdBQUFoMUIsT0FBQWdOLEtBQUFoTixLQUFBNnBCLE1BRUEsT0FEQTdwQixLQUFBNnBCLFNBQ0EsR0FHQXFKLGFBQUEsV0FFQStCLE1BQ0FELFFBQUEsV0FDQSxHQUFBaDFCLE9BQUFnTixLQUFBaE4sS0FBQWkxQixLQUVBLE9BREFqMUIsS0FBQWkxQixRQUNBLEdBR0EvQixhQUFBLFlBRUFnQyxPQUdBRixRQUFBLFdBQ0EsR0FBQSxhQUFBaDFCLEtBQUFpRixNQUFBakYsS0FBQWsxQixPQUFBOXZCLEVBQUFwRixLQUFBLFNBRUEsT0FEQUEsS0FBQWsxQixTQUNBLEdBS0E5b0IsU0FBQSxTQUFBdE4sR0FDQSxPQUFBc0csRUFBQXRHLEVBQUEyWSxPQUFBLE9BSUEwZCxjQUNBZCxhQUFBLFNBQUF2MUIsUUFJQStJLElBQUEvSSxFQUFBdVYsUUFBQXZWLEVBQUE4MUIsZ0JBQ0E5MUIsRUFBQTgxQixjQUFBUSxZQUFBdDJCLEVBQUF1VixZQU9BblAsR0FBQXd1QixZQUFBLFNBQUFydUIsRUFBQUosRUFBQTJKLEdBR0F2SixFQUFBMkMscUJBQ0EzQyxFQUFBMkMsb0JBQUEvQyxFQUFBMkosSUFJQTFKLEdBQUF3dkIsTUFBQSxTQUFBdm1CLEVBQUEyRixHQUdBLEtBQUE5VCxnQkFBQWtGLEdBQUF3dkIsT0FDQSxPQUFBLElBQUF4dkIsR0FBQXd2QixNQUFBdm1CLEVBQUEyRixHQUlBM0YsR0FBQUEsRUFBQWxKLE1BQ0FqRixLQUFBNDBCLGNBQUF6bUIsRUFDQW5PLEtBQUFpRixLQUFBa0osRUFBQWxKLEtBSUFqRixLQUFBcTFCLG1CQUFBbG5CLEVBQUFtbkIsdUJBQ0F6dEIsSUFBQXNHLEVBQUFtbkIsbUJBR0EsSUFBQW5uQixFQUFBaW5CLFlBQ0F0b0IsRUFDQUMsRUFLQS9NLEtBQUF5WCxPQUFBdEosRUFBQXNKLFFBQUEsSUFBQXRKLEVBQUFzSixPQUFBMVIsU0FDQW9JLEVBQUFzSixPQUFBNVMsV0FDQXNKLEVBQUFzSixPQUVBelgsS0FBQWkwQixjQUFBOWxCLEVBQUE4bEIsY0FDQWowQixLQUFBdTFCLGNBQUFwbkIsRUFBQW9uQixlQUlBdjFCLEtBQUFpRixLQUFBa0osRUFJQTJGLEdBQ0E1TyxHQUFBMkosT0FBQTdPLEtBQUE4VCxHQUlBOVQsS0FBQXcxQixVQUFBcm5CLEdBQUFBLEVBQUFxbkIsV0FBQXR3QixHQUFBZ08sTUFHQWxULEtBQUFrRixHQUFBaUQsVUFBQSxHQUtBakQsR0FBQXd2QixNQUFBbmlCLFdBQ0E2SCxZQUFBbFYsR0FBQXd2QixNQUNBVyxtQkFBQXRvQixFQUNBaW5CLHFCQUFBam5CLEVBQ0FtbkIsOEJBQUFubkIsRUFDQTBvQixhQUFBLEVBRUExMkIsZUFBQSxXQUNBLElBQUE2SixFQUFBNUksS0FBQTQwQixjQUVBNTBCLEtBQUFxMUIsbUJBQUF2b0IsRUFFQWxFLElBQUE1SSxLQUFBeTFCLGFBQ0E3c0IsRUFBQTdKLGtCQUdBcTFCLGdCQUFBLFdBQ0EsSUFBQXhyQixFQUFBNUksS0FBQTQwQixjQUVBNTBCLEtBQUFnMEIscUJBQUFsbkIsRUFFQWxFLElBQUE1SSxLQUFBeTFCLGFBQ0E3c0IsRUFBQXdyQixtQkFHQXNCLHlCQUFBLFdBQ0EsSUFBQTlzQixFQUFBNUksS0FBQTQwQixjQUVBNTBCLEtBQUFrMEIsOEJBQUFwbkIsRUFFQWxFLElBQUE1SSxLQUFBeTFCLGFBQ0E3c0IsRUFBQThzQiwyQkFHQTExQixLQUFBbzBCLG9CQUtBbHZCLEdBQUF3QixNQUNBaXZCLFFBQUEsRUFDQUMsU0FBQSxFQUNBQyxZQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLFNBQUEsRUFDQUMsUUFBQSxFQUNBQyxZQUFBLEVBQ0FDLFNBQUEsRUFDQUMsT0FBQSxFQUNBQyxPQUFBLEVBQ0FDLFVBQUEsRUFDQUMsTUFBQSxFQUNBQyxNQUFBLEVBQ0FDLFVBQUEsRUFDQWh1QixLQUFBLEVBQ0FpdUIsU0FBQSxFQUNBL3pCLFFBQUEsRUFDQWcwQixTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsV0FBQSxFQUNBQyxhQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxlQUFBLEVBQ0FDLFdBQUEsRUFDQUMsU0FBQSxFQUVBaGtCLE1BQUEsU0FBQXZVLEdBQ0EsSUFBQTRELEVBQUE1RCxFQUFBNEQsT0FHQSxPQUFBLE1BQUE1RCxFQUFBdVUsT0FBQWdmLEdBQUFuc0IsS0FBQXBILEVBQUFtRyxNQUNBLE1BQUFuRyxFQUFBMDNCLFNBQUExM0IsRUFBQTAzQixTQUFBMTNCLEVBQUEyM0IsU0FJQTMzQixFQUFBdVUsWUFBQXhMLElBQUFuRixHQUFBNHZCLEdBQUFwc0IsS0FBQXBILEVBQUFtRyxNQUNBLEVBQUF2QyxFQUNBLEVBR0EsRUFBQUEsRUFDQSxFQUdBLEVBQUFBLEVBQ0EsRUFHQSxFQUdBNUQsRUFBQXVVLFFBRUFuTyxHQUFBcEcsTUFBQTAxQixTQVVBdHZCLEdBQUF3QixNQUNBNHdCLFdBQUEsWUFDQUMsV0FBQSxXQUNBQyxhQUFBLGNBQ0FDLGFBQUEsY0FDQSxTQUFBQyxFQUFBN0QsR0FDQTN1QixHQUFBcEcsTUFBQXd2QixRQUFBb0osSUFDQXhFLGFBQUFXLEVBQ0FWLFNBQUFVLEVBRUFqbEIsT0FBQSxTQUFBOVAsR0FDQSxJQUFBZ00sRUFDQTJNLEVBQUF6WCxLQUNBMjNCLEVBQUE3NEIsRUFBQXkyQixjQUNBNUMsRUFBQTd6QixFQUFBNnpCLFVBU0EsT0FMQWdGLElBQUFBLElBQUFsZ0IsR0FBQXZTLEdBQUEwRyxTQUFBNkwsRUFBQWtnQixNQUNBNzRCLEVBQUFtRyxLQUFBMHRCLEVBQUFHLFNBQ0Fob0IsRUFBQTZuQixFQUFBdFUsUUFBQXpXLE1BQUE1SCxLQUFBeU4sV0FDQTNPLEVBQUFtRyxLQUFBNHVCLEdBRUEvb0IsTUFLQTVGLEdBQUFtSSxHQUFBd0IsUUFFQWhRLEdBQUEsU0FBQXNPLEVBQUFDLEVBQUFuTixFQUFBb04sR0FDQSxPQUFBeE8sRUFBQW1CLEtBQUFtTixFQUFBQyxFQUFBbk4sRUFBQW9OLElBRUFDLElBQUEsU0FBQUgsRUFBQUMsRUFBQW5OLEVBQUFvTixHQUNBLE9BQUF4TyxFQUFBbUIsS0FBQW1OLEVBQUFDLEVBQUFuTixFQUFBb04sRUFBQSxJQUVBRyxJQUFBLFNBQUFMLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXNsQixFQUFBMXRCLEVBQ0EsR0FBQWtJLEdBQUFBLEVBQUFwTyxnQkFBQW9PLEVBQUF3bEIsVUFXQSxPQVJBQSxFQUFBeGxCLEVBQUF3bEIsVUFDQXp0QixHQUFBaUksRUFBQTJtQixnQkFBQXRtQixJQUNBbWxCLEVBQUFTLFVBQ0FULEVBQUFHLFNBQUEsSUFBQUgsRUFBQVMsVUFDQVQsRUFBQUcsU0FDQUgsRUFBQXZsQixTQUNBdWxCLEVBQUF0VSxTQUVBcmUsS0FFQSxHQUFBLGlCQUFBbU4sRUFBQSxDQUdBLElBQUFsSSxLQUFBa0ksRUFDQW5OLEtBQUF3TixJQUFBdkksRUFBQW1JLEVBQUFELEVBQUFsSSxJQUVBLE9BQUFqRixLQVdBLE9BVEEsSUFBQW9OLEdBQUEsbUJBQUFBLElBR0FDLEVBQUFELEVBQ0FBLE9BQUF2RixJQUVBLElBQUF3RixJQUNBQSxFQUFBTixHQUVBL00sS0FBQTBHLEtBQUEsV0FDQXhCLEdBQUFwRyxNQUFBb1IsT0FBQWxRLEtBQUFtTixFQUFBRSxFQUFBRCxRQU1BLElBS0F3cUIsR0FBQSw4RkFPQUMsR0FBQSx3QkFHQWpvQixHQUFBLG9DQUNBNUIsR0FBQSxjQUNBaUMsR0FBQSwyQ0E2TEEvSyxHQUFBMkosUUFDQXZDLGNBQUEsU0FBQXhMLEdBQ0EsT0FBQUEsRUFBQTJILFFBQUFtdkIsR0FBQSxjQUdBN25CLE1BQUEsU0FBQTFLLEVBQUF5eUIsRUFBQUMsR0FDQSxJQUFBOTFCLEVBQUFvSixFQUFBMnNCLEVBQUFDLEVBQ0Fsb0IsRUFBQTFLLEVBQUE4c0IsV0FBQSxHQUNBK0YsRUFBQWh6QixHQUFBMEcsU0FBQXZHLEVBQUE2RSxjQUFBN0UsR0FHQSxLQUFBcUssR0FBQTBpQixnQkFBQSxJQUFBL3NCLEVBQUFVLFVBQUEsS0FBQVYsRUFBQVUsVUFDQWIsR0FBQXFtQixTQUFBbG1CLElBTUEsSUFIQTR5QixFQUFBcnRCLEVBQUFtRixHQUdBOU4sRUFBQSxFQUFBb0osR0FGQTJzQixFQUFBcHRCLEVBQUF2RixJQUVBL0QsT0FBQVcsRUFBQW9KLEVBQUFwSixJQUNBNk0sRUFBQWtwQixFQUFBLzFCLEdBQUFnMkIsRUFBQWgyQixJQUtBLEdBQUE2MUIsRUFDQSxHQUFBQyxFQUlBLElBSEFDLEVBQUFBLEdBQUFwdEIsRUFBQXZGLEdBQ0E0eUIsRUFBQUEsR0FBQXJ0QixFQUFBbUYsR0FFQTlOLEVBQUEsRUFBQW9KLEVBQUEyc0IsRUFBQTEyQixPQUFBVyxFQUFBb0osRUFBQXBKLElBQ0FpTSxFQUFBOHBCLEVBQUEvMUIsR0FBQWcyQixFQUFBaDJCLFNBR0FpTSxFQUFBN0ksRUFBQTBLLEdBV0EsT0FOQWtvQixFQUFBcnRCLEVBQUFtRixFQUFBLFdBQ0F6TyxPQUFBLEdBQ0E0SixFQUFBK3NCLEdBQUFDLEdBQUF0dEIsRUFBQXZGLEVBQUEsV0FJQTBLLEdBR0FLLFVBQUEsU0FBQWpGLEdBS0EsSUFKQSxJQUFBbEwsRUFBQW9GLEVBQUFKLEVBQ0FxcEIsRUFBQXBwQixHQUFBcEcsTUFBQXd2QixRQUNBcnNCLEVBQUEsT0FFQTRGLEtBQUF4QyxFQUFBOEYsRUFBQWxKLElBQUFBLElBQ0EsR0FBQW11QixHQUFBL3FCLEdBQUEsQ0FDQSxHQUFBcEYsRUFBQW9GLEVBQUFvRixHQUFBdEMsU0FBQSxDQUNBLEdBQUFsSSxFQUFBd08sT0FDQSxJQUFBeEosS0FBQWhGLEVBQUF3TyxPQUNBNmYsRUFBQXJwQixHQUNBQyxHQUFBcEcsTUFBQW9SLE9BQUE3SyxFQUFBSixHQUlBQyxHQUFBd3VCLFlBQUFydUIsRUFBQUosRUFBQWhGLEVBQUEyTyxRQU9BdkosRUFBQW9GLEdBQUF0QyxjQUFBTixFQUVBeEMsRUFBQXdELEdBQUFWLFdBSUE5QyxFQUFBd0QsR0FBQVYsY0FBQU4sT0FPQTNDLEdBQUFtSSxHQUFBd0IsUUFDQXNwQixPQUFBLFNBQUEvcUIsR0FDQSxPQUFBOEMsRUFBQWxRLEtBQUFvTixHQUFBLElBR0E4QyxPQUFBLFNBQUE5QyxHQUNBLE9BQUE4QyxFQUFBbFEsS0FBQW9OLElBR0ExSSxLQUFBLFNBQUExRixHQUNBLE9BQUEyUCxHQUFBM08sS0FBQSxTQUFBaEIsR0FDQSxZQUFBNkksSUFBQTdJLEVBQ0FrRyxHQUFBUixLQUFBMUUsTUFDQUEsS0FBQW1xQixRQUFBempCLEtBQUEsV0FDQSxJQUFBMUcsS0FBQStGLFVBQUEsS0FBQS9GLEtBQUErRixVQUFBLElBQUEvRixLQUFBK0YsV0FDQS9GLEtBQUEwTSxZQUFBMU4sTUFHQSxLQUFBQSxFQUFBeU8sVUFBQW5NLFNBR0E4MkIsT0FBQSxXQUNBLE9BQUFscEIsRUFBQWxQLEtBQUF5TixVQUFBLFNBQUFwSSxHQUNBLElBQUFyRixLQUFBK0YsVUFBQSxLQUFBL0YsS0FBQStGLFVBQUEsSUFBQS9GLEtBQUErRixVQUNBNkgsRUFBQTVOLEtBQUFxRixHQUNBVCxZQUFBUyxNQUtBZ3pCLFFBQUEsV0FDQSxPQUFBbnBCLEVBQUFsUCxLQUFBeU4sVUFBQSxTQUFBcEksR0FDQSxHQUFBLElBQUFyRixLQUFBK0YsVUFBQSxLQUFBL0YsS0FBQStGLFVBQUEsSUFBQS9GLEtBQUErRixTQUFBLENBQ0EsSUFBQTBSLEVBQUE3SixFQUFBNU4sS0FBQXFGLEdBQ0FvUyxFQUFBNmdCLGFBQUFqekIsRUFBQW9TLEVBQUFoTCxnQkFLQThyQixPQUFBLFdBQ0EsT0FBQXJwQixFQUFBbFAsS0FBQXlOLFVBQUEsU0FBQXBJLEdBQ0FyRixLQUFBNkUsWUFDQTdFLEtBQUE2RSxXQUFBeXpCLGFBQUFqekIsRUFBQXJGLFNBS0F3NEIsTUFBQSxXQUNBLE9BQUF0cEIsRUFBQWxQLEtBQUF5TixVQUFBLFNBQUFwSSxHQUNBckYsS0FBQTZFLFlBQ0E3RSxLQUFBNkUsV0FBQXl6QixhQUFBanpCLEVBQUFyRixLQUFBNGUsZ0JBS0F1TCxNQUFBLFdBSUEsSUFIQSxJQUFBOWtCLEVBQ0FwRCxFQUFBLEVBRUEsT0FBQW9ELEVBQUFyRixLQUFBaUMsSUFBQUEsSUFDQSxJQUFBb0QsRUFBQVUsV0FHQWIsR0FBQWtMLFVBQUF4RixFQUFBdkYsR0FBQSxJQUdBQSxFQUFBcUgsWUFBQSxJQUlBLE9BQUExTSxNQUdBK1AsTUFBQSxTQUFBK25CLEVBQUFDLEdBSUEsT0FIQUQsRUFBQSxNQUFBQSxHQUFBQSxFQUNBQyxFQUFBLE1BQUFBLEVBQUFELEVBQUFDLEVBRUEvM0IsS0FBQThQLElBQUEsV0FDQSxPQUFBNUssR0FBQTZLLE1BQUEvUCxLQUFBODNCLEVBQUFDLE1BSUFqM0IsS0FBQSxTQUFBOUIsR0FDQSxPQUFBMlAsR0FBQTNPLEtBQUEsU0FBQWhCLEdBQ0EsSUFBQXFHLEVBQUFyRixLQUFBLE9BQ0FpQyxFQUFBLEVBQ0FvSixFQUFBckwsS0FBQXNCLE9BRUEsUUFBQXVHLElBQUE3SSxHQUFBLElBQUFxRyxFQUFBVSxTQUNBLE9BQUFWLEVBQUFnSCxVQUlBLEdBQUEsaUJBQUFyTixJQUFBNjRCLEdBQUEzeEIsS0FBQWxILEtBQ0FtTixJQUFBRCxHQUFBdEMsS0FBQTVLLEtBQUEsR0FBQSxLQUFBLEdBQUF1RyxlQUFBLENBRUF2RyxFQUFBa0csR0FBQW9ILGNBQUF0TixHQUVBLElBQ0EsS0FBQWlELEVBQUFvSixFQUFBcEosSUFJQSxLQUhBb0QsRUFBQXJGLEtBQUFpQyxRQUdBOEQsV0FDQWIsR0FBQWtMLFVBQUF4RixFQUFBdkYsR0FBQSxJQUNBQSxFQUFBZ0gsVUFBQXJOLEdBSUFxRyxFQUFBLEVBR0EsTUFBQXVELEtBR0F2RCxHQUNBckYsS0FBQW1xQixRQUFBaU8sT0FBQXA1QixJQUVBLEtBQUFBLEVBQUF5TyxVQUFBbk0sU0FHQW0zQixZQUFBLFdBQ0EsSUFBQWh0QixLQUdBLE9BQUF5RCxFQUFBbFAsS0FBQXlOLFVBQUEsU0FBQXBJLEdBQ0EsSUFBQTRqQixFQUFBanBCLEtBQUE2RSxXQUVBSyxHQUFBMEgsUUFBQTVNLEtBQUF5TCxHQUFBLElBQ0F2RyxHQUFBa0wsVUFBQXhGLEVBQUE1SyxPQUNBaXBCLEdBQ0FBLEVBQUF5UCxhQUFBcnpCLEVBQUFyRixRQUtBeUwsTUFJQXZHLEdBQUF3QixNQUNBaXlCLFNBQUEsU0FDQUMsVUFBQSxVQUNBTixhQUFBLFNBQ0FPLFlBQUEsUUFDQUMsV0FBQSxlQUNBLFNBQUF4ekIsRUFBQXl6QixHQUNBN3pCLEdBQUFtSSxHQUFBL0gsR0FBQSxTQUFBOEgsR0FPQSxJQU5BLElBQUFqQyxFQUNBTCxLQUNBa3VCLEVBQUE5ekIsR0FBQWtJLEdBQ0E5SixFQUFBMDFCLEVBQUExM0IsT0FBQSxFQUNBVyxFQUFBLEVBRUFBLEdBQUFxQixFQUFBckIsSUFDQWtKLEVBQUFsSixJQUFBcUIsRUFBQXRELEtBQUFBLEtBQUErUCxPQUFBLEdBQ0E3SyxHQUFBOHpCLEVBQUEvMkIsSUFBQTgyQixHQUFBNXRCLEdBSUF2SixHQUFBZ0csTUFBQWtELEVBQUFLLEVBQUFULE9BR0EsT0FBQTFLLEtBQUF1YSxVQUFBelAsTUFHQSxJQUFBOEYsR0FBQSxVQUVBRCxHQUFBLElBQUFrVCxPQUFBLEtBQUFvTixHQUFBLGtCQUFBLEtBRUF6Z0IsR0FBQSxTQUFBbkwsR0FLQSxJQUFBaXhCLEVBQUFqeEIsRUFBQTZFLGNBQUE0YixZQU1BLE9BSkF3USxHQUFBQSxFQUFBMkMsU0FDQTNDLEVBQUFueUIsR0FHQW15QixFQUFBNEMsaUJBQUE3ekIsS0FLQSxXQUlBLFNBQUE4ekIsSUFHQSxHQUFBakgsRUFBQSxDQUlBQSxFQUFBcm9CLE1BQUF1dkIsUUFDQSw0R0FJQWxILEVBQUE3bEIsVUFBQSxHQUNBc1osR0FBQS9nQixZQUFBeTBCLEdBRUEsSUFBQUMsRUFBQW4xQixFQUFBKzBCLGlCQUFBaEgsR0FDQXFILEVBQUEsT0FBQUQsRUFBQXZULElBR0F5VCxFQUFBLFFBQUFGLEVBQUFHLFdBQ0FDLEVBQUEsUUFBQUosRUFBQTcyQixNQUlBeXZCLEVBQUFyb0IsTUFBQTh2QixZQUFBLE1BQ0FDLEVBQUEsUUFBQU4sRUFBQUssWUFFQWhVLEdBQUE3Z0IsWUFBQXUwQixHQUlBbkgsRUFBQSxNQUdBLElBQUFxSCxFQUFBRyxFQUFBRSxFQUFBSixFQUNBSCxFQUFBejZCLEdBQUE2RixjQUFBLE9BQ0F5dEIsRUFBQXR6QixHQUFBNkYsY0FBQSxPQUdBeXRCLEVBQUFyb0IsUUFNQXFvQixFQUFBcm9CLE1BQUFnd0IsZUFBQSxjQUNBM0gsRUFBQUMsV0FBQSxHQUFBdG9CLE1BQUFnd0IsZUFBQSxHQUNBbnFCLEdBQUFvcUIsZ0JBQUEsZ0JBQUE1SCxFQUFBcm9CLE1BQUFnd0IsZUFFQVIsRUFBQXh2QixNQUFBdXZCLFFBQUEsNEZBRUFDLEVBQUF6MEIsWUFBQXN0QixHQUVBaHRCLEdBQUEySixPQUFBYSxJQUNBcXFCLGNBQUEsV0FFQSxPQURBWixJQUNBSSxHQUVBcG5CLGtCQUFBLFdBRUEsT0FEQWduQixJQUNBTyxHQUVBaHBCLGlCQUFBLFdBRUEsT0FEQXlvQixJQUNBUyxHQUVBSSxtQkFBQSxXQUVBLE9BREFiLElBQ0FLLFNBK0VBLElBS0FTLEdBQUEsNEJBQ0FDLEdBQUEsTUFDQUMsSUFBQTkzQixTQUFBLFdBQUErM0IsV0FBQSxTQUFBandCLFFBQUEsU0FDQWt3QixJQUNBQyxjQUFBLElBQ0FDLFdBQUEsT0FHQW5wQixJQUFBLFNBQUEsTUFBQSxNQUNBSCxHQUFBclMsR0FBQTZGLGNBQUEsT0FBQW9GLE1BaUlBM0UsR0FBQTJKLFFBSUFxRixVQUNBVixTQUNBOUksSUFBQSxTQUFBckYsRUFBQWlMLEdBQ0EsR0FBQUEsRUFBQSxDQUdBLElBQUF4RixFQUFBdUYsRUFBQWhMLEVBQUEsV0FDQSxNQUFBLEtBQUF5RixFQUFBLElBQUFBLE1BT0FyQixXQUNBK3dCLHlCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsYUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFlBQUEsRUFDQUwsWUFBQSxFQUNBTSxZQUFBLEVBQ0FybkIsU0FBQSxFQUNBc25CLE9BQUEsRUFDQUMsU0FBQSxFQUNBQyxRQUFBLEVBQ0FDLFFBQUEsRUFDQUMsTUFBQSxHQUtBNXBCLFVBQ0E2cEIsTUFBQSxZQUlBdHhCLE1BQUEsU0FBQXhFLEVBQUFDLEVBQUF0RyxFQUFBNlMsR0FHQSxHQUFBeE0sR0FBQSxJQUFBQSxFQUFBVSxVQUFBLElBQUFWLEVBQUFVLFVBQUFWLEVBQUF3RSxNQUFBLENBS0EsSUFBQWlCLEVBQUE3RixFQUFBK08sRUFDQW9uQixFQUFBbDJCLEdBQUErTyxVQUFBM08sR0FDQSsxQixFQUFBbkIsR0FBQWgwQixLQUFBWixHQUNBdUUsRUFBQXhFLEVBQUF3RSxNQWFBLEdBUkF3eEIsSUFDQS8xQixFQUFBK0wsRUFBQStwQixJQUlBcG5CLEVBQUE5TyxHQUFBZ1AsU0FBQTVPLElBQUFKLEdBQUFnUCxTQUFBa25CLFFBR0F2ekIsSUFBQTdJLEVBd0NBLE9BQUFnVixHQUFBLFFBQUFBLFFBQ0FuTSxLQUFBaUQsRUFBQWtKLEVBQUF0SixJQUFBckYsR0FBQSxFQUFBd00sSUFFQS9HLEVBSUFqQixFQUFBdkUsR0EzQ0EsV0FIQUwsU0FBQWpHLEtBR0E4TCxFQUFBbkIsR0FBQUMsS0FBQTVLLEtBQUE4TCxFQUFBLEtBQ0E5TCxFQUFBK0osRUFBQTFELEVBQUFDLEVBQUF3RixHQUdBN0YsRUFBQSxVQUlBLE1BQUFqRyxHQUFBQSxJQUFBQSxJQUtBLFdBQUFpRyxJQUNBakcsR0FBQThMLEdBQUFBLEVBQUEsS0FBQTVGLEdBQUF1RSxVQUFBMnhCLEdBQUEsR0FBQSxPQUlBMXJCLEdBQUFvcUIsaUJBQUEsS0FBQTk2QixHQUFBLElBQUFzRyxFQUFBVSxRQUFBLGdCQUNBNkQsRUFBQXZFLEdBQUEsV0FJQTBPLEdBQUEsUUFBQUEsUUFDQW5NLEtBQUE3SSxFQUFBZ1YsRUFBQWxMLElBQUF6RCxFQUFBckcsRUFBQTZTLE1BRUF3cEIsRUFDQXh4QixFQUFBeXhCLFlBQUFoMkIsRUFBQXRHLEdBRUE2SyxFQUFBdkUsR0FBQXRHLE1Ba0JBOEQsSUFBQSxTQUFBdUMsRUFBQUMsRUFBQXVNLEVBQUFFLEdBQ0EsSUFBQTlTLEVBQUFxYixFQUFBdEcsRUFDQW9uQixFQUFBbDJCLEdBQUErTyxVQUFBM08sR0E2QkEsT0E1QkE0MEIsR0FBQWgwQixLQUFBWixLQU1BQSxFQUFBK0wsRUFBQStwQixLQUlBcG5CLEVBQUE5TyxHQUFBZ1AsU0FBQTVPLElBQUFKLEdBQUFnUCxTQUFBa25CLEtBR0EsUUFBQXBuQixJQUNBL1UsRUFBQStVLEVBQUF0SixJQUFBckYsR0FBQSxFQUFBd00sU0FJQWhLLElBQUE1SSxJQUNBQSxFQUFBb1IsRUFBQWhMLEVBQUFDLEVBQUF5TSxJQUlBLFdBQUE5UyxHQUFBcUcsS0FBQSswQixLQUNBcDdCLEVBQUFvN0IsR0FBQS8wQixJQUlBLEtBQUF1TSxHQUFBQSxHQUNBeUksRUFBQWxJLFdBQUFuVCxJQUNBLElBQUE0UyxHQUFBMHBCLFNBQUFqaEIsR0FBQUEsR0FBQSxFQUFBcmIsR0FHQUEsS0FJQWlHLEdBQUF3QixNQUFBLFNBQUEsU0FBQSxTQUFBekUsRUFBQXFELEdBQ0FKLEdBQUFnUCxTQUFBNU8sSUFDQW9GLElBQUEsU0FBQXJGLEVBQUFpTCxFQUFBdUIsR0FDQSxHQUFBdkIsRUFJQSxPQUFBMnBCLEdBQUEvekIsS0FBQWhCLEdBQUFwQyxJQUFBdUMsRUFBQSxhQVFBQSxFQUFBbTJCLGlCQUFBbDZCLFFBQUErRCxFQUFBbzJCLHdCQUFBaDVCLE1BSUF3UCxFQUFBNU0sRUFBQUMsRUFBQXVNLEdBSEFzZixHQUFBOXJCLEVBQUE4MEIsR0FBQSxXQUNBLE9BQUFsb0IsRUFBQTVNLEVBQUFDLEVBQUF1TSxNQU1BL0ksSUFBQSxTQUFBekQsRUFBQXJHLEVBQUE2UyxHQUNBLElBQUFKLEVBQ0FNLEVBQUFGLEdBQUFyQixHQUFBbkwsR0FDQW1NLEVBQUFLLEdBQUFELEVBQ0F2TSxFQUNBQyxFQUNBdU0sRUFDQSxlQUFBM00sR0FBQXBDLElBQUF1QyxFQUFBLGFBQUEsRUFBQTBNLEdBQ0FBLEdBV0EsT0FQQVAsSUFBQUMsRUFBQTlILEdBQUFDLEtBQUE1SyxLQUNBLFFBQUF5UyxFQUFBLElBQUEsUUFFQXBNLEVBQUF3RSxNQUFBdkUsR0FBQXRHLEVBQ0FBLEVBQUFrRyxHQUFBcEMsSUFBQXVDLEVBQUFDLElBR0FpTSxFQUFBbE0sRUFBQXJHLEVBQUF3UyxPQUtBdE0sR0FBQWdQLFNBQUF1bEIsV0FBQTVvQixFQUFBbkIsR0FBQXNxQixtQkFDQSxTQUFBMzBCLEVBQUFpTCxHQUNBLEdBQUFBLEVBQ0EsT0FBQThCLFdBQUEvQixFQUFBaEwsRUFBQSxnQkFDQUEsRUFBQW8yQix3QkFBQTE0QixLQUNBb3VCLEdBQUE5ckIsR0FBQW8wQixXQUFBLEdBQUEsV0FDQSxPQUFBcDBCLEVBQUFvMkIsd0JBQUExNEIsUUFFQSxPQU1BbUMsR0FBQXdCLE1BQ0FnMUIsT0FBQSxHQUNBQyxRQUFBLEdBQ0FDLE9BQUEsU0FDQSxTQUFBdmxCLEVBQUF3bEIsR0FDQTMyQixHQUFBZ1AsU0FBQW1DLEVBQUF3bEIsSUFDQTFuQixPQUFBLFNBQUFuVixHQU9BLElBTkEsSUFBQWlELEVBQUEsRUFDQTY1QixLQUdBQyxFQUFBLGlCQUFBLzhCLEVBQUFBLEVBQUFnYSxNQUFBLE1BQUFoYSxHQUVBaUQsRUFBQSxFQUFBQSxJQUNBNjVCLEVBQUF6bEIsRUFBQXJFLEdBQUEvUCxHQUFBNDVCLEdBQ0FFLEVBQUE5NUIsSUFBQTg1QixFQUFBOTVCLEVBQUEsSUFBQTg1QixFQUFBLEdBR0EsT0FBQUQsSUFJQWxyQixHQUFBMUssS0FBQW1RLEtBQ0FuUixHQUFBZ1AsU0FBQW1DLEVBQUF3bEIsR0FBQS95QixJQUFBeUksS0FJQXJNLEdBQUFtSSxHQUFBd0IsUUFDQS9MLElBQUEsU0FBQXdDLEVBQUF0RyxHQUNBLE9BQUEyUCxHQUFBM08sS0FBQSxTQUFBcUYsRUFBQUMsRUFBQXRHLEdBQ0EsSUFBQStTLEVBQUEwSSxFQUNBM0ssS0FDQTdOLEVBQUEsRUFFQSxHQUFBVixNQUFBQyxRQUFBOEQsR0FBQSxDQUlBLElBSEF5TSxFQUFBdkIsR0FBQW5MLEdBQ0FvVixFQUFBblYsRUFBQWhFLE9BRUFXLEVBQUF3WSxFQUFBeFksSUFDQTZOLEVBQUF4SyxFQUFBckQsSUFBQWlELEdBQUFwQyxJQUFBdUMsRUFBQUMsRUFBQXJELElBQUEsRUFBQThQLEdBR0EsT0FBQWpDLEVBR0EsWUFBQWpJLElBQUE3SSxFQUNBa0csR0FBQTJFLE1BQUF4RSxFQUFBQyxFQUFBdEcsR0FDQWtHLEdBQUFwQyxJQUFBdUMsRUFBQUMsSUFDQUEsRUFBQXRHLEVBQUF5TyxVQUFBbk0sT0FBQSxNQVFBNEQsR0FBQW1OLE1BQUFBLEVBRUFBLEVBQUFFLFdBQ0E2SCxZQUFBL0gsRUFDQS9SLEtBQUEsU0FBQStFLEVBQUFtQixFQUFBd0MsRUFBQWUsRUFBQXVJLEVBQUE5SSxHQUNBeEosS0FBQXFGLEtBQUFBLEVBQ0FyRixLQUFBZ0osS0FBQUEsRUFDQWhKLEtBQUFzUyxPQUFBQSxHQUFBcE4sR0FBQW9OLE9BQUFsRyxTQUNBcE0sS0FBQXdHLFFBQUFBLEVBQ0F4RyxLQUFBOEosTUFBQTlKLEtBQUFrVCxJQUFBbFQsS0FBQXFHLE1BQ0FyRyxLQUFBK0osSUFBQUEsRUFDQS9KLEtBQUF3SixLQUFBQSxJQUFBdEUsR0FBQXVFLFVBQUFULEdBQUEsR0FBQSxPQUVBM0MsSUFBQSxXQUNBLElBQUEyTixFQUFBM0IsRUFBQTJwQixVQUFBaDhCLEtBQUFnSixNQUVBLE9BQUFnTCxHQUFBQSxFQUFBdEosSUFDQXNKLEVBQUF0SixJQUFBMUssTUFDQXFTLEVBQUEycEIsVUFBQTV2QixTQUFBMUIsSUFBQTFLLE9BRUFpVixJQUFBLFNBQUFGLEdBQ0EsSUFBQWtuQixFQUNBam9CLEVBQUEzQixFQUFBMnBCLFVBQUFoOEIsS0FBQWdKLE1Bb0JBLE9BbEJBaEosS0FBQXdHLFFBQUFzTyxTQUNBOVUsS0FBQWs4QixJQUFBRCxFQUFBLzJCLEdBQUFvTixPQUFBdFMsS0FBQXNTLFFBQ0F5QyxFQUFBL1UsS0FBQXdHLFFBQUFzTyxTQUFBQyxFQUFBLEVBQUEsRUFBQS9VLEtBQUF3RyxRQUFBc08sVUFHQTlVLEtBQUFrOEIsSUFBQUQsRUFBQWxuQixFQUVBL1UsS0FBQWtULEtBQUFsVCxLQUFBK0osSUFBQS9KLEtBQUE4SixPQUFBbXlCLEVBQUFqOEIsS0FBQThKLE1BRUE5SixLQUFBd0csUUFBQTIxQixNQUNBbjhCLEtBQUF3RyxRQUFBMjFCLEtBQUFyMkIsS0FBQTlGLEtBQUFxRixLQUFBckYsS0FBQWtULElBQUFsVCxNQUdBZ1UsR0FBQUEsRUFBQWxMLElBQ0FrTCxFQUFBbEwsSUFBQTlJLE1BRUFxUyxFQUFBMnBCLFVBQUE1dkIsU0FBQXRELElBQUE5SSxNQUVBQSxPQUlBcVMsRUFBQUUsVUFBQWpTLEtBQUFpUyxVQUFBRixFQUFBRSxVQUVBRixFQUFBMnBCLFdBQ0E1dkIsVUFDQTFCLElBQUEsU0FBQXhCLEdBQ0EsSUFBQW1MLEVBSUEsT0FBQSxJQUFBbkwsRUFBQTdELEtBQUFVLFVBQ0EsTUFBQW1ELEVBQUE3RCxLQUFBNkQsRUFBQUYsT0FBQSxNQUFBRSxFQUFBN0QsS0FBQXdFLE1BQUFYLEVBQUFGLE1BQ0FFLEVBQUE3RCxLQUFBNkQsRUFBQUYsT0FPQXFMLEVBQUFuUCxHQUFBcEMsSUFBQW9HLEVBQUE3RCxLQUFBNkQsRUFBQUYsS0FBQSxNQUdBLFNBQUFxTCxFQUFBQSxFQUFBLEdBRUF2TCxJQUFBLFNBQUFJLEdBS0FoRSxHQUFBMk4sR0FBQXNwQixLQUFBanpCLEVBQUFGLE1BQ0E5RCxHQUFBMk4sR0FBQXNwQixLQUFBanpCLEVBQUFGLE1BQUFFLEdBQ0EsSUFBQUEsRUFBQTdELEtBQUFVLFVBQ0EsTUFBQW1ELEVBQUE3RCxLQUFBd0UsTUFBQTNFLEdBQUFvTSxTQUFBcEksRUFBQUYsU0FDQTlELEdBQUFnUCxTQUFBaEwsRUFBQUYsTUFHQUUsRUFBQTdELEtBQUE2RCxFQUFBRixNQUFBRSxFQUFBZ0ssSUFGQWhPLEdBQUEyRSxNQUFBWCxFQUFBN0QsS0FBQTZELEVBQUFGLEtBQUFFLEVBQUFnSyxJQUFBaEssRUFBQU0sU0FVQTZJLEVBQUEycEIsVUFBQUksVUFBQS9wQixFQUFBMnBCLFVBQUFLLFlBQ0F2ekIsSUFBQSxTQUFBSSxHQUNBQSxFQUFBN0QsS0FBQVUsVUFBQW1ELEVBQUE3RCxLQUFBUixhQUNBcUUsRUFBQTdELEtBQUE2RCxFQUFBRixNQUFBRSxFQUFBZ0ssT0FLQWhPLEdBQUFvTixRQUNBZ3FCLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxHQUVBQyxNQUFBLFNBQUFELEdBQ0EsTUFBQSxHQUFBN3FCLEtBQUErcUIsSUFBQUYsRUFBQTdxQixLQUFBZ3JCLElBQUEsR0FFQXR3QixTQUFBLFNBR0FsSCxHQUFBMk4sR0FBQVIsRUFBQUUsVUFBQWpTLEtBR0E0RSxHQUFBMk4sR0FBQXNwQixRQUtBLElBQ0FscEIsR0FBQVIsR0FDQWtxQixHQUFBLHlCQUNBQyxHQUFBLGNBc1lBMTNCLEdBQUF5TyxVQUFBek8sR0FBQTJKLE9BQUE4RSxHQUVBQyxVQUNBaXBCLEtBQUEsU0FBQTd6QixFQUFBaEssR0FDQSxJQUFBa0ssRUFBQWxKLEtBQUF5VCxZQUFBekssRUFBQWhLLEdBRUEsT0FEQStKLEVBQUFHLEVBQUE3RCxLQUFBMkQsRUFBQVcsR0FBQUMsS0FBQTVLLEdBQUFrSyxHQUNBQSxLQUlBNHpCLFFBQUEsU0FBQWhwQixFQUFBekUsR0FDQW5LLEdBQUFVLFdBQUFrTyxJQUNBekUsRUFBQXlFLEVBQ0FBLEdBQUEsTUFFQUEsRUFBQUEsRUFBQW5OLE1BQUFDLElBT0EsSUFKQSxJQUFBb0MsRUFDQXJILEVBQUEsRUFDQUwsRUFBQXdTLEVBQUF4UyxPQUVBSyxFQUFBTCxFQUFBSyxJQUNBcUgsRUFBQThLLEVBQUFuUyxHQUNBZ1MsRUFBQUMsU0FBQTVLLEdBQUEySyxFQUFBQyxTQUFBNUssT0FDQTJLLEVBQUFDLFNBQUE1SyxHQUFBOE4sUUFBQXpILElBSUFrRixZQTFXQSxTQUFBbFAsRUFBQXlPLEVBQUFzQixHQUNBLElBQUFwTSxFQUFBaEssRUFBQXN5QixFQUFBdGQsRUFBQStvQixFQUFBQyxFQUFBQyxFQUFBOXlCLEVBQ0EreUIsRUFBQSxVQUFBcHBCLEdBQUEsV0FBQUEsRUFDQWtDLEVBQUFoVyxLQUNBMDNCLEtBQ0E3dEIsRUFBQXhFLEVBQUF3RSxNQUNBNkksRUFBQXJOLEVBQUFVLFVBQUE0RSxHQUFBdEYsR0FDQTgzQixFQUFBMXlCLEdBQUFDLElBQUFyRixFQUFBLFVBR0ErUCxFQUFBTyxRQUVBLE9BREEzQixFQUFBOU8sR0FBQXdRLFlBQUFyUSxFQUFBLE9BQ0ErM0IsV0FDQXBwQixFQUFBb3BCLFNBQUEsRUFDQUwsRUFBQS9vQixFQUFBbVcsTUFBQWlELEtBQ0FwWixFQUFBbVcsTUFBQWlELEtBQUEsV0FDQXBaLEVBQUFvcEIsVUFDQUwsTUFJQS9vQixFQUFBb3BCLFdBRUFwbkIsRUFBQXRCLE9BQUEsV0FHQXNCLEVBQUF0QixPQUFBLFdBQ0FWLEVBQUFvcEIsV0FDQWw0QixHQUFBeVEsTUFBQXRRLEVBQUEsTUFBQS9ELFFBQ0EwUyxFQUFBbVcsTUFBQWlELFlBT0EsSUFBQXBrQixLQUFBOEssRUFFQSxHQURBOVUsRUFBQThVLEVBQUE5SyxHQUNBMnpCLEdBQUF6MkIsS0FBQWxILEdBQUEsQ0FHQSxVQUZBOFUsRUFBQTlLLEdBQ0Fzb0IsRUFBQUEsR0FBQSxXQUFBdHlCLEVBQ0FBLEtBQUEwVCxFQUFBLE9BQUEsUUFBQSxDQUlBLEdBQUEsU0FBQTFULElBQUFtK0IsUUFBQXQxQixJQUFBczFCLEVBQUFuMEIsR0FLQSxTQUpBMEosR0FBQSxFQU9BZ2xCLEVBQUExdUIsR0FBQW0wQixHQUFBQSxFQUFBbjBCLElBQUE5RCxHQUFBMkUsTUFBQXhFLEVBQUEyRCxHQU1BLElBREFnMEIsR0FBQTkzQixHQUFBb1csY0FBQXhILE1BQ0E1TyxHQUFBb1csY0FBQW9jLEdBQUEsQ0FLQXdGLEdBQUEsSUFBQTczQixFQUFBVSxXQUtBcVAsRUFBQWlvQixVQUFBeHpCLEVBQUF3ekIsU0FBQXh6QixFQUFBeXpCLFVBQUF6ekIsRUFBQTB6QixXQUlBLE9BREFOLEVBQUFFLEdBQUFBLEVBQUFoekIsV0FFQTh5QixFQUFBeHlCLEdBQUFDLElBQUFyRixFQUFBLFlBR0EsVUFEQThFLEVBQUFqRixHQUFBcEMsSUFBQXVDLEVBQUEsY0FFQTQzQixFQUNBOXlCLEVBQUE4eUIsR0FJQTN5QixHQUFBakYsSUFBQSxHQUNBNDNCLEVBQUE1M0IsRUFBQXdFLE1BQUFNLFNBQUE4eUIsRUFDQTl5QixFQUFBakYsR0FBQXBDLElBQUF1QyxFQUFBLFdBQ0FpRixHQUFBakYsT0FLQSxXQUFBOEUsR0FBQSxpQkFBQUEsR0FBQSxNQUFBOHlCLElBQ0EsU0FBQS8zQixHQUFBcEMsSUFBQXVDLEVBQUEsV0FHQTIzQixJQUNBaG5CLEVBQUF2TyxLQUFBLFdBQ0FvQyxFQUFBTSxRQUFBOHlCLElBRUEsTUFBQUEsSUFDQTl5QixFQUFBTixFQUFBTSxRQUNBOHlCLEVBQUEsU0FBQTl5QixFQUFBLEdBQUFBLElBR0FOLEVBQUFNLFFBQUEsaUJBS0FpTCxFQUFBaW9CLFdBQ0F4ekIsRUFBQXd6QixTQUFBLFNBQ0FybkIsRUFBQXRCLE9BQUEsV0FDQTdLLEVBQUF3ekIsU0FBQWpvQixFQUFBaW9CLFNBQUEsR0FDQXh6QixFQUFBeXpCLFVBQUFsb0IsRUFBQWlvQixTQUFBLEdBQ0F4ekIsRUFBQTB6QixVQUFBbm9CLEVBQUFpb0IsU0FBQSxNQUtBTCxHQUFBLEVBQ0EsSUFBQWgwQixLQUFBMHVCLEVBR0FzRixJQUNBRyxFQUNBLFdBQUFBLElBQ0F6cUIsRUFBQXlxQixFQUFBenFCLFFBR0F5cUIsRUFBQTF5QixHQUFBa0UsT0FBQXRKLEVBQUEsVUFBQThFLFFBQUE4eUIsSUFJQTNMLElBQ0E2TCxFQUFBenFCLFFBQUFBLEdBSUFBLEdBQ0FwSSxHQUFBakYsSUFBQSxHQUtBMlEsRUFBQXZPLEtBQUEsV0FLQWlMLEdBQ0FwSSxHQUFBakYsSUFFQW9GLEdBQUF5RixPQUFBN0ssRUFBQSxVQUNBLElBQUEyRCxLQUFBMHVCLEVBQ0F4eUIsR0FBQTJFLE1BQUF4RSxFQUFBMkQsRUFBQTB1QixFQUFBMXVCLE9BTUFnMEIsRUFBQXZwQixFQUFBZixFQUFBeXFCLEVBQUFuMEIsR0FBQSxFQUFBQSxFQUFBZ04sR0FDQWhOLEtBQUFtMEIsSUFDQUEsRUFBQW4wQixHQUFBZzBCLEVBQUFsekIsTUFDQTRJLElBQ0FzcUIsRUFBQWp6QixJQUFBaXpCLEVBQUFsekIsTUFDQWt6QixFQUFBbHpCLE1BQUEsT0F1TUEwekIsVUFBQSxTQUFBbnVCLEVBQUFncEIsR0FDQUEsRUFDQTFrQixFQUFBWSxXQUFBdUMsUUFBQXpILEdBRUFzRSxFQUFBWSxXQUFBM1MsS0FBQXlOLE1BS0FuSyxHQUFBdTRCLE1BQUEsU0FBQUEsRUFBQW5yQixFQUFBakYsR0FDQSxJQUFBcXdCLEVBQUFELEdBQUEsaUJBQUFBLEVBQUF2NEIsR0FBQTJKLFVBQUE0dUIsSUFDQTNuQixTQUFBekksSUFBQUEsR0FBQWlGLEdBQ0FwTixHQUFBVSxXQUFBNjNCLElBQUFBLEVBQ0Ezb0IsU0FBQTJvQixFQUNBbnJCLE9BQUFqRixHQUFBaUYsR0FBQUEsSUFBQXBOLEdBQUFVLFdBQUEwTSxJQUFBQSxHQW9DQSxPQWhDQXBOLEdBQUEyTixHQUFBckYsSUFDQWt3QixFQUFBNW9CLFNBQUEsRUFHQSxpQkFBQTRvQixFQUFBNW9CLFdBQ0E0b0IsRUFBQTVvQixZQUFBNVAsR0FBQTJOLEdBQUE4cUIsT0FDQUQsRUFBQTVvQixTQUFBNVAsR0FBQTJOLEdBQUE4cUIsT0FBQUQsRUFBQTVvQixVQUdBNG9CLEVBQUE1b0IsU0FBQTVQLEdBQUEyTixHQUFBOHFCLE9BQUF2eEIsVUFNQSxNQUFBc3hCLEVBQUEvbkIsUUFBQSxJQUFBK25CLEVBQUEvbkIsUUFDQStuQixFQUFBL25CLE1BQUEsTUFJQStuQixFQUFBdE0sSUFBQXNNLEVBQUE1bkIsU0FFQTRuQixFQUFBNW5CLFNBQUEsV0FDQTVRLEdBQUFVLFdBQUE4M0IsRUFBQXRNLE1BQ0FzTSxFQUFBdE0sSUFBQXRyQixLQUFBOUYsTUFHQTA5QixFQUFBL25CLE9BQ0F6USxHQUFBeXJCLFFBQUEzd0IsS0FBQTA5QixFQUFBL25CLFFBSUErbkIsR0FHQXg0QixHQUFBbUksR0FBQXdCLFFBQ0ErdUIsT0FBQSxTQUFBSCxFQUFBSSxFQUFBdnJCLEVBQUFqRCxHQUdBLE9BQUFyUCxLQUFBbUcsT0FBQXdFLElBQUE3SCxJQUFBLFVBQUEsR0FBQXlILE9BR0FSLE1BQUErekIsU0FBQXRxQixRQUFBcXFCLEdBQUFKLEVBQUFuckIsRUFBQWpELElBRUF5dUIsUUFBQSxTQUFBOTBCLEVBQUF5MEIsRUFBQW5yQixFQUFBakQsR0FDQSxJQUFBOGEsRUFBQWpsQixHQUFBb1csY0FBQXRTLEdBQ0ErMEIsRUFBQTc0QixHQUFBdTRCLE1BQUFBLEVBQUFuckIsRUFBQWpELEdBQ0EydUIsRUFBQSxXQUdBLElBQUFob0IsRUFBQXJDLEVBQUEzVCxLQUFBa0YsR0FBQTJKLFVBQUE3RixHQUFBKzBCLElBR0E1VCxHQUFBMWYsR0FBQUMsSUFBQTFLLEtBQUEsWUFDQWdXLEVBQUFULE1BQUEsSUFLQSxPQUZBeW9CLEVBQUFDLE9BQUFELEVBRUE3VCxJQUFBLElBQUE0VCxFQUFBcG9CLE1BQ0EzVixLQUFBMEcsS0FBQXMzQixHQUNBaCtCLEtBQUEyVixNQUFBb29CLEVBQUFwb0IsTUFBQXFvQixJQUVBem9CLEtBQUEsU0FBQXRRLEVBQUE2ckIsRUFBQXRiLEdBQ0EsSUFBQTBvQixFQUFBLFNBQUFscUIsR0FDQSxJQUFBdUIsRUFBQXZCLEVBQUF1QixZQUNBdkIsRUFBQXVCLEtBQ0FBLEVBQUFDLElBWUEsTUFUQSxpQkFBQXZRLElBQ0F1USxFQUFBc2IsRUFDQUEsRUFBQTdyQixFQUNBQSxPQUFBNEMsR0FFQWlwQixJQUFBLElBQUE3ckIsR0FDQWpGLEtBQUEyVixNQUFBMVEsR0FBQSxTQUdBakYsS0FBQTBHLEtBQUEsV0FDQSxJQUFBaXFCLEdBQUEsRUFDQWh2QixFQUFBLE1BQUFzRCxHQUFBQSxFQUFBLGFBQ0FrNUIsRUFBQWo1QixHQUFBaTVCLE9BQ0FsK0IsRUFBQXdLLEdBQUFDLElBQUExSyxNQUVBLEdBQUEyQixFQUNBMUIsRUFBQTBCLElBQUExQixFQUFBMEIsR0FBQTRULE1BQ0Eyb0IsRUFBQWorQixFQUFBMEIsU0FHQSxJQUFBQSxLQUFBMUIsRUFDQUEsRUFBQTBCLElBQUExQixFQUFBMEIsR0FBQTRULE1BQUFxbkIsR0FBQTEyQixLQUFBdkUsSUFDQXU4QixFQUFBaitCLEVBQUEwQixJQUtBLElBQUFBLEVBQUF3OEIsRUFBQTc4QixPQUFBSyxLQUNBdzhCLEVBQUF4OEIsR0FBQTBELE9BQUFyRixNQUNBLE1BQUFpRixHQUFBazVCLEVBQUF4OEIsR0FBQWdVLFFBQUExUSxJQUVBazVCLEVBQUF4OEIsR0FBQXFVLEtBQUFULEtBQUFDLEdBQ0FtYixHQUFBLEVBQ0F3TixFQUFBajhCLE9BQUFQLEVBQUEsS0FPQWd2QixHQUFBbmIsR0FDQXRRLEdBQUF5ckIsUUFBQTN3QixLQUFBaUYsTUFJQWc1QixPQUFBLFNBQUFoNUIsR0FJQSxPQUhBLElBQUFBLElBQ0FBLEVBQUFBLEdBQUEsTUFFQWpGLEtBQUEwRyxLQUFBLFdBQ0EsSUFBQS9FLEVBQ0ExQixFQUFBd0ssR0FBQUMsSUFBQTFLLE1BQ0EyVixFQUFBMVYsRUFBQWdGLEVBQUEsU0FDQStPLEVBQUEvVCxFQUFBZ0YsRUFBQSxjQUNBazVCLEVBQUFqNUIsR0FBQWk1QixPQUNBNzhCLEVBQUFxVSxFQUFBQSxFQUFBclUsT0FBQSxFQWFBLElBVkFyQixFQUFBZytCLFFBQUEsRUFHQS80QixHQUFBeVEsTUFBQTNWLEtBQUFpRixNQUVBK08sR0FBQUEsRUFBQXVCLE1BQ0F2QixFQUFBdUIsS0FBQXpQLEtBQUE5RixNQUFBLEdBSUEyQixFQUFBdzhCLEVBQUE3OEIsT0FBQUssS0FDQXc4QixFQUFBeDhCLEdBQUEwRCxPQUFBckYsTUFBQW0rQixFQUFBeDhCLEdBQUFnVSxRQUFBMVEsSUFDQWs1QixFQUFBeDhCLEdBQUFxVSxLQUFBVCxNQUFBLEdBQ0E0b0IsRUFBQWo4QixPQUFBUCxFQUFBLElBS0EsSUFBQUEsRUFBQSxFQUFBQSxFQUFBTCxFQUFBSyxJQUNBZ1UsRUFBQWhVLElBQUFnVSxFQUFBaFUsR0FBQXM4QixRQUNBdG9CLEVBQUFoVSxHQUFBczhCLE9BQUFuNEIsS0FBQTlGLGFBS0FDLEVBQUFnK0IsWUFLQS80QixHQUFBd0IsTUFBQSxTQUFBLE9BQUEsUUFBQSxTQUFBekUsRUFBQXFELEdBQ0EsSUFBQTg0QixFQUFBbDVCLEdBQUFtSSxHQUFBL0gsR0FDQUosR0FBQW1JLEdBQUEvSCxHQUFBLFNBQUFtNEIsRUFBQW5yQixFQUFBakQsR0FDQSxPQUFBLE1BQUFvdUIsR0FBQSxrQkFBQUEsRUFDQVcsRUFBQXgyQixNQUFBNUgsS0FBQXlOLFdBQ0F6TixLQUFBODlCLFFBQUEzcUIsRUFBQTdOLEdBQUEsR0FBQW00QixFQUFBbnJCLEVBQUFqRCxNQUtBbkssR0FBQXdCLE1BQ0EyM0IsVUFBQWxyQixFQUFBLFFBQ0FtckIsUUFBQW5yQixFQUFBLFFBQ0FvckIsWUFBQXByQixFQUFBLFVBQ0FxckIsUUFBQWhyQixRQUFBLFFBQ0FpckIsU0FBQWpyQixRQUFBLFFBQ0FrckIsWUFBQWxyQixRQUFBLFdBQ0EsU0FBQWxPLEVBQUF3TyxHQUNBNU8sR0FBQW1JLEdBQUEvSCxHQUFBLFNBQUFtNEIsRUFBQW5yQixFQUFBakQsR0FDQSxPQUFBclAsS0FBQTg5QixRQUFBaHFCLEVBQUEycEIsRUFBQW5yQixFQUFBakQsTUFJQW5LLEdBQUFpNUIsVUFDQWo1QixHQUFBMk4sR0FBQUUsS0FBQSxXQUNBLElBQUFnRCxFQUNBOVQsRUFBQSxFQUNBazhCLEVBQUFqNUIsR0FBQWk1QixPQUlBLElBRkFsckIsR0FBQS9OLEdBQUFnTyxNQUVBalIsRUFBQWs4QixFQUFBNzhCLE9BQUFXLEtBQ0E4VCxFQUFBb29CLEVBQUFsOEIsT0FHQWs4QixFQUFBbDhCLEtBQUE4VCxHQUNBb29CLEVBQUFqOEIsT0FBQUQsSUFBQSxHQUlBazhCLEVBQUE3OEIsUUFDQTRELEdBQUEyTixHQUFBMEMsT0FFQXRDLFFBQUFwTCxHQUdBM0MsR0FBQTJOLEdBQUFrRCxNQUFBLFNBQUFBLEdBQ0E3USxHQUFBaTVCLE9BQUF2OEIsS0FBQW1VLEdBQ0E3USxHQUFBMk4sR0FBQS9JLFNBR0E1RSxHQUFBMk4sR0FBQUMsU0FBQSxHQUNBNU4sR0FBQTJOLEdBQUEvSSxNQUFBLFdBQ0EySSxLQUlBQSxJQUFBLEVBQ0FELE1BR0F0TixHQUFBMk4sR0FBQTBDLEtBQUEsV0FDQTlDLEdBQUEsTUFHQXZOLEdBQUEyTixHQUFBOHFCLFFBQ0FnQixLQUFBLElBQ0FDLEtBQUEsSUFHQXh5QixTQUFBLEtBTUFsSCxHQUFBbUksR0FBQXd4QixNQUFBLFNBQUFDLEVBQUE3NUIsR0FJQSxPQUhBNjVCLEVBQUE1NUIsR0FBQTJOLEdBQUEzTixHQUFBMk4sR0FBQThxQixPQUFBbUIsSUFBQUEsRUFBQUEsRUFDQTc1QixFQUFBQSxHQUFBLEtBRUFqRixLQUFBMlYsTUFBQTFRLEVBQUEsU0FBQWhDLEVBQUErUSxHQUNBLElBQUErcUIsRUFBQTU2QixFQUFBeU8sV0FBQTNQLEVBQUE2N0IsR0FDQTlxQixFQUFBdUIsS0FBQSxXQUNBcFIsRUFBQTY2QixhQUFBRCxPQU1BLFdBQ0EsSUFBQXZZLEVBQUE1bkIsR0FBQTZGLGNBQUEsU0FFQWk1QixFQURBOStCLEdBQUE2RixjQUFBLFVBQ0FHLFlBQUFoRyxHQUFBNkYsY0FBQSxXQUVBK2hCLEVBQUF2aEIsS0FBQSxXQUlBeUssR0FBQXV2QixRQUFBLEtBQUF6WSxFQUFBeG5CLE1BSUEwUSxHQUFBd3ZCLFlBQUF4QixFQUFBeG1CLFVBSUFzUCxFQUFBNW5CLEdBQUE2RixjQUFBLFVBQ0F6RixNQUFBLElBQ0F3bkIsRUFBQXZoQixLQUFBLFFBQ0F5SyxHQUFBeXZCLFdBQUEsTUFBQTNZLEVBQUF4bkIsU0FJQSxJQUFBb2dDLEdBQ0E5Z0IsR0FBQXBaLEdBQUFxaUIsS0FBQWpKLFdBRUFwWixHQUFBbUksR0FBQXdCLFFBQ0EyWSxLQUFBLFNBQUFsaUIsRUFBQXRHLEdBQ0EsT0FBQTJQLEdBQUEzTyxLQUFBa0YsR0FBQXNpQixLQUFBbGlCLEVBQUF0RyxFQUFBeU8sVUFBQW5NLE9BQUEsSUFHQSs5QixXQUFBLFNBQUEvNUIsR0FDQSxPQUFBdEYsS0FBQTBHLEtBQUEsV0FDQXhCLEdBQUFtNkIsV0FBQXIvQixLQUFBc0YsUUFLQUosR0FBQTJKLFFBQ0EyWSxLQUFBLFNBQUFuaUIsRUFBQUMsRUFBQXRHLEdBQ0EsSUFBQThMLEVBQUFrSixFQUNBc3JCLEVBQUFqNkIsRUFBQVUsU0FHQSxHQUFBLElBQUF1NUIsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBS0EsWUFBQSxJQUFBajZCLEVBQUFzRCxhQUNBekQsR0FBQThELEtBQUEzRCxFQUFBQyxFQUFBdEcsSUFLQSxJQUFBc2dDLEdBQUFwNkIsR0FBQXFtQixTQUFBbG1CLEtBQ0EyTyxFQUFBOU8sR0FBQXE2QixVQUFBajZCLEVBQUFDLGlCQUNBTCxHQUFBcWlCLEtBQUE1Z0IsTUFBQStkLEtBQUF4ZSxLQUFBWixHQUFBODVCLFFBQUF2M0IsU0FHQUEsSUFBQTdJLEVBQ0EsT0FBQUEsT0FDQWtHLEdBQUFtNkIsV0FBQWg2QixFQUFBQyxHQUlBME8sR0FBQSxRQUFBQSxRQUNBbk0sS0FBQWlELEVBQUFrSixFQUFBbEwsSUFBQXpELEVBQUFyRyxFQUFBc0csSUFDQXdGLEdBR0F6RixFQUFBZ1ksYUFBQS9YLEVBQUF0RyxFQUFBLElBQ0FBLEdBR0FnVixHQUFBLFFBQUFBLEdBQUEsUUFBQWxKLEVBQUFrSixFQUFBdEosSUFBQXJGLEVBQUFDLElBQ0F3RixFQU1BLE9BSEFBLEVBQUE1RixHQUFBc2QsS0FBQWdGLEtBQUFuaUIsRUFBQUMsU0FHQXVDLEVBQUFpRCxJQUdBeTBCLFdBQ0F0NkIsTUFDQTZELElBQUEsU0FBQXpELEVBQUFyRyxHQUNBLElBQUEwUSxHQUFBeXZCLFlBQUEsVUFBQW5nQyxHQUNBb0csRUFBQUMsRUFBQSxTQUFBLENBQ0EsSUFBQXBHLEVBQUFvRyxFQUFBckcsTUFLQSxPQUpBcUcsRUFBQWdZLGFBQUEsT0FBQXJlLEdBQ0FDLElBQ0FvRyxFQUFBckcsTUFBQUMsR0FFQUQsTUFNQXFnQyxXQUFBLFNBQUFoNkIsRUFBQXJHLEdBQ0EsSUFBQXNHLEVBQ0FyRCxFQUFBLEVBSUF1OUIsRUFBQXhnQyxHQUFBQSxFQUFBMkgsTUFBQUMsSUFFQSxHQUFBNDRCLEdBQUEsSUFBQW42QixFQUFBVSxTQUNBLEtBQUFULEVBQUFrNkIsRUFBQXY5QixNQUNBb0QsRUFBQTRJLGdCQUFBM0ksTUFPQTg1QixJQUNBdDJCLElBQUEsU0FBQXpELEVBQUFyRyxFQUFBc0csR0FRQSxPQVBBLElBQUF0RyxFQUdBa0csR0FBQW02QixXQUFBaDZCLEVBQUFDLEdBRUFELEVBQUFnWSxhQUFBL1gsRUFBQUEsR0FFQUEsSUFJQUosR0FBQXdCLEtBQUF4QixHQUFBcWlCLEtBQUE1Z0IsTUFBQStkLEtBQUF3TSxPQUFBdnFCLE1BQUEsUUFBQSxTQUFBMUUsRUFBQXFELEdBQ0EsSUFBQW02QixFQUFBbmhCLEdBQUFoWixJQUFBSixHQUFBc2QsS0FBQWdGLEtBRUFsSixHQUFBaFosR0FBQSxTQUFBRCxFQUFBQyxFQUFBdWQsR0FDQSxJQUFBL1gsRUFBQThELEVBQ0E4d0IsRUFBQXA2QixFQUFBQyxjQVlBLE9BVkFzZCxJQUdBalUsRUFBQTBQLEdBQUFvaEIsR0FDQXBoQixHQUFBb2hCLEdBQUE1MEIsRUFDQUEsRUFBQSxNQUFBMjBCLEVBQUFwNkIsRUFBQUMsRUFBQXVkLEdBQ0E2YyxFQUNBLEtBQ0FwaEIsR0FBQW9oQixHQUFBOXdCLEdBRUE5RCxLQU9BLElBQUE2MEIsR0FBQSxzQ0FDQUMsR0FBQSxnQkFFQTE2QixHQUFBbUksR0FBQXdCLFFBQ0E3RixLQUFBLFNBQUExRCxFQUFBdEcsR0FDQSxPQUFBMlAsR0FBQTNPLEtBQUFrRixHQUFBOEQsS0FBQTFELEVBQUF0RyxFQUFBeU8sVUFBQW5NLE9BQUEsSUFHQXUrQixXQUFBLFNBQUF2NkIsR0FDQSxPQUFBdEYsS0FBQTBHLEtBQUEsa0JBQ0ExRyxLQUFBa0YsR0FBQTQ2QixRQUFBeDZCLElBQUFBLFFBS0FKLEdBQUEySixRQUNBN0YsS0FBQSxTQUFBM0QsRUFBQUMsRUFBQXRHLEdBQ0EsSUFBQThMLEVBQUFrSixFQUNBc3JCLEVBQUFqNkIsRUFBQVUsU0FHQSxHQUFBLElBQUF1NUIsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBV0EsT0FQQSxJQUFBQSxHQUFBcDZCLEdBQUFxbUIsU0FBQWxtQixLQUdBQyxFQUFBSixHQUFBNDZCLFFBQUF4NkIsSUFBQUEsRUFDQTBPLEVBQUE5TyxHQUFBODJCLFVBQUExMkIsU0FHQXVDLElBQUE3SSxFQUNBZ1YsR0FBQSxRQUFBQSxRQUNBbk0sS0FBQWlELEVBQUFrSixFQUFBbEwsSUFBQXpELEVBQUFyRyxFQUFBc0csSUFDQXdGLEVBR0F6RixFQUFBQyxHQUFBdEcsRUFHQWdWLEdBQUEsUUFBQUEsR0FBQSxRQUFBbEosRUFBQWtKLEVBQUF0SixJQUFBckYsRUFBQUMsSUFDQXdGLEVBR0F6RixFQUFBQyxJQUdBMDJCLFdBQ0FoUyxVQUNBdGYsSUFBQSxTQUFBckYsR0FPQSxJQUFBMDZCLEVBQUE3NkIsR0FBQXNkLEtBQUFnRixLQUFBbmlCLEVBQUEsWUFFQSxPQUFBMDZCLEVBQ0FoZ0MsU0FBQWdnQyxFQUFBLElBSUFKLEdBQUF6NUIsS0FBQWIsRUFBQUQsV0FDQXc2QixHQUFBMTVCLEtBQUFiLEVBQUFELFdBQ0FDLEVBQUEwa0IsS0FFQSxHQUdBLEtBS0ErVixTQUNBRSxJQUFBLFVBQ0FDLE1BQUEsZUFZQXZ3QixHQUFBd3ZCLGNBQ0FoNkIsR0FBQTgyQixVQUFBOWtCLFVBQ0F4TSxJQUFBLFNBQUFyRixHQUlBLElBQUE0akIsRUFBQTVqQixFQUFBUixXQUlBLE9BSEFva0IsR0FBQUEsRUFBQXBrQixZQUNBb2tCLEVBQUFwa0IsV0FBQXFsQixjQUVBLE1BRUFwaEIsSUFBQSxTQUFBekQsR0FJQSxJQUFBNGpCLEVBQUE1akIsRUFBQVIsV0FDQW9rQixJQUNBQSxFQUFBaUIsY0FFQWpCLEVBQUFwa0IsWUFDQW9rQixFQUFBcGtCLFdBQUFxbEIsa0JBT0FobEIsR0FBQXdCLE1BQ0EsV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0EsbUJBQ0EsV0FDQXhCLEdBQUE0NkIsUUFBQTkvQixLQUFBdUYsZUFBQXZGLE9Ba0JBa0YsR0FBQW1JLEdBQUF3QixRQUNBaE0sU0FBQSxTQUFBN0QsR0FDQSxJQUFBa2hDLEVBQUE3NkIsRUFBQWdCLEVBQUE4NUIsRUFBQUMsRUFBQXYwQixFQUFBdzBCLEVBQ0FwK0IsRUFBQSxFQUVBLEdBQUFpRCxHQUFBVSxXQUFBNUcsR0FDQSxPQUFBZ0IsS0FBQTBHLEtBQUEsU0FBQW1GLEdBQ0EzRyxHQUFBbEYsTUFBQTZDLFNBQUE3RCxFQUFBOEcsS0FBQTlGLEtBQUE2TCxFQUFBc0ssRUFBQW5XLFVBSUEsR0FBQSxpQkFBQWhCLEdBQUFBLEVBR0EsSUFGQWtoQyxFQUFBbGhDLEVBQUEySCxNQUFBQyxRQUVBdkIsRUFBQXJGLEtBQUFpQyxNQUlBLEdBSEFrK0IsRUFBQWhxQixFQUFBOVEsR0FDQWdCLEVBQUEsSUFBQWhCLEVBQUFVLFVBQUEsSUFBQWtRLEVBQUFrcUIsR0FBQSxJQUVBLENBRUEsSUFEQXQwQixFQUFBLEVBQ0F1MEIsRUFBQUYsRUFBQXIwQixNQUNBeEYsRUFBQUwsUUFBQSxJQUFBbzZCLEVBQUEsS0FBQSxJQUNBLzVCLEdBQUErNUIsRUFBQSxLQU1BRCxLQURBRSxFQUFBcHFCLEVBQUE1UCxLQUVBaEIsRUFBQWdZLGFBQUEsUUFBQWdqQixHQU1BLE9BQUFyZ0MsTUFHQWdELFlBQUEsU0FBQWhFLEdBQ0EsSUFBQWtoQyxFQUFBNzZCLEVBQUFnQixFQUFBODVCLEVBQUFDLEVBQUF2MEIsRUFBQXcwQixFQUNBcCtCLEVBQUEsRUFFQSxHQUFBaUQsR0FBQVUsV0FBQTVHLEdBQ0EsT0FBQWdCLEtBQUEwRyxLQUFBLFNBQUFtRixHQUNBM0csR0FBQWxGLE1BQUFnRCxZQUFBaEUsRUFBQThHLEtBQUE5RixLQUFBNkwsRUFBQXNLLEVBQUFuVyxVQUlBLElBQUF5TixVQUFBbk0sT0FDQSxPQUFBdEIsS0FBQXduQixLQUFBLFFBQUEsSUFHQSxHQUFBLGlCQUFBeG9CLEdBQUFBLEVBR0EsSUFGQWtoQyxFQUFBbGhDLEVBQUEySCxNQUFBQyxRQUVBdkIsRUFBQXJGLEtBQUFpQyxNQU1BLEdBTEFrK0IsRUFBQWhxQixFQUFBOVEsR0FHQWdCLEVBQUEsSUFBQWhCLEVBQUFVLFVBQUEsSUFBQWtRLEVBQUFrcUIsR0FBQSxJQUVBLENBRUEsSUFEQXQwQixFQUFBLEVBQ0F1MEIsRUFBQUYsRUFBQXIwQixNQUdBLEtBQUF4RixFQUFBTCxRQUFBLElBQUFvNkIsRUFBQSxNQUFBLEdBQ0EvNUIsRUFBQUEsRUFBQW9DLFFBQUEsSUFBQTIzQixFQUFBLElBQUEsS0FNQUQsS0FEQUUsRUFBQXBxQixFQUFBNVAsS0FFQWhCLEVBQUFnWSxhQUFBLFFBQUFnakIsR0FNQSxPQUFBcmdDLE1BR0FzZ0MsWUFBQSxTQUFBdGhDLEVBQUF1aEMsR0FDQSxJQUFBdDdCLFNBQUFqRyxFQUVBLE1BQUEsa0JBQUF1aEMsR0FBQSxXQUFBdDdCLEVBQ0FzN0IsRUFBQXZnQyxLQUFBNkMsU0FBQTdELEdBQUFnQixLQUFBZ0QsWUFBQWhFLEdBR0FrRyxHQUFBVSxXQUFBNUcsR0FDQWdCLEtBQUEwRyxLQUFBLFNBQUF6RSxHQUNBaUQsR0FBQWxGLE1BQUFzZ0MsWUFDQXRoQyxFQUFBOEcsS0FBQTlGLEtBQUFpQyxFQUFBa1UsRUFBQW5XLE1BQUF1Z0MsR0FDQUEsS0FLQXZnQyxLQUFBMEcsS0FBQSxXQUNBLElBQUF3ZixFQUFBamtCLEVBQUFHLEVBQUFvK0IsRUFFQSxHQUFBLFdBQUF2N0IsRUFPQSxJQUpBaEQsRUFBQSxFQUNBRyxFQUFBOEMsR0FBQWxGLE1BQ0F3Z0MsRUFBQXhoQyxFQUFBMkgsTUFBQUMsUUFFQXNmLEVBQUFzYSxFQUFBditCLE1BR0FHLEVBQUF3QixTQUFBc2lCLEdBQ0E5akIsRUFBQVksWUFBQWtqQixHQUVBOWpCLEVBQUFTLFNBQUFxakIsYUFLQXJlLElBQUE3SSxHQUFBLFlBQUFpRyxLQUNBaWhCLEVBQUEvUCxFQUFBblcsUUFJQXlLLEdBQUEzQixJQUFBOUksS0FBQSxnQkFBQWttQixHQU9BbG1CLEtBQUFxZCxjQUNBcmQsS0FBQXFkLGFBQUEsUUFDQTZJLElBQUEsSUFBQWxuQixFQUNBLEdBQ0F5TCxHQUFBQyxJQUFBMUssS0FBQSxrQkFBQSxRQU9BNEQsU0FBQSxTQUFBd0osR0FDQSxJQUFBOFksRUFBQTdnQixFQUNBcEQsRUFBQSxFQUdBLElBREFpa0IsRUFBQSxJQUFBOVksRUFBQSxJQUNBL0gsRUFBQXJGLEtBQUFpQyxNQUNBLEdBQUEsSUFBQW9ELEVBQUFVLFdBQ0EsSUFBQWtRLEVBQUFFLEVBQUE5USxJQUFBLEtBQUFXLFFBQUFrZ0IsSUFBQSxFQUNBLE9BQUEsRUFJQSxPQUFBLEtBT0EsSUFBQXVhLEdBQUEsTUFFQXY3QixHQUFBbUksR0FBQXdCLFFBQ0E1UCxJQUFBLFNBQUFELEdBQ0EsSUFBQWdWLEVBQUFsSixFQUFBbEYsRUFDQVAsRUFBQXJGLEtBQUEsR0FFQSxDQUFBLEdBQUF5TixVQUFBbk0sT0E0QkEsT0FGQXNFLEVBQUFWLEdBQUFVLFdBQUE1RyxHQUVBZ0IsS0FBQTBHLEtBQUEsU0FBQXpFLEdBQ0EsSUFBQWhELEVBRUEsSUFBQWUsS0FBQStGLFdBV0EsT0FOQTlHLEVBREEyRyxFQUNBNUcsRUFBQThHLEtBQUE5RixLQUFBaUMsRUFBQWlELEdBQUFsRixNQUFBZixPQUVBRCxHQUtBQyxFQUFBLEdBRUEsaUJBQUFBLEVBQ0FBLEdBQUEsR0FFQXNDLE1BQUFDLFFBQUF2QyxLQUNBQSxFQUFBaUcsR0FBQTRLLElBQUE3USxFQUFBLFNBQUFELEdBQ0EsT0FBQSxNQUFBQSxFQUFBLEdBQUFBLEVBQUEsT0FJQWdWLEVBQUE5TyxHQUFBdzdCLFNBQUExZ0MsS0FBQWlGLE9BQUFDLEdBQUF3N0IsU0FBQTFnQyxLQUFBb0YsU0FBQUcsaUJBR0EsUUFBQXlPLFFBQUFuTSxJQUFBbU0sRUFBQWxMLElBQUE5SSxLQUFBZixFQUFBLFdBQ0FlLEtBQUFoQixNQUFBQyxNQXpEQSxHQUFBb0csRUFJQSxPQUhBMk8sRUFBQTlPLEdBQUF3N0IsU0FBQXI3QixFQUFBSixPQUNBQyxHQUFBdzdCLFNBQUFyN0IsRUFBQUQsU0FBQUcsaUJBR0EsUUFBQXlPLFFBQ0FuTSxLQUFBaUQsRUFBQWtKLEVBQUF0SixJQUFBckYsRUFBQSxVQUVBeUYsRUFNQSxpQkFIQUEsRUFBQXpGLEVBQUFyRyxPQUlBOEwsRUFBQXJDLFFBQUFnNEIsR0FBQSxJQUlBLE1BQUEzMUIsRUFBQSxHQUFBQSxNQTRDQTVGLEdBQUEySixRQUNBNnhCLFVBQ0FuUCxRQUNBN21CLElBQUEsU0FBQXJGLEdBRUEsSUFBQXBHLEVBQUFpRyxHQUFBc2QsS0FBQWdGLEtBQUFuaUIsRUFBQSxTQUNBLE9BQUEsTUFBQXBHLEVBQ0FBLEVBTUFnWCxFQUFBL1EsR0FBQVIsS0FBQVcsTUFHQXNZLFFBQ0FqVCxJQUFBLFNBQUFyRixHQUNBLElBQUFyRyxFQUFBdXlCLEVBQUF0dkIsRUFDQXVFLEVBQUFuQixFQUFBbUIsUUFDQTdFLEVBQUEwRCxFQUFBNmtCLGNBQ0E1YyxFQUFBLGVBQUFqSSxFQUFBSixLQUNBdUYsRUFBQThDLEVBQUEsUUFDQXFFLEVBQUFyRSxFQUFBM0wsRUFBQSxFQUFBNkUsRUFBQWxGLE9BVUEsSUFQQVcsRUFEQU4sRUFBQSxFQUNBZ1EsRUFHQXJFLEVBQUEzTCxFQUFBLEVBSUFNLEVBQUEwUCxFQUFBMVAsSUFLQSxLQUpBc3ZCLEVBQUEvcUIsRUFBQXZFLElBSUFpVixVQUFBalYsSUFBQU4sS0FHQTR2QixFQUFBelMsWUFDQXlTLEVBQUExc0IsV0FBQWlhLFdBQ0ExWixFQUFBbXNCLEVBQUExc0IsV0FBQSxhQUFBLENBTUEsR0FIQTdGLEVBQUFrRyxHQUFBcXNCLEdBQUF0eUIsTUFHQXFPLEVBQ0EsT0FBQXRPLEVBSUF3TCxFQUFBNUksS0FBQTVDLEdBSUEsT0FBQXdMLEdBR0ExQixJQUFBLFNBQUF6RCxFQUFBckcsR0FNQSxJQUxBLElBQUEyaEMsRUFBQXBQLEVBQ0EvcUIsRUFBQW5CLEVBQUFtQixRQUNBZ0UsRUFBQXRGLEdBQUF3VyxVQUFBMWMsR0FDQWlELEVBQUF1RSxFQUFBbEYsT0FFQVcsT0FDQXN2QixFQUFBL3FCLEVBQUF2RSxJQUlBaVYsU0FDQWhTLEdBQUEwSCxRQUFBMUgsR0FBQXc3QixTQUFBblAsT0FBQTdtQixJQUFBNm1CLEdBQUEvbUIsSUFBQSxLQUVBbTJCLEdBQUEsR0FVQSxPQUhBQSxJQUNBdDdCLEVBQUE2a0IsZUFBQSxHQUVBMWYsT0FPQXRGLEdBQUF3QixNQUFBLFFBQUEsWUFBQSxXQUNBeEIsR0FBQXc3QixTQUFBMWdDLE9BQ0E4SSxJQUFBLFNBQUF6RCxFQUFBckcsR0FDQSxHQUFBdUMsTUFBQUMsUUFBQXhDLEdBQ0EsT0FBQXFHLEVBQUEySixRQUFBOUosR0FBQTBILFFBQUExSCxHQUFBRyxHQUFBcEcsTUFBQUQsSUFBQSxJQUlBMFEsR0FBQXV2QixVQUNBLzVCLEdBQUF3N0IsU0FBQTFnQyxNQUFBMEssSUFBQSxTQUFBckYsR0FDQSxPQUFBLE9BQUFBLEVBQUFzRCxhQUFBLFNBQUEsS0FBQXRELEVBQUFyRyxVQVdBLElBQUE0aEMsR0FBQSxrQ0FFQTE3QixHQUFBMkosT0FBQTNKLEdBQUFwRyxPQUVBazJCLFFBQUEsU0FBQWwyQixFQUFBbUIsRUFBQW9GLEVBQUF3N0IsR0FFQSxJQUFBNStCLEVBQUFvRSxFQUFBcUYsRUFBQW8xQixFQUFBQyxFQUFBbnlCLEVBQUEwZixFQUNBMFMsR0FBQTM3QixHQUFBekcsSUFDQXFHLEVBQUF3VSxHQUFBM1QsS0FBQWhILEVBQUEsUUFBQUEsRUFBQW1HLEtBQUFuRyxFQUNBK3pCLEVBQUFwWixHQUFBM1QsS0FBQWhILEVBQUEsYUFBQUEsRUFBQXMwQixVQUFBcGEsTUFBQSxRQUtBLEdBSEEzUyxFQUFBcUYsRUFBQXJHLEVBQUFBLEdBQUF6RyxHQUdBLElBQUF5RyxFQUFBVSxVQUFBLElBQUFWLEVBQUFVLFdBS0E2NkIsR0FBQTE2QixLQUFBakIsRUFBQUMsR0FBQXBHLE1BQUFrMEIsYUFJQS90QixFQUFBZSxRQUFBLE1BQUEsSUFJQWYsR0FEQTR0QixFQUFBNXRCLEVBQUErVCxNQUFBLE1BQ0FaLFFBQ0F5YSxFQUFBblksUUFFQXFtQixFQUFBOTdCLEVBQUFlLFFBQUEsS0FBQSxHQUFBLEtBQUFmLEVBR0FuRyxFQUFBQSxFQUFBb0csR0FBQWlELFNBQ0FySixFQUNBLElBQUFvRyxHQUFBd3ZCLE1BQUF6dkIsRUFBQSxpQkFBQW5HLEdBQUFBLEdBR0FBLEVBQUFtaUMsVUFBQUosRUFBQSxFQUFBLEVBQ0EvaEMsRUFBQXMwQixVQUFBUCxFQUFBM2MsS0FBQSxLQUNBcFgsRUFBQXExQixXQUFBcjFCLEVBQUFzMEIsVUFDQSxJQUFBdlAsT0FBQSxVQUFBZ1AsRUFBQTNjLEtBQUEsaUJBQUEsV0FDQSxLQUdBcFgsRUFBQXVWLFlBQUF4TSxFQUNBL0ksRUFBQTJZLFNBQ0EzWSxFQUFBMlksT0FBQXBTLEdBSUFwRixFQUFBLE1BQUFBLEdBQ0FuQixHQUNBb0csR0FBQXdXLFVBQUF6YixHQUFBbkIsSUFHQXd2QixFQUFBcHBCLEdBQUFwRyxNQUFBd3ZCLFFBQUFycEIsT0FDQTQ3QixJQUFBdlMsRUFBQTBHLFVBQUEsSUFBQTFHLEVBQUEwRyxRQUFBcHRCLE1BQUF2QyxFQUFBcEYsSUFBQSxDQU1BLElBQUE0Z0MsSUFBQXZTLEVBQUF5RyxXQUFBN3ZCLEdBQUFDLFNBQUFFLEdBQUEsQ0FNQSxJQUpBeTdCLEVBQUF4UyxFQUFBNEUsY0FBQWp1QixFQUNBMjdCLEdBQUExNkIsS0FBQTQ2QixFQUFBNzdCLEtBQ0FvQixFQUFBQSxFQUFBeEIsWUFFQXdCLEVBQUFBLEVBQUFBLEVBQUF4QixXQUNBbThCLEVBQUFwL0IsS0FBQXlFLEdBQ0FxRixFQUFBckYsRUFJQXFGLEtBQUFyRyxFQUFBNkUsZUFBQXRMLEtBQ0FvaUMsRUFBQXAvQixLQUFBOEosRUFBQW9hLGFBQUFwYSxFQUFBdzFCLGNBQUEvOEIsR0FNQSxJQURBbEMsRUFBQSxHQUNBb0UsRUFBQTI2QixFQUFBLytCLFFBQUFuRCxFQUFBazFCLHdCQUVBbDFCLEVBQUFtRyxLQUFBaEQsRUFBQSxFQUNBNitCLEVBQ0F4UyxFQUFBNkUsVUFBQWx1QixHQUdBMkosR0FBQW5FLEdBQUFDLElBQUFyRSxFQUFBLGVBQUF2SCxFQUFBbUcsT0FDQXdGLEdBQUFDLElBQUFyRSxFQUFBLFlBRUF1SSxFQUFBaEgsTUFBQXZCLEVBQUFwRyxJQUlBMk8sRUFBQW15QixHQUFBMTZCLEVBQUEwNkIsS0FDQW55QixFQUFBaEgsT0FBQXdvQixHQUFBL3BCLEtBQ0F2SCxFQUFBdVYsT0FBQXpGLEVBQUFoSCxNQUFBdkIsRUFBQXBHLElBQ0EsSUFBQW5CLEVBQUF1VixRQUNBdlYsRUFBQUMsa0JBb0NBLE9BaENBRCxFQUFBbUcsS0FBQUEsRUFHQTQ3QixHQUFBL2hDLEVBQUF1MkIsc0JBRUEvRyxFQUFBbGlCLFdBQ0EsSUFBQWtpQixFQUFBbGlCLFNBQUF4RSxNQUFBbzVCLEVBQUF0ZSxNQUFBemlCLEtBQ0Ftd0IsR0FBQS9xQixJQUlBMDdCLEdBQUE3N0IsR0FBQVUsV0FBQVAsRUFBQUosTUFBQUMsR0FBQUMsU0FBQUUsTUFHQXFHLEVBQUFyRyxFQUFBMDdCLE1BR0ExN0IsRUFBQTA3QixHQUFBLE1BSUE3N0IsR0FBQXBHLE1BQUFrMEIsVUFBQS90QixFQUNBSSxFQUFBSixLQUNBQyxHQUFBcEcsTUFBQWswQixlQUFBbnJCLEVBRUE2RCxJQUNBckcsRUFBQTA3QixHQUFBcjFCLElBTUE1TSxFQUFBdVYsU0FLQThzQixTQUFBLFNBQUFsOEIsRUFBQUksRUFBQXZHLEdBQ0EsSUFBQThKLEVBQUExRCxHQUFBMkosT0FDQSxJQUFBM0osR0FBQXd2QixNQUNBNTFCLEdBRUFtRyxLQUFBQSxFQUNBd3dCLGFBQUEsSUFJQXZ3QixHQUFBcEcsTUFBQWsyQixRQUFBcHNCLEVBQUEsS0FBQXZELE1BS0FILEdBQUFtSSxHQUFBd0IsUUFFQW1tQixRQUFBLFNBQUEvdkIsRUFBQWhGLEdBQ0EsT0FBQUQsS0FBQTBHLEtBQUEsV0FDQXhCLEdBQUFwRyxNQUFBazJCLFFBQUEvdkIsRUFBQWhGLEVBQUFELFNBR0FvaEMsZUFBQSxTQUFBbjhCLEVBQUFoRixHQUNBLElBQUFvRixFQUFBckYsS0FBQSxHQUNBLEdBQUFxRixFQUNBLE9BQUFILEdBQUFwRyxNQUFBazJCLFFBQUEvdkIsRUFBQWhGLEVBQUFvRixHQUFBLE1BTUFILEdBQUF3QixLQUFBLHdMQUVBc1MsTUFBQSxLQUNBLFNBQUEvVyxFQUFBcUQsR0FHQUosR0FBQW1JLEdBQUEvSCxHQUFBLFNBQUFyRixFQUFBb04sR0FDQSxPQUFBSSxVQUFBbk0sT0FBQSxFQUNBdEIsS0FBQW5CLEdBQUF5RyxFQUFBLEtBQUFyRixFQUFBb04sR0FDQXJOLEtBQUFnMUIsUUFBQTF2QixNQUlBSixHQUFBbUksR0FBQXdCLFFBQ0F3eUIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUF2aEMsS0FBQXMzQixXQUFBZ0ssR0FBQS9KLFdBQUFnSyxHQUFBRCxNQU9BNXhCLEdBQUE4eEIsUUFBQSxjQUFBcjlCLEVBV0F1TCxHQUFBOHhCLFNBQ0F0OEIsR0FBQXdCLE1BQUFtakIsTUFBQSxVQUFBb0wsS0FBQSxZQUFBLFNBQUF5QyxFQUFBN0QsR0FHQSxJQUFBeFYsRUFBQSxTQUFBdmYsR0FDQW9HLEdBQUFwRyxNQUFBcWlDLFNBQUF0TixFQUFBLzBCLEVBQUEyWSxPQUFBdlMsR0FBQXBHLE1BQUErMEIsSUFBQS8wQixLQUdBb0csR0FBQXBHLE1BQUF3dkIsUUFBQXVGLElBQ0FQLE1BQUEsV0FDQSxJQUFBL3VCLEVBQUF2RSxLQUFBa0ssZUFBQWxLLEtBQ0F5aEMsRUFBQWgzQixHQUFBa0UsT0FBQXBLLEVBQUFzdkIsR0FFQTROLEdBQ0FsOUIsRUFBQXloQixpQkFBQTBSLEVBQUFyWixHQUFBLEdBRUE1VCxHQUFBa0UsT0FBQXBLLEVBQUFzdkIsR0FBQTROLEdBQUEsR0FBQSxJQUVBaE8sU0FBQSxXQUNBLElBQUFsdkIsRUFBQXZFLEtBQUFrSyxlQUFBbEssS0FDQXloQyxFQUFBaDNCLEdBQUFrRSxPQUFBcEssRUFBQXN2QixHQUFBLEVBRUE0TixFQUtBaDNCLEdBQUFrRSxPQUFBcEssRUFBQXN2QixFQUFBNE4sSUFKQWw5QixFQUFBeUQsb0JBQUEwdkIsRUFBQXJaLEdBQUEsR0FDQTVULEdBQUF5RixPQUFBM0wsRUFBQXN2QixRQVNBLElBQUFsSyxHQUFBeGxCLEVBQUF3bEIsU0FFQStYLEdBQUF4OEIsR0FBQWdPLE1BRUF5dUIsR0FBQSxLQUtBejhCLEdBQUEwOEIsU0FBQSxTQUFBM2hDLEdBQ0EsSUFBQTRmLEVBQ0EsSUFBQTVmLEdBQUEsaUJBQUFBLEVBQ0EsT0FBQSxLQUtBLElBQ0E0ZixHQUFBLElBQUExYixFQUFBMDlCLFdBQUFDLGdCQUFBN2hDLEVBQUEsWUFDQSxNQUFBMkksR0FDQWlYLE9BQUFoWSxFQU1BLE9BSEFnWSxJQUFBQSxFQUFBOVUscUJBQUEsZUFBQXpKLFFBQ0E0RCxHQUFBM0YsTUFBQSxnQkFBQVUsR0FFQTRmLEdBSUEsSUFDQXRKLEdBQUEsUUFDQXdyQixHQUFBLFNBQ0FDLEdBQUEsd0NBQ0FDLEdBQUEscUNBMENBLzhCLEdBQUFnOUIsTUFBQSxTQUFBMWpCLEVBQUFsSSxHQUNBLElBQUFELEVBQ0F5QixLQUNBbkssRUFBQSxTQUFBbkYsRUFBQTI1QixHQUdBLElBQUFuakMsRUFBQWtHLEdBQUFVLFdBQUF1OEIsR0FDQUEsSUFDQUEsRUFFQXJxQixFQUFBQSxFQUFBeFcsUUFBQThnQyxtQkFBQTU1QixHQUFBLElBQ0E0NUIsbUJBQUEsTUFBQXBqQyxFQUFBLEdBQUFBLElBSUEsR0FBQXVDLE1BQUFDLFFBQUFnZCxJQUFBQSxFQUFBckUsU0FBQWpWLEdBQUEyVixjQUFBMkQsR0FHQXRaLEdBQUF3QixLQUFBOFgsRUFBQSxXQUNBN1EsRUFBQTNOLEtBQUFzRixLQUFBdEYsS0FBQWhCLGNBT0EsSUFBQXFYLEtBQUFtSSxFQUNBcEksRUFBQUMsRUFBQW1JLEVBQUFuSSxHQUFBQyxFQUFBM0ksR0FLQSxPQUFBbUssRUFBQTVCLEtBQUEsTUFHQWhSLEdBQUFtSSxHQUFBd0IsUUFDQXd6QixVQUFBLFdBQ0EsT0FBQW45QixHQUFBZzlCLE1BQUFsaUMsS0FBQXNpQyxtQkFFQUEsZUFBQSxXQUNBLE9BQUF0aUMsS0FBQThQLElBQUEsV0FHQSxJQUFBckssRUFBQVAsR0FBQThELEtBQUFoSixLQUFBLFlBQ0EsT0FBQXlGLEVBQUFQLEdBQUF3VyxVQUFBalcsR0FBQXpGLE9BRUFtRyxPQUFBLFdBQ0EsSUFBQWxCLEVBQUFqRixLQUFBaUYsS0FHQSxPQUFBakYsS0FBQXNGLE9BQUFKLEdBQUFsRixNQUFBMnJCLEdBQUEsY0FDQXNXLEdBQUEvN0IsS0FBQWxHLEtBQUFvRixZQUFBNDhCLEdBQUE5N0IsS0FBQWpCLEtBQ0FqRixLQUFBZ1AsVUFBQUQsR0FBQTdJLEtBQUFqQixNQUVBNkssSUFBQSxTQUFBN04sRUFBQW9ELEdBQ0EsSUFBQXBHLEVBQUFpRyxHQUFBbEYsTUFBQWYsTUFFQSxPQUFBLE1BQUFBLEVBQ0EsS0FHQXNDLE1BQUFDLFFBQUF2QyxHQUNBaUcsR0FBQTRLLElBQUE3USxFQUFBLFNBQUFBLEdBQ0EsT0FBQXFHLEtBQUFELEVBQUFDLEtBQUF0RyxNQUFBQyxFQUFBd0osUUFBQXM1QixHQUFBLFlBSUF6OEIsS0FBQUQsRUFBQUMsS0FBQXRHLE1BQUFDLEVBQUF3SixRQUFBczVCLEdBQUEsV0FDQXIzQixTQUtBLElBQ0E2M0IsR0FBQSxPQUNBQyxHQUFBLE9BQ0FDLEdBQUEsZ0JBQ0FDLEdBQUEsNkJBR0FDLEdBQUEsNERBQ0FDLEdBQUEsaUJBQ0FDLEdBQUEsUUFXQXR1QixNQU9BZ0QsTUFHQXVyQixHQUFBLEtBQUF4ekIsT0FBQSxLQUdBeXpCLEdBQUFua0MsR0FBQTZGLGNBQUEsS0FDQXMrQixHQUFBaFosS0FBQUosR0FBQUksS0FnUEE3a0IsR0FBQTJKLFFBR0FtMEIsT0FBQSxFQUdBQyxnQkFDQUMsUUFFQXRyQixjQUNBdXJCLElBQUF4WixHQUFBSSxLQUNBOWtCLEtBQUEsTUFDQW0rQixRQUFBVCxHQUFBejhCLEtBQUF5akIsR0FBQTBaLFVBQ0F4L0IsUUFBQSxFQUNBeS9CLGFBQUEsRUFDQUMsT0FBQSxFQUNBQyxZQUFBLG1EQWNBQyxTQUNBNUcsSUFBQWlHLEdBQ0FwK0IsS0FBQSxhQUNBNUQsS0FBQSxZQUNBK2UsSUFBQSw0QkFDQTZqQixLQUFBLHFDQUdBdnJCLFVBQ0EwSCxJQUFBLFVBQ0EvZSxLQUFBLFNBQ0E0aUMsS0FBQSxZQUdBNXFCLGdCQUNBK0csSUFBQSxjQUNBbmIsS0FBQSxlQUNBZy9CLEtBQUEsZ0JBS0FuckIsWUFHQW9yQixTQUFBdmUsT0FHQXdlLGFBQUEsRUFHQUMsWUFBQXprQyxLQUFBQyxNQUdBeWtDLFdBQUE1K0IsR0FBQTA4QixVQU9BanFCLGFBQ0F3ckIsS0FBQSxFQUNBaGlDLFNBQUEsSUFPQTRpQyxVQUFBLFNBQUF0c0IsRUFBQXVzQixHQUNBLE9BQUFBLEVBR0F4c0IsRUFBQUEsRUFBQUMsRUFBQXZTLEdBQUEwUyxjQUFBb3NCLEdBR0F4c0IsRUFBQXRTLEdBQUEwUyxhQUFBSCxJQUdBd3NCLGNBQUF6dEIsRUFBQWpDLElBQ0EydkIsY0FBQTF0QixFQUFBZSxJQUdBNHNCLEtBQUEsU0FBQWhCLEVBQUEzOEIsR0FtVUEsU0FBQWlCLEVBQUEyOEIsRUFBQUMsRUFBQXRzQixFQUFBdXNCLEdBQ0EsSUFBQTVyQixFQUFBNnJCLEVBQUFobEMsRUFBQWtaLEVBQUErckIsRUFDQUMsRUFBQUosRUFHQXQ4QixJQUlBQSxHQUFBLEVBR0EyOEIsR0FDQXZnQyxFQUFBNjZCLGFBQUEwRixHQUtBQyxPQUFBOThCLEVBR0ErOEIsRUFBQU4sR0FBQSxHQUdBdHRCLEVBQUE4WSxXQUFBc1UsRUFBQSxFQUFBLEVBQUEsRUFHQTFyQixFQUFBMHJCLEdBQUEsS0FBQUEsRUFBQSxLQUFBLE1BQUFBLEVBR0Fyc0IsSUFDQVUsRUFBQVosRUFBQUMsRUFBQWQsRUFBQWUsSUFJQVUsRUFBQUQsRUFBQVYsRUFBQVcsRUFBQXpCLEVBQUEwQixHQUdBQSxHQUdBWixFQUFBK3NCLGNBQ0FMLEVBQUF4dEIsRUFBQXNCLGtCQUFBLG9CQUVBcFQsR0FBQSs5QixhQUFBNkIsR0FBQU4sSUFFQUEsRUFBQXh0QixFQUFBc0Isa0JBQUEsV0FFQXBULEdBQUFnK0IsS0FBQTRCLEdBQUFOLElBS0EsTUFBQUosR0FBQSxTQUFBdHNCLEVBQUE3UyxLQUNBdy9CLEVBQUEsWUFHQSxNQUFBTCxFQUNBSyxFQUFBLGVBSUFBLEVBQUFoc0IsRUFBQVMsTUFDQXFyQixFQUFBOXJCLEVBQUF4WSxLQUVBeVksSUFEQW5aLEVBQUFrWixFQUFBbFosVUFNQUEsRUFBQWtsQyxHQUNBTCxHQUFBSyxJQUNBQSxFQUFBLFFBQ0FMLEVBQUEsSUFDQUEsRUFBQSxLQU1BcHRCLEVBQUFvdEIsT0FBQUEsRUFDQXB0QixFQUFBeXRCLFlBQUFKLEdBQUFJLEdBQUEsR0FHQS9yQixFQUNBbEUsRUFBQVcsWUFBQTR2QixHQUFBUixFQUFBRSxFQUFBenRCLElBRUF4QyxFQUFBaUIsV0FBQXN2QixHQUFBL3RCLEVBQUF5dEIsRUFBQWxsQyxJQUlBeVgsRUFBQWd1QixXQUFBQSxHQUNBQSxPQUFBbjlCLEVBRUFvOUIsR0FDQUMsRUFBQWxRLFFBQUF0YyxFQUFBLGNBQUEsYUFDQTFCLEVBQUFjLEVBQUFZLEVBQUE2ckIsRUFBQWhsQyxJQUlBNGxDLEVBQUExWCxTQUFBc1gsR0FBQS90QixFQUFBeXRCLElBRUFRLElBQ0FDLEVBQUFsUSxRQUFBLGdCQUFBaGUsRUFBQWMsTUFHQTVTLEdBQUE4OUIsUUFDQTk5QixHQUFBcEcsTUFBQWsyQixRQUFBLGNBM2FBLGlCQUFBbU8sSUFDQTM4QixFQUFBMjhCLEVBQ0FBLE9BQUF0N0IsR0FJQXJCLEVBQUFBLE1BRUEsSUFBQW0rQixFQUdBRyxFQUdBRixFQUNBUSxFQUdBVixFQUdBVyxFQUdBdDlCLEVBR0FrOUIsRUFHQWhqQyxFQUdBcWpDLEVBR0F4dEIsRUFBQTVTLEdBQUE2K0IsYUFBQXY5QixHQUdBdStCLEVBQUFqdEIsRUFBQTNXLFNBQUEyVyxFQUdBb3RCLEVBQUFwdEIsRUFBQTNXLFVBQ0E0akMsRUFBQWgvQixVQUFBZy9CLEVBQUE1cUIsUUFDQWpWLEdBQUE2L0IsR0FDQTcvQixHQUFBcEcsTUFHQTBWLEVBQUF0UCxHQUFBdVAsV0FDQTB3QixFQUFBamdDLEdBQUE0bkIsVUFBQSxlQUdBa1ksRUFBQWx0QixFQUFBa3RCLGVBR0FPLEtBQ0FDLEtBR0FDLEVBQUEsV0FHQXp1QixHQUNBOFksV0FBQSxFQUdBeFgsa0JBQUEsU0FBQTlQLEdBQ0EsSUFBQTdCLEVBQ0EsR0FBQW9CLEVBQUEsQ0FDQSxJQUFBcTlCLEVBRUEsSUFEQUEsS0FDQXorQixFQUFBKzdCLEdBQUE5NEIsS0FBQWc3QixJQUNBUSxFQUFBeitCLEVBQUEsR0FBQXBCLGVBQUFvQixFQUFBLEdBR0FBLEVBQUF5K0IsRUFBQTU4QixFQUFBakQsZUFFQSxPQUFBLE1BQUFvQixFQUFBLEtBQUFBLEdBSUErK0Isc0JBQUEsV0FDQSxPQUFBMzlCLEVBQUE2OEIsRUFBQSxNQUlBZSxpQkFBQSxTQUFBcmdDLEVBQUF0RyxHQU1BLE9BTEEsTUFBQStJLElBQ0F6QyxFQUFBa2dDLEVBQUFsZ0MsRUFBQUMsZUFDQWlnQyxFQUFBbGdDLEVBQUFDLGdCQUFBRCxFQUNBaWdDLEVBQUFqZ0MsR0FBQXRHLEdBRUFnQixNQUlBNGxDLGlCQUFBLFNBQUEzZ0MsR0FJQSxPQUhBLE1BQUE4QyxJQUNBK1AsRUFBQU8sU0FBQXBULEdBRUFqRixNQUlBZ2xDLFdBQUEsU0FBQWwxQixHQUNBLElBQUF4TCxFQUNBLEdBQUF3TCxFQUNBLEdBQUEvSCxFQUdBaVAsRUFBQXRDLE9BQUE1RSxFQUFBa0gsRUFBQW90QixjQUlBLElBQUE5L0IsS0FBQXdMLEVBQ0FrMUIsRUFBQTFnQyxJQUFBMGdDLEVBQUExZ0MsR0FBQXdMLEVBQUF4TCxJQUlBLE9BQUF0RSxNQUlBNmxDLE1BQUEsU0FBQXBCLEdBQ0EsSUFBQXFCLEVBQUFyQixHQUFBZ0IsRUFLQSxPQUpBZCxHQUNBQSxFQUFBa0IsTUFBQUMsR0FFQXIrQixFQUFBLEVBQUFxK0IsR0FDQTlsQyxPQW9CQSxHQWZBd1UsRUFBQWhOLFFBQUF3UCxHQUtBYyxFQUFBcXJCLE1BQUFBLEdBQUFyckIsRUFBQXFyQixLQUFBeFosR0FBQUksTUFBQSxJQUNBdGhCLFFBQUFvNkIsR0FBQWxaLEdBQUEwWixTQUFBLE1BR0F2ckIsRUFBQTdTLEtBQUF1QixFQUFBZSxRQUFBZixFQUFBdkIsTUFBQTZTLEVBQUF2USxRQUFBdVEsRUFBQTdTLEtBR0E2UyxFQUFBakIsV0FBQWlCLEVBQUFsQixVQUFBLEtBQUFyUixjQUFBb0IsTUFBQUMsTUFBQSxJQUdBLE1BQUFrUixFQUFBaXVCLFlBQUEsQ0FDQVYsRUFBQXptQyxHQUFBNkYsY0FBQSxLQUtBLElBQ0E0Z0MsRUFBQXRiLEtBQUFqUyxFQUFBcXJCLElBSUFrQyxFQUFBdGIsS0FBQXNiLEVBQUF0YixLQUNBalMsRUFBQWl1QixZQUFBaEQsR0FBQU0sU0FBQSxLQUFBTixHQUFBaUQsTUFDQVgsRUFBQWhDLFNBQUEsS0FBQWdDLEVBQUFXLEtBQ0EsTUFBQXA5QixHQUlBa1AsRUFBQWl1QixhQUFBLEdBYUEsR0FSQWp1QixFQUFBN1gsTUFBQTZYLEVBQUF3ckIsYUFBQSxpQkFBQXhyQixFQUFBN1gsT0FDQTZYLEVBQUE3WCxLQUFBaUYsR0FBQWc5QixNQUFBcHFCLEVBQUE3WCxLQUFBNlgsRUFBQXhCLGNBSUFTLEVBQUF4QyxHQUFBdUQsRUFBQXRSLEVBQUF3USxHQUdBalAsRUFDQSxPQUFBaVAsR0FLQWl1QixFQUFBLy9CLEdBQUFwRyxPQUFBZ1osRUFBQWpVLFNBR0EsR0FBQXFCLEdBQUE4OUIsVUFDQTk5QixHQUFBcEcsTUFBQWsyQixRQUFBLGFBSUFsZCxFQUFBN1MsS0FBQTZTLEVBQUE3UyxLQUFBa00sY0FHQTJHLEVBQUFtdUIsWUFBQXJELEdBQUExOEIsS0FBQTRSLEVBQUE3UyxNQUtBNi9CLEVBQUFodEIsRUFBQXFyQixJQUFBMTZCLFFBQUErNUIsR0FBQSxJQUdBMXFCLEVBQUFtdUIsV0F1QkFudUIsRUFBQTdYLE1BQUE2WCxFQUFBd3JCLGFBQ0EsS0FBQXhyQixFQUFBMHJCLGFBQUEsSUFBQXg5QixRQUFBLHVDQUNBOFIsRUFBQTdYLEtBQUE2WCxFQUFBN1gsS0FBQXdJLFFBQUE4NUIsR0FBQSxPQXRCQStDLEVBQUF4dEIsRUFBQXFyQixJQUFBcjdCLE1BQUFnOUIsRUFBQXhqQyxRQUdBd1csRUFBQTdYLE9BQ0E2a0MsSUFBQW5ELEdBQUF6N0IsS0FBQTQrQixHQUFBLElBQUEsS0FBQWh0QixFQUFBN1gsWUFHQTZYLEVBQUE3WCxPQUlBLElBQUE2WCxFQUFBK0YsUUFDQWluQixFQUFBQSxFQUFBcjhCLFFBQUFnNkIsR0FBQSxNQUNBNkMsR0FBQTNELEdBQUF6N0IsS0FBQTQrQixHQUFBLElBQUEsS0FBQSxLQUFBcEQsS0FBQTRELEdBSUF4dEIsRUFBQXFyQixJQUFBMkIsRUFBQVEsR0FTQXh0QixFQUFBK3NCLGFBQ0EzL0IsR0FBQSs5QixhQUFBNkIsSUFDQTl0QixFQUFBMnVCLGlCQUFBLG9CQUFBemdDLEdBQUErOUIsYUFBQTZCLElBRUE1L0IsR0FBQWcrQixLQUFBNEIsSUFDQTl0QixFQUFBMnVCLGlCQUFBLGdCQUFBemdDLEdBQUFnK0IsS0FBQTRCLE1BS0FodEIsRUFBQTdYLE1BQUE2WCxFQUFBbXVCLGFBQUEsSUFBQW51QixFQUFBMHJCLGFBQUFoOUIsRUFBQWc5QixjQUNBeHNCLEVBQUEydUIsaUJBQUEsZUFBQTd0QixFQUFBMHJCLGFBSUF4c0IsRUFBQTJ1QixpQkFDQSxTQUNBN3RCLEVBQUFqQixVQUFBLElBQUFpQixFQUFBMnJCLFFBQUEzckIsRUFBQWpCLFVBQUEsSUFDQWlCLEVBQUEyckIsUUFBQTNyQixFQUFBakIsVUFBQSxLQUNBLE1BQUFpQixFQUFBakIsVUFBQSxHQUFBLEtBQUFpc0IsR0FBQSxXQUFBLElBQ0FockIsRUFBQTJyQixRQUFBLE1BSUEsSUFBQXhoQyxLQUFBNlYsRUFBQXdzQixRQUNBdHRCLEVBQUEydUIsaUJBQUExakMsRUFBQTZWLEVBQUF3c0IsUUFBQXJpQyxJQUlBLEdBQUE2VixFQUFBb3VCLGNBQ0EsSUFBQXB1QixFQUFBb3VCLFdBQUFwZ0MsS0FBQWkvQixFQUFBL3RCLEVBQUFjLElBQUEvUCxHQUdBLE9BQUFpUCxFQUFBNnVCLFFBZUEsR0FYQUosRUFBQSxRQUdBTixFQUFBeDNCLElBQUFtSyxFQUFBaEMsVUFDQWtCLEVBQUF2UCxLQUFBcVEsRUFBQXlzQixTQUNBdnRCLEVBQUF0UCxLQUFBb1EsRUFBQXZZLE9BR0FvbEMsRUFBQTV0QixFQUFBUSxHQUFBTyxFQUFBdFIsRUFBQXdRLEdBS0EsQ0FTQSxHQVJBQSxFQUFBOFksV0FBQSxFQUdBbVYsR0FDQUMsRUFBQWxRLFFBQUEsWUFBQWhlLEVBQUFjLElBSUEvUCxFQUNBLE9BQUFpUCxFQUlBYyxFQUFBeXJCLE9BQUF6ckIsRUFBQWluQixRQUFBLElBQ0EyRixFQUFBdmdDLEVBQUF5TyxXQUFBLFdBQ0FvRSxFQUFBNnVCLE1BQUEsWUFDQS90QixFQUFBaW5CLFVBR0EsSUFDQWgzQixHQUFBLEVBQ0E0OEIsRUFBQXdCLEtBQUFaLEVBQUE5OUIsR0FDQSxNQUFBbUIsR0FHQSxHQUFBYixFQUNBLE1BQUFhLEVBSUFuQixHQUFBLEVBQUFtQixTQWhDQW5CLEdBQUEsRUFBQSxnQkFxSkEsT0FBQXVQLEdBR0FvdkIsUUFBQSxTQUFBakQsRUFBQWxqQyxFQUFBb1AsR0FDQSxPQUFBbkssR0FBQXdGLElBQUF5NEIsRUFBQWxqQyxFQUFBb1AsRUFBQSxTQUdBZzNCLFVBQUEsU0FBQWxELEVBQUE5ekIsR0FDQSxPQUFBbkssR0FBQXdGLElBQUF5NEIsT0FBQXQ3QixFQUFBd0gsRUFBQSxhQUlBbkssR0FBQXdCLE1BQUEsTUFBQSxRQUFBLFNBQUF6RSxFQUFBc0YsR0FDQXJDLEdBQUFxQyxHQUFBLFNBQUE0N0IsRUFBQWxqQyxFQUFBb1AsRUFBQXBLLEdBVUEsT0FQQUMsR0FBQVUsV0FBQTNGLEtBQ0FnRixFQUFBQSxHQUFBb0ssRUFDQUEsRUFBQXBQLEVBQ0FBLE9BQUE0SCxHQUlBM0MsR0FBQWkvQixLQUFBai9CLEdBQUEySixRQUNBczBCLElBQUFBLEVBQ0FsK0IsS0FBQXNDLEVBQ0FxUCxTQUFBM1IsRUFDQWhGLEtBQUFBLEVBQ0Fza0MsUUFBQWwxQixHQUNBbkssR0FBQTJWLGNBQUFzb0IsSUFBQUEsT0FLQWorQixHQUFBOEssU0FBQSxTQUFBbXpCLEdBQ0EsT0FBQWorQixHQUFBaS9CLE1BQ0FoQixJQUFBQSxFQUdBbCtCLEtBQUEsTUFDQTJSLFNBQUEsU0FDQWlILE9BQUEsRUFDQTBsQixPQUFBLEVBQ0ExL0IsUUFBQSxFQUNBb1YsUUFBQSxLQUtBL1QsR0FBQW1JLEdBQUF3QixRQUNBeTNCLFFBQUEsU0FBQXhsQyxHQUNBLElBQUE2SyxFQXlCQSxPQXZCQTNMLEtBQUEsS0FDQWtGLEdBQUFVLFdBQUE5RSxLQUNBQSxFQUFBQSxFQUFBZ0YsS0FBQTlGLEtBQUEsS0FJQTJMLEVBQUF6RyxHQUFBcEUsRUFBQWQsS0FBQSxHQUFBa0ssZUFBQTJGLEdBQUEsR0FBQUUsT0FBQSxHQUVBL1AsS0FBQSxHQUFBNkUsWUFDQThHLEVBQUEyc0IsYUFBQXQ0QixLQUFBLElBR0EyTCxFQUFBbUUsSUFBQSxXQUdBLElBRkEsSUFBQXpLLEVBQUFyRixLQUVBcUYsRUFBQWtoQyxtQkFDQWxoQyxFQUFBQSxFQUFBa2hDLGtCQUdBLE9BQUFsaEMsSUFDQSt5QixPQUFBcDRCLE9BR0FBLE1BR0F3bUMsVUFBQSxTQUFBMWxDLEdBQ0EsT0FBQW9FLEdBQUFVLFdBQUE5RSxHQUNBZCxLQUFBMEcsS0FBQSxTQUFBekUsR0FDQWlELEdBQUFsRixNQUFBd21DLFVBQUExbEMsRUFBQWdGLEtBQUE5RixLQUFBaUMsTUFJQWpDLEtBQUEwRyxLQUFBLFdBQ0EsSUFBQXRFLEVBQUE4QyxHQUFBbEYsTUFDQW1ZLEVBQUEvVixFQUFBK1YsV0FFQUEsRUFBQTdXLE9BQ0E2VyxFQUFBbXVCLFFBQUF4bEMsR0FHQXNCLEVBQUFnMkIsT0FBQXQzQixNQUtBNkssS0FBQSxTQUFBN0ssR0FDQSxJQUFBOEUsRUFBQVYsR0FBQVUsV0FBQTlFLEdBRUEsT0FBQWQsS0FBQTBHLEtBQUEsU0FBQXpFLEdBQ0FpRCxHQUFBbEYsTUFBQXNtQyxRQUFBMWdDLEVBQUE5RSxFQUFBZ0YsS0FBQTlGLEtBQUFpQyxHQUFBbkIsTUFJQTJsQyxPQUFBLFNBQUFyNUIsR0FJQSxPQUhBcE4sS0FBQWlwQixPQUFBN2IsR0FBQXpILElBQUEsUUFBQWUsS0FBQSxXQUNBeEIsR0FBQWxGLE1BQUF5NEIsWUFBQXo0QixLQUFBd00sY0FFQXhNLFFBS0FrRixHQUFBcWlCLEtBQUE1RCxRQUFBalIsT0FBQSxTQUFBck4sR0FDQSxPQUFBSCxHQUFBcWlCLEtBQUE1RCxRQUFBK2lCLFFBQUFyaEMsSUFFQUgsR0FBQXFpQixLQUFBNUQsUUFBQStpQixRQUFBLFNBQUFyaEMsR0FDQSxTQUFBQSxFQUFBc2hDLGFBQUF0aEMsRUFBQXVoQyxjQUFBdmhDLEVBQUFtMkIsaUJBQUFsNkIsU0FNQTRELEdBQUEwUyxhQUFBaXZCLElBQUEsV0FDQSxJQUNBLE9BQUEsSUFBQTFpQyxFQUFBMmlDLGVBQ0EsTUFBQWwrQixNQUdBLElBQUFtK0IsSUFHQUMsRUFBQSxJQUlBQyxLQUFBLEtBRUFDLEdBQUFoaUMsR0FBQTBTLGFBQUFpdkIsTUFFQW4zQixHQUFBeTNCLE9BQUFELElBQUEsb0JBQUFBLEdBQ0F4M0IsR0FBQXkwQixLQUFBK0MsS0FBQUEsR0FFQWhpQyxHQUFBZy9CLGNBQUEsU0FBQTE5QixHQUNBLElBQUE2SSxFQUFBKzNCLEVBR0EsR0FBQTEzQixHQUFBeTNCLE1BQUFELEtBQUExZ0MsRUFBQXUvQixZQUNBLE9BQ0FJLEtBQUEsU0FBQTdCLEVBQUF4dUIsR0FDQSxJQUFBN1QsRUFDQTRrQyxFQUFBcmdDLEVBQUFxZ0MsTUFXQSxHQVRBQSxFQUFBUSxLQUNBN2dDLEVBQUF2QixLQUNBdUIsRUFBQTI4QixJQUNBMzhCLEVBQUErOEIsTUFDQS84QixFQUFBOGdDLFNBQ0E5Z0MsRUFBQW9rQixVQUlBcGtCLEVBQUErZ0MsVUFDQSxJQUFBdGxDLEtBQUF1RSxFQUFBK2dDLFVBQ0FWLEVBQUE1a0MsR0FBQXVFLEVBQUErZ0MsVUFBQXRsQyxHQUtBdUUsRUFBQTZSLFVBQUF3dUIsRUFBQWpCLGtCQUNBaUIsRUFBQWpCLGlCQUFBcC9CLEVBQUE2UixVQVFBN1IsRUFBQXUvQixhQUFBekIsRUFBQSxzQkFDQUEsRUFBQSxvQkFBQSxrQkFJQSxJQUFBcmlDLEtBQUFxaUMsRUFDQXVDLEVBQUFsQixpQkFBQTFqQyxFQUFBcWlDLEVBQUFyaUMsSUFJQW9OLEVBQUEsU0FBQXBLLEdBQ0EsT0FBQSxXQUNBb0ssSUFDQUEsRUFBQSszQixFQUFBUCxFQUFBVyxPQUNBWCxFQUFBWSxRQUFBWixFQUFBYSxRQUFBYixFQUFBYyxtQkFBQSxLQUVBLFVBQUExaUMsRUFDQTRoQyxFQUFBaEIsUUFDQSxVQUFBNWdDLEVBS0EsaUJBQUE0aEMsRUFBQXpDLE9BQ0F0dUIsRUFBQSxFQUFBLFNBRUFBLEVBR0Erd0IsRUFBQXpDLE9BQ0F5QyxFQUFBcEMsWUFJQTN1QixFQUNBaXhCLEdBQUFGLEVBQUF6QyxTQUFBeUMsRUFBQXpDLE9BQ0F5QyxFQUFBcEMsV0FLQSxVQUFBb0MsRUFBQWUsY0FBQSxTQUNBLGlCQUFBZixFQUFBZ0IsY0FDQUMsT0FBQWpCLEVBQUFwdUIsV0FDQS9ULEtBQUFtaUMsRUFBQWdCLGNBQ0FoQixFQUFBbkIsNEJBUUFtQixFQUFBVyxPQUFBbjRCLElBQ0ErM0IsRUFBQVAsRUFBQVksUUFBQXA0QixFQUFBLGNBS0F4SCxJQUFBZy9CLEVBQUFhLFFBQ0FiLEVBQUFhLFFBQUFOLEVBRUFQLEVBQUFjLG1CQUFBLFdBR0EsSUFBQWQsRUFBQS9XLFlBTUEzckIsRUFBQXlPLFdBQUEsV0FDQXZELEdBQ0ErM0IsT0FRQS8zQixFQUFBQSxFQUFBLFNBRUEsSUFHQXczQixFQUFBVixLQUFBMy9CLEVBQUF5L0IsWUFBQXovQixFQUFBdkcsTUFBQSxNQUNBLE1BQUEySSxHQUdBLEdBQUF5RyxFQUNBLE1BQUF6RyxJQUtBaTlCLE1BQUEsV0FDQXgyQixHQUNBQSxRQVdBbkssR0FBQSsrQixjQUFBLFNBQUFuc0IsR0FDQUEsRUFBQWl1QixjQUNBanVCLEVBQUFLLFNBQUEzVCxRQUFBLEtBS0FVLEdBQUE2K0IsV0FDQU4sU0FDQWovQixPQUFBLDZGQUdBMlQsVUFDQTNULE9BQUEsMkJBRUErVCxZQUNBd3ZCLGNBQUEsU0FBQXJqQyxHQUVBLE9BREFRLEdBQUFxVyxXQUFBN1csR0FDQUEsTUFNQVEsR0FBQSsrQixjQUFBLFNBQUEsU0FBQW5zQixRQUNBalEsSUFBQWlRLEVBQUErRixRQUNBL0YsRUFBQStGLE9BQUEsR0FFQS9GLEVBQUFpdUIsY0FDQWp1QixFQUFBN1MsS0FBQSxTQUtBQyxHQUFBZy9CLGNBQUEsU0FBQSxTQUFBcHNCLEdBR0EsR0FBQUEsRUFBQWl1QixZQUFBLENBQ0EsSUFBQXZoQyxFQUFBNkssRUFDQSxPQUNBODJCLEtBQUEsU0FBQXQvQixFQUFBaVAsR0FDQXRSLEVBQUFVLEdBQUEsWUFBQThELE1BQ0FnL0IsUUFBQWx3QixFQUFBbXdCLGNBQ0E5NUIsSUFBQTJKLEVBQUFxckIsTUFDQXRrQyxHQUNBLGFBQ0F3USxFQUFBLFNBQUE2NEIsR0FDQTFqQyxFQUFBMEwsU0FDQWIsRUFBQSxLQUNBNjRCLEdBQ0FweUIsRUFBQSxVQUFBb3lCLEVBQUFqakMsS0FBQSxJQUFBLElBQUFpakMsRUFBQWpqQyxRQU1BckcsR0FBQStGLEtBQUFDLFlBQUFKLEVBQUEsS0FFQXFoQyxNQUFBLFdBQ0F4MkIsR0FDQUEsU0FVQSxJQUFBODRCLE1BQ0FDLEdBQUEsb0JBR0FsakMsR0FBQTYrQixXQUNBc0UsTUFBQSxXQUNBQyxjQUFBLFdBQ0EsSUFBQWo1QixFQUFBODRCLEdBQUF6bEIsT0FBQXhkLEdBQUFpRCxRQUFBLElBQUF1NUIsS0FFQSxPQURBMWhDLEtBQUFxUCxJQUFBLEVBQ0FBLEtBS0FuSyxHQUFBKytCLGNBQUEsYUFBQSxTQUFBbnNCLEVBQUF5d0IsRUFBQXZ4QixHQUVBLElBQUF3eEIsRUFBQUMsRUFBQUMsRUFDQUMsR0FBQSxJQUFBN3dCLEVBQUF1d0IsUUFBQUQsR0FBQWxpQyxLQUFBNFIsRUFBQXFyQixLQUNBLE1BQ0EsaUJBQUFyckIsRUFBQTdYLE1BRUEsS0FEQTZYLEVBQUEwckIsYUFBQSxJQUNBeDlCLFFBQUEsc0NBQ0FvaUMsR0FBQWxpQyxLQUFBNFIsRUFBQTdYLE9BQUEsUUFJQSxHQUFBMG9DLEdBQUEsVUFBQTd3QixFQUFBakIsVUFBQSxHQThEQSxPQTNEQTJ4QixFQUFBMXdCLEVBQUF3d0IsY0FBQXBqQyxHQUFBVSxXQUFBa1MsRUFBQXd3QixlQUNBeHdCLEVBQUF3d0IsZ0JBQ0F4d0IsRUFBQXd3QixjQUdBSyxFQUNBN3dCLEVBQUE2d0IsR0FBQTd3QixFQUFBNndCLEdBQUFsZ0MsUUFBQTIvQixHQUFBLEtBQUFJLElBQ0EsSUFBQTF3QixFQUFBdXdCLFFBQ0F2d0IsRUFBQXFyQixNQUFBeEIsR0FBQXo3QixLQUFBNFIsRUFBQXFyQixLQUFBLElBQUEsS0FBQXJyQixFQUFBdXdCLE1BQUEsSUFBQUcsR0FJQTF3QixFQUFBUyxXQUFBLGVBQUEsV0FJQSxPQUhBbXdCLEdBQ0F4akMsR0FBQTNGLE1BQUFpcEMsRUFBQSxtQkFFQUUsRUFBQSxJQUlBNXdCLEVBQUFqQixVQUFBLEdBQUEsT0FHQTR4QixFQUFBdGtDLEVBQUFxa0MsR0FDQXJrQyxFQUFBcWtDLEdBQUEsV0FDQUUsRUFBQWo3QixXQUlBdUosRUFBQXRDLE9BQUEsZ0JBR0E3TSxJQUFBNGdDLEVBQ0F2akMsR0FBQWYsR0FBQTA3QixXQUFBMkksR0FJQXJrQyxFQUFBcWtDLEdBQUFDLEVBSUEzd0IsRUFBQTB3QixLQUdBMXdCLEVBQUF3d0IsY0FBQUMsRUFBQUQsY0FHQUgsR0FBQXZtQyxLQUFBNG1DLElBSUFFLEdBQUF4akMsR0FBQVUsV0FBQTZpQyxJQUNBQSxFQUFBQyxFQUFBLElBR0FBLEVBQUFELE9BQUE1Z0MsSUFJQSxXQVlBNkgsR0FBQWs1QixtQkFBQSxXQUNBLElBQUF2K0IsRUFBQXpMLEdBQUFpcUMsZUFBQUQsbUJBQUEsSUFBQXYrQixLQUVBLE9BREFBLEVBQUFnQyxVQUFBLDZCQUNBLElBQUFoQyxFQUFBbUMsV0FBQWxMLFVBUUE0RCxHQUFBOG1CLFVBQUEsU0FBQS9yQixFQUFBa0IsRUFBQTJuQyxHQUNBLEdBQUEsaUJBQUE3b0MsRUFDQSxTQUVBLGtCQUFBa0IsSUFDQTJuQyxFQUFBM25DLEVBQ0FBLEdBQUEsR0FHQSxJQUFBc2UsRUFBQXNwQixFQUFBeDlCLEVBd0JBLE9BdEJBcEssSUFJQXVPLEdBQUFrNUIscUJBTUFucEIsR0FMQXRlLEVBQUF2QyxHQUFBaXFDLGVBQUFELG1CQUFBLEtBS0Fua0MsY0FBQSxTQUNBc2xCLEtBQUFuckIsR0FBQStxQixTQUFBSSxLQUNBNW9CLEVBQUF3RCxLQUFBQyxZQUFBNmEsSUFFQXRlLEVBQUF2QyxJQUlBbXFDLEVBQUFqZCxHQUFBbGlCLEtBQUEzSixHQUNBc0wsR0FBQXU5QixNQUdBQyxHQUNBNW5DLEVBQUFzRCxjQUFBc2tDLEVBQUEsTUFHQUEsRUFBQXo5QixHQUFBckwsR0FBQWtCLEVBQUFvSyxHQUVBQSxHQUFBQSxFQUFBakssUUFDQTRELEdBQUFxRyxHQUFBMkUsU0FHQWhMLEdBQUErRixTQUFBODlCLEVBQUF2OEIsY0FPQXRILEdBQUFtSSxHQUFBeW5CLEtBQUEsU0FBQXFPLEVBQUE2RixFQUFBMzVCLEdBQ0EsSUFBQWpDLEVBQUFuSSxFQUFBd1QsRUFDQXJXLEVBQUFwQyxLQUNBd04sRUFBQTIxQixFQUFBbjlCLFFBQUEsS0FzREEsT0FwREF3SCxHQUFBLElBQ0FKLEVBQUE2SSxFQUFBa3RCLEVBQUFyN0IsTUFBQTBGLElBQ0EyMUIsRUFBQUEsRUFBQXI3QixNQUFBLEVBQUEwRixJQUlBdEksR0FBQVUsV0FBQW9qQyxJQUdBMzVCLEVBQUEyNUIsRUFDQUEsT0FBQW5oQyxHQUdBbWhDLEdBQUEsaUJBQUFBLElBQ0EvakMsRUFBQSxRQUlBN0MsRUFBQWQsT0FBQSxHQUNBNEQsR0FBQWkvQixNQUNBaEIsSUFBQUEsRUFLQWwrQixLQUFBQSxHQUFBLE1BQ0EyUixTQUFBLE9BQ0EzVyxLQUFBK29DLElBQ0F2aEMsS0FBQSxTQUFBb2dDLEdBR0FwdkIsRUFBQWhMLFVBRUFyTCxFQUFBdEIsS0FBQXNNLEVBSUFsSSxHQUFBLFNBQUFrekIsT0FBQWx6QixHQUFBOG1CLFVBQUE2YixJQUFBcmxCLEtBQUFwVixHQUdBeTZCLEtBS0FuekIsT0FBQXJGLEdBQUEsU0FBQTJILEVBQUFvdEIsR0FDQWhpQyxFQUFBc0UsS0FBQSxXQUNBMkksRUFBQXpILE1BQUE1SCxLQUFBeVksSUFBQXpCLEVBQUE2d0IsYUFBQXpELEVBQUFwdEIsUUFLQWhYLE1BT0FrRixHQUFBd0IsTUFDQSxZQUNBLFdBQ0EsZUFDQSxZQUNBLGNBQ0EsWUFDQSxTQUFBekUsRUFBQWdELEdBQ0FDLEdBQUFtSSxHQUFBcEksR0FBQSxTQUFBb0ksR0FDQSxPQUFBck4sS0FBQW5CLEdBQUFvRyxFQUFBb0ksTUFPQW5JLEdBQUFxaUIsS0FBQTVELFFBQUFzbEIsU0FBQSxTQUFBNWpDLEdBQ0EsT0FBQUgsR0FBQVcsS0FBQVgsR0FBQWk1QixPQUFBLFNBQUE5d0IsR0FDQSxPQUFBaEksSUFBQWdJLEVBQUFoSSxPQUNBL0QsUUFNQTRELEdBQUF6QixRQUNBeWxDLFVBQUEsU0FBQTdqQyxFQUFBbUIsRUFBQXZFLEdBQ0EsSUFBQWtuQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUNBbm5DLEVBQUE2QyxHQUFBcEMsSUFBQXVDLEVBQUEsWUFDQW9rQyxFQUFBdmtDLEdBQUFHLEdBQ0F5TyxLQUdBLFdBQUF6UixJQUNBZ0QsRUFBQXdFLE1BQUF4SCxTQUFBLFlBR0FrbkMsRUFBQUUsRUFBQWhtQyxTQUNBNGxDLEVBQUFua0MsR0FBQXBDLElBQUF1QyxFQUFBLE9BQ0Fta0MsRUFBQXRrQyxHQUFBcEMsSUFBQXVDLEVBQUEsU0FDQSxhQUFBaEQsR0FBQSxVQUFBQSxLQUNBZ25DLEVBQUFHLEdBQUF4akMsUUFBQSxTQUFBLEdBTUFzakMsR0FEQUgsRUFBQU0sRUFBQXBuQyxZQUNBMGpCLElBQ0FxakIsRUFBQUQsRUFBQXBtQyxPQUdBdW1DLEVBQUFsM0IsV0FBQWkzQixJQUFBLEVBQ0FELEVBQUFoM0IsV0FBQW8zQixJQUFBLEdBR0F0a0MsR0FBQVUsV0FBQVksS0FHQUEsRUFBQUEsRUFBQVYsS0FBQVQsRUFBQXBELEVBQUFpRCxHQUFBMkosVUFBQTA2QixLQUdBLE1BQUEvaUMsRUFBQXVmLE1BQ0FqUyxFQUFBaVMsSUFBQXZmLEVBQUF1ZixJQUFBd2pCLEVBQUF4akIsSUFBQXVqQixHQUVBLE1BQUE5aUMsRUFBQXpELE9BQ0ErUSxFQUFBL1EsS0FBQXlELEVBQUF6RCxLQUFBd21DLEVBQUF4bUMsS0FBQXFtQyxHQUdBLFVBQUE1aUMsRUFDQUEsRUFBQWtqQyxNQUFBNWpDLEtBQUFULEVBQUF5TyxHQUdBMjFCLEVBQUEzbUMsSUFBQWdSLEtBS0E1TyxHQUFBbUksR0FBQXdCLFFBQ0FwTCxPQUFBLFNBQUErQyxHQUdBLEdBQUFpSCxVQUFBbk0sT0FDQSxZQUFBdUcsSUFBQXJCLEVBQ0F4RyxLQUNBQSxLQUFBMEcsS0FBQSxTQUFBekUsR0FDQWlELEdBQUF6QixPQUFBeWxDLFVBQUFscEMsS0FBQXdHLEVBQUF2RSxLQUlBLElBQUFzQyxFQUFBeWUsRUFBQTJtQixFQUFBQyxFQUNBdmtDLEVBQUFyRixLQUFBLEdBRUEsR0FBQXFGLEVBUUEsT0FBQUEsRUFBQW0yQixpQkFBQWw2QixRQUlBcW9DLEVBQUF0a0MsRUFBQW8yQix3QkFFQWwzQixFQUFBYyxFQUFBNkUsY0FDQThZLEVBQUF6ZSxFQUFBb2hCLGdCQUNBaWtCLEVBQUFybEMsRUFBQXVoQixhQUdBQyxJQUFBNGpCLEVBQUE1akIsSUFBQTZqQixFQUFBQyxZQUFBN21CLEVBQUE4bUIsVUFDQS9tQyxLQUFBNG1DLEVBQUE1bUMsS0FBQTZtQyxFQUFBRyxZQUFBL21CLEVBQUFnbkIsY0FYQWprQixJQUFBLEVBQUFoakIsS0FBQSxJQWVBVixTQUFBLFdBQ0EsR0FBQXJDLEtBQUEsR0FBQSxDQUlBLElBQUFpcUMsRUFBQXhtQyxFQUNBNEIsRUFBQXJGLEtBQUEsR0FDQWtxQyxHQUFBbmtCLElBQUEsRUFBQWhqQixLQUFBLEdBNEJBLE1BeEJBLFVBQUFtQyxHQUFBcEMsSUFBQXVDLEVBQUEsWUFHQTVCLEVBQUE0QixFQUFBbzJCLHlCQUtBd08sRUFBQWpxQyxLQUFBaXFDLGVBR0F4bUMsRUFBQXpELEtBQUF5RCxTQUNBMkIsRUFBQTZrQyxFQUFBLEdBQUEsVUFDQUMsRUFBQUQsRUFBQXhtQyxVQUlBeW1DLEdBQ0Fua0IsSUFBQW1rQixFQUFBbmtCLElBQUE3Z0IsR0FBQXBDLElBQUFtbkMsRUFBQSxHQUFBLGtCQUFBLEdBQ0FsbkMsS0FBQW1uQyxFQUFBbm5DLEtBQUFtQyxHQUFBcEMsSUFBQW1uQyxFQUFBLEdBQUEsbUJBQUEsTUFNQWxrQixJQUFBdGlCLEVBQUFzaUIsSUFBQW1rQixFQUFBbmtCLElBQUE3Z0IsR0FBQXBDLElBQUF1QyxFQUFBLGFBQUEsR0FDQXRDLEtBQUFVLEVBQUFWLEtBQUFtbkMsRUFBQW5uQyxLQUFBbUMsR0FBQXBDLElBQUF1QyxFQUFBLGNBQUEsTUFjQTRrQyxhQUFBLFdBQ0EsT0FBQWpxQyxLQUFBOFAsSUFBQSxXQUdBLElBRkEsSUFBQW02QixFQUFBanFDLEtBQUFpcUMsYUFFQUEsR0FBQSxXQUFBL2tDLEdBQUFwQyxJQUFBbW5DLEVBQUEsYUFDQUEsRUFBQUEsRUFBQUEsYUFHQSxPQUFBQSxHQUFBdGtCLFFBTUF6Z0IsR0FBQXdCLE1BQUEyMUIsV0FBQSxjQUFBRCxVQUFBLGVBQUEsU0FBQTcwQixFQUFBeUIsR0FDQSxJQUFBK2MsRUFBQSxnQkFBQS9jLEVBRUE5RCxHQUFBbUksR0FBQTlGLEdBQUEsU0FBQXRJLEdBQ0EsT0FBQTBQLEdBQUEzTyxLQUFBLFNBQUFxRixFQUFBa0MsRUFBQXRJLEdBR0EsSUFBQTJxQyxFQU9BLEdBTkExa0MsR0FBQUMsU0FBQUUsR0FDQXVrQyxFQUFBdmtDLEVBQ0EsSUFBQUEsRUFBQVUsV0FDQTZqQyxFQUFBdmtDLEVBQUF5Z0Isa0JBR0FqZSxJQUFBNUksRUFDQSxPQUFBMnFDLEVBQUFBLEVBQUE1Z0MsR0FBQTNELEVBQUFrQyxHQUdBcWlDLEVBQ0FBLEVBQUFPLFNBQ0Fwa0IsRUFBQTZqQixFQUFBRyxZQUFBOXFDLEVBQ0E4bUIsRUFBQTltQixFQUFBMnFDLEVBQUFDLGFBSUF4a0MsRUFBQWtDLEdBQUF0SSxHQUVBc0ksRUFBQXRJLEVBQUF3TyxVQUFBbk0sV0FVQTRELEdBQUF3QixNQUFBLE1BQUEsUUFBQSxTQUFBekUsRUFBQStHLEdBQ0E5RCxHQUFBZ1AsU0FBQWxMLEdBQUE2SCxFQUFBbkIsR0FBQXFxQixjQUNBLFNBQUExMEIsRUFBQWlMLEdBQ0EsR0FBQUEsRUFJQSxPQUhBQSxFQUFBRCxFQUFBaEwsRUFBQTJELEdBR0EySCxHQUFBekssS0FBQW9LLEdBQ0FwTCxHQUFBRyxHQUFBaEQsV0FBQTJHLEdBQUEsS0FDQXNILE1BUUFwTCxHQUFBd0IsTUFBQTBqQyxPQUFBLFNBQUFDLE1BQUEsU0FBQSxTQUFBL2tDLEVBQUFMLEdBQ0FDLEdBQUF3QixNQUFBaTFCLFFBQUEsUUFBQXIyQixFQUFBdUksUUFBQTVJLEVBQUFxbEMsR0FBQSxRQUFBaGxDLEdBQ0EsU0FBQWlsQyxFQUFBQyxHQUdBdGxDLEdBQUFtSSxHQUFBbTlCLEdBQUEsU0FBQTlPLEVBQUExOEIsR0FDQSxJQUFBZ3hCLEVBQUF2aUIsVUFBQW5NLFNBQUFpcEMsR0FBQSxrQkFBQTdPLEdBQ0E3cEIsRUFBQTA0QixLQUFBLElBQUE3TyxJQUFBLElBQUExOEIsRUFBQSxTQUFBLFVBRUEsT0FBQTJQLEdBQUEzTyxLQUFBLFNBQUFxRixFQUFBSixFQUFBakcsR0FDQSxJQUFBdUYsRUFFQSxPQUFBVyxHQUFBQyxTQUFBRSxHQUdBLElBQUFtbEMsRUFBQXhrQyxRQUFBLFNBQ0FYLEVBQUEsUUFBQUMsR0FDQUQsRUFBQXpHLFNBQUErbUIsZ0JBQUEsU0FBQXJnQixHQUlBLElBQUFELEVBQUFVLFVBQ0F4QixFQUFBYyxFQUFBc2dCLGdCQUlBalUsS0FBQUMsSUFDQXRNLEVBQUFnRixLQUFBLFNBQUEvRSxHQUFBZixFQUFBLFNBQUFlLEdBQ0FELEVBQUFnRixLQUFBLFNBQUEvRSxHQUFBZixFQUFBLFNBQUFlLEdBQ0FmLEVBQUEsU0FBQWUsVUFJQXVDLElBQUE3SSxFQUdBa0csR0FBQXBDLElBQUF1QyxFQUFBSixFQUFBNE0sR0FHQTNNLEdBQUEyRSxNQUFBeEUsRUFBQUosRUFBQWpHLEVBQUE2UyxJQUNBNU0sRUFBQStxQixFQUFBMEwsT0FBQTd6QixFQUFBbW9CLFFBTUE5cUIsR0FBQW1JLEdBQUF3QixRQUVBNDdCLEtBQUEsU0FBQXQ5QixFQUFBbE4sRUFBQW9OLEdBQ0EsT0FBQXJOLEtBQUFuQixHQUFBc08sRUFBQSxLQUFBbE4sRUFBQW9OLElBRUFxOUIsT0FBQSxTQUFBdjlCLEVBQUFFLEdBQ0EsT0FBQXJOLEtBQUF3TixJQUFBTCxFQUFBLEtBQUFFLElBR0FzOUIsU0FBQSxTQUFBdjlCLEVBQUFELEVBQUFsTixFQUFBb04sR0FDQSxPQUFBck4sS0FBQW5CLEdBQUFzTyxFQUFBQyxFQUFBbk4sRUFBQW9OLElBRUF1OUIsV0FBQSxTQUFBeDlCLEVBQUFELEVBQUFFLEdBR0EsT0FBQSxJQUFBSSxVQUFBbk0sT0FDQXRCLEtBQUF3TixJQUFBSixFQUFBLE1BQ0FwTixLQUFBd04sSUFBQUwsRUFBQUMsR0FBQSxLQUFBQyxNQUlBbkksR0FBQTJsQyxVQUFBLFNBQUFDLEdBQ0FBLEVBQ0E1bEMsR0FBQTBxQixZQUVBMXFCLEdBQUErQyxPQUFBLElBR0EvQyxHQUFBMUQsUUFBQUQsTUFBQUMsUUFDQTBELEdBQUE2bEMsVUFBQTNyQyxLQUFBQyxNQUNBNkYsR0FBQUUsU0FBQUEsRUFrQkEsbUJBQUE0bEMsUUFBQUEsT0FBQUMsS0FDQUQsT0FBQSxZQUFBLFdBQ0EsT0FBQTlsQyxLQU9BLElBR0FnbUMsR0FBQS9tQyxFQUFBZSxPQUdBaW1DLEdBQUFobkMsRUFBQXhGLEVBd0JBLE9BdEJBdUcsR0FBQWttQyxXQUFBLFNBQUExekIsR0FTQSxPQVJBdlQsRUFBQXhGLElBQUF1RyxLQUNBZixFQUFBeEYsRUFBQXdzQyxJQUdBenpCLEdBQUF2VCxFQUFBZSxTQUFBQSxLQUNBZixFQUFBZSxPQUFBZ21DLElBR0FobUMsSUFNQWQsSUFDQUQsRUFBQWUsT0FBQWYsRUFBQXhGLEVBQUF1RyxJQU1BQSxLQ2ovVEEsU0FBQTBrQixFQUFBOWxCLEdBQ0EsaUJBQUFFLFNBQUEsaUJBQUFELE9BQ0FBLE9BQUFDLFFBQUFGLElBQ0EsbUJBQUFrbkMsUUFBQUEsT0FBQUMsSUFDQUQsVUFBQWxuQyxHQUNBLGlCQUFBRSxRQUNBQSxRQUFBLFdBQUFGLElBRUE4bEIsRUFBQSxXQUFBOWxCLEtBQ0E5RCxLQUFBLFdBQ0EsT0FBQSxTQUFBcXJDLEdBS0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE9BQUFDLEVBQUFELEdBQUF2bkMsUUFHQSxJQUFBRCxFQUFBeW5DLEVBQUFELElBQ0F2bkMsV0FDQWxFLEdBQUF5ckMsRUFDQUUsUUFBQSxHQVVBLE9BTkFKLEVBQUFFLEdBQUF6bEMsS0FBQS9CLEVBQUFDLFFBQUFELEVBQUFBLEVBQUFDLFFBQUFzbkMsR0FHQXZuQyxFQUFBMG5DLFFBQUEsRUFHQTFuQyxFQUFBQyxRQXZCQSxJQUFBd25DLEtBcUNBLE9BVEFGLEVBQUFqdkIsRUFBQWd2QixFQUdBQyxFQUFBSSxFQUFBRixFQUdBRixFQUFBL08sRUFBQSxHQUdBK08sRUFBQSxLQUtBLFNBQUF2bkMsRUFBQUMsRUFBQXNuQyxHQUVBLGFBaUNBLFNBQUFLLElBQ0EsSUFBQUMsRUFBQUMsSUFlQSxPQWJBRCxFQUFBL3FDLFFBQUEsU0FBQTJsQixFQUFBaGdCLEdBQ0EsT0FBQXNsQyxFQUFBanJDLFFBQUEybEIsRUFBQWhnQixFQUFBb2xDLElBRUFBLEVBQUFHLFdBQUEsU0FBQXZsQixFQUFBaGdCLEdBQ0EsT0FBQXNsQyxFQUFBQyxXQUFBdmxCLEVBQUFoZ0IsRUFBQW9sQyxJQUdBQSxFQUFBSSxJQUFBQyxFQUFBLFFBQ0FMLEVBQUFNLFNBQUFKLEVBQUFJLFNBQ0FOLEVBQUFPLG1CQUFBQyxFQUFBLFFBQ0FSLEVBQUFTLE9BQUFDLEVBQUFDLE9BQ0FYLEVBQUF2c0MsTUFBQWl0QyxFQUFBanRDLE1BRUF1c0MsRUEvQ0EsSUFBQVksRUFBQWxCLEVBQUEsR0FBQSxRQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUVBLElBRUFDLEVBQUFGLEVBRkFsQixFQUFBLElBUUFXLEVBQUFPLEVBRkFsQixFQUFBLEtBSUFnQixFQUFBaEIsRUFBQSxJQUVBUSxFQUFBUixFQUFBLElBSUFjLEVBQUFJLEVBRkFsQixFQUFBLEtBTUFxQixFQUFBSCxFQUZBbEIsRUFBQSxLQU1Bc0IsRUFBQUosRUFGQWxCLEVBQUEsS0FJQU8sRUFBQWEsRUFBQSxRQUFBZixPQW9CQWtCLEVBQUFsQixJQUNBa0IsRUFBQWxCLE9BQUFBLEVBRUFpQixFQUFBLFFBQUFDLEdBRUFBLEVBQUFDLFFBQUFILEVBQUEsUUFFQUUsRUFBQSxRQUFBQSxFQUVBN29DLEVBQUEsUUFBQTZvQyxFQUNBOW9DLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxHQUVBLGFBRUFBLEVBQUEsUUFBQSxTQUFBZ0IsR0FDQSxPQUFBQSxHQUFBQSxFQUFBeW5DLFdBQUF6bkMsR0FDQStuQyxRQUFBL25DLElBSUFoQixFQUFBeW9DLFlBQUEsR0FJQSxTQUFBMW9DLEVBQUFDLEVBQUFzbkMsR0FFQSxhQW9DQSxTQUFBSyxJQUNBLElBQUFDLEVBQUEsSUFBQW5zQixFQUFBdXRCLHNCQWFBLE9BWEFDLEVBQUFwK0IsT0FBQSs4QixFQUFBbnNCLEdBQ0Ftc0IsRUFBQXNCLFdBQUFDLEVBQUEsUUFDQXZCLEVBQUF3QixVQUFBQyxFQUFBLFFBQ0F6QixFQUFBcUIsTUFBQUEsRUFDQXJCLEVBQUEwQixpQkFBQUwsRUFBQUssaUJBRUExQixFQUFBMkIsR0FBQUMsRUFDQTVCLEVBQUE2QixTQUFBLFNBQUFDLEdBQ0EsT0FBQUYsRUFBQUMsU0FBQUMsRUFBQTlCLElBR0FBLEVBaERBLElBQUErQixFQUFBckMsRUFBQSxHQUFBLFFBRUFrQixFQUFBbEIsRUFBQSxHQUFBLFFBRUF0bkMsRUFBQXlvQyxZQUFBLEVBRUEsSUFFQWh0QixFQUFBa3VCLEVBRkFyQyxFQUFBLElBU0E2QixFQUFBWCxFQUZBbEIsRUFBQSxLQU1BK0IsRUFBQWIsRUFGQWxCLEVBQUEsSUFNQTJCLEVBQUFVLEVBRkFyQyxFQUFBLElBTUFrQyxFQUFBRyxFQUZBckMsRUFBQSxLQU1Bc0IsRUFBQUosRUFGQWxCLEVBQUEsS0FzQkF1QixFQUFBbEIsSUFDQWtCLEVBQUFsQixPQUFBQSxFQUVBaUIsRUFBQSxRQUFBQyxHQUVBQSxFQUFBLFFBQUFBLEVBRUE3b0MsRUFBQSxRQUFBNm9DLEVBQ0E5b0MsRUFBQUMsUUFBQUEsRUFBQSxTQUlBLFNBQUFELEVBQUFDLEdBRUEsYUFFQUEsRUFBQSxRQUFBLFNBQUFnQixHQUNBLEdBQUFBLEdBQUFBLEVBQUF5bkMsV0FDQSxPQUFBem5DLEVBRUEsSUFBQTRvQyxLQUVBLEdBQUEsTUFBQTVvQyxFQUNBLElBQUEsSUFBQXdELEtBQUF4RCxFQUNBcVUsT0FBQTlHLFVBQUFtSCxlQUFBNVQsS0FBQWQsRUFBQXdELEtBQUFvbEMsRUFBQXBsQyxHQUFBeEQsRUFBQXdELElBS0EsT0FEQW9sQyxFQUFBLFFBQUE1b0MsRUFDQTRvQyxHQUlBNXBDLEVBQUF5b0MsWUFBQSxHQUlBLFNBQUExb0MsRUFBQUMsRUFBQXNuQyxHQUVBLGFBdUNBLFNBQUEwQixFQUFBYSxFQUFBQyxFQUFBQyxHQUNBL3RDLEtBQUE2dEMsUUFBQUEsTUFDQTd0QyxLQUFBOHRDLFNBQUFBLE1BQ0E5dEMsS0FBQSt0QyxXQUFBQSxNQUVBQyxFQUFBQyx1QkFBQWp1QyxNQUNBa3VDLEVBQUFDLDBCQUFBbnVDLE1BM0NBLElBQUF3c0MsRUFBQWxCLEVBQUEsR0FBQSxRQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUNBem9DLEVBQUFncEMsc0JBQUFBLEVBRUEsSUFBQW9CLEVBQUE5QyxFQUFBLEdBSUErQyxFQUFBN0IsRUFGQWxCLEVBQUEsSUFJQTBDLEVBQUExQyxFQUFBLElBRUE0QyxFQUFBNUMsRUFBQSxJQUlBZ0QsRUFBQTlCLEVBRkFsQixFQUFBLEtBS0F0bkMsRUFBQXVxQyxRQURBLFNBSUF2cUMsRUFBQXdxQyxrQkFGQSxFQUdBLElBQUFDLEdBQ0FDLEVBQUEsY0FDQUMsRUFBQSxnQkFDQUMsRUFBQSxnQkFDQUMsRUFBQSxXQUNBQyxFQUFBLG1CQUNBQyxFQUFBLGtCQUNBQyxFQUFBLFlBR0FockMsRUFBQXlxQyxpQkFBQUEsRUFZQXpCLEVBQUF6NkIsV0FDQTZILFlBQUE0eUIsRUFFQWlDLE9BQUFYLEVBQUEsUUFDQTl0QyxJQUFBOHRDLEVBQUEsUUFBQTl0QyxJQUVBVSxlQUFBLFNBQUFvRSxFQUFBK0gsR0FDQSxHQWxCQSxvQkFrQkErZ0MsRUFBQTUwQixTQUFBMVQsS0FBQVIsR0FBQSxDQUNBLEdBQUErSCxFQUNBLE1BQUEsSUFBQWdoQyxFQUFBLFFBQUEsMkNBRUFELEVBQUF2L0IsT0FBQTdPLEtBQUE2dEMsUUFBQXZvQyxRQUVBdEYsS0FBQTZ0QyxRQUFBdm9DLEdBQUErSCxHQUdBNmhDLGlCQUFBLFNBQUE1cEMsVUFDQXRGLEtBQUE2dEMsUUFBQXZvQyxJQUdBNnBDLGdCQUFBLFNBQUE3cEMsRUFBQThwQyxHQUNBLEdBaENBLG9CQWdDQWhCLEVBQUE1MEIsU0FBQTFULEtBQUFSLEdBQ0E4b0MsRUFBQXYvQixPQUFBN08sS0FBQTh0QyxTQUFBeG9DLE9BQ0EsQ0FDQSxRQUFBLElBQUE4cEMsRUFDQSxNQUFBLElBQUFmLEVBQUEsUUFBQSw0Q0FBQS9vQyxFQUFBLGtCQUVBdEYsS0FBQTh0QyxTQUFBeG9DLEdBQUE4cEMsSUFHQUMsa0JBQUEsU0FBQS9wQyxVQUNBdEYsS0FBQTh0QyxTQUFBeG9DLElBR0FncUMsa0JBQUEsU0FBQWhxQyxFQUFBK0gsR0FDQSxHQTlDQSxvQkE4Q0ErZ0MsRUFBQTUwQixTQUFBMVQsS0FBQVIsR0FBQSxDQUNBLEdBQUErSCxFQUNBLE1BQUEsSUFBQWdoQyxFQUFBLFFBQUEsOENBRUFELEVBQUF2L0IsT0FBQTdPLEtBQUErdEMsV0FBQXpvQyxRQUVBdEYsS0FBQSt0QyxXQUFBem9DLEdBQUErSCxHQUdBa2lDLG9CQUFBLFNBQUFqcUMsVUFDQXRGLEtBQUErdEMsV0FBQXpvQyxLQUlBLElBQUE5RSxFQUFBOHRDLEVBQUEsUUFBQTl0QyxJQUVBd0QsRUFBQXhELElBQUFBLEVBQ0F3RCxFQUFBd3JDLFlBQUFwQixFQUFBb0IsWUFDQXhyQyxFQUFBaXJDLE9BQUFYLEVBQUEsU0FJQSxTQUFBdnFDLEVBQUFDLEdBRUEsYUF1QkEsU0FBQXlyQyxFQUFBQyxHQUNBLE9BQUFob0IsRUFBQWdvQixHQUdBLFNBQUE3Z0MsRUFBQTdKLEdBQ0EsSUFBQSxJQUFBL0MsRUFBQSxFQUFBQSxFQUFBd0wsVUFBQW5NLE9BQUFXLElBQ0EsSUFBQSxJQUFBdUcsS0FBQWlGLFVBQUF4TCxHQUNBb1gsT0FBQTlHLFVBQUFtSCxlQUFBNVQsS0FBQTJILFVBQUF4TCxHQUFBdUcsS0FDQXhELEVBQUF3RCxHQUFBaUYsVUFBQXhMLEdBQUF1RyxJQUtBLE9BQUF4RCxFQWxDQWhCLEVBQUF5b0MsWUFBQSxFQUNBem9DLEVBQUE2SyxPQUFBQSxFQUNBN0ssRUFBQWdDLFFBK0RBLFNBQUEzRSxFQUFBckMsR0FDQSxJQUFBLElBQUFpRCxFQUFBLEVBQUF3WSxFQUFBcFosRUFBQUMsT0FBQVcsRUFBQXdZLEVBQUF4WSxJQUNBLEdBQUFaLEVBQUFZLEtBQUFqRCxFQUNBLE9BQUFpRCxFQUdBLE9BQUEsR0FwRUErQixFQUFBc3BDLGlCQXVFQSxTQUFBOXhCLEdBQ0EsR0FBQSxpQkFBQUEsRUFBQSxDQUVBLEdBQUFBLEdBQUFBLEVBQUFtMEIsT0FDQSxPQUFBbjBCLEVBQUFtMEIsU0FDQSxHQUFBLE1BQUFuMEIsRUFDQSxNQUFBLEdBQ0EsSUFBQUEsRUFDQSxPQUFBQSxFQUFBLEdBTUFBLEVBQUEsR0FBQUEsRUFHQSxPQUFBbzBCLEVBQUExcEMsS0FBQXNWLEdBR0FBLEVBQUEvUyxRQUFBb25DLEVBQUFKLEdBRkFqMEIsR0F4RkF4WCxFQUFBOHJDLFFBNkZBLFNBQUE5d0MsR0FDQSxPQUFBQSxHQUFBLElBQUFBLE1BRUF3QyxFQUFBeEMsSUFBQSxJQUFBQSxFQUFBc0MsU0EvRkEwQyxFQUFBd3JDLFlBc0dBLFNBQUEvb0MsR0FDQSxJQUFBc3BDLEVBQUFsaEMsS0FBQXBJLEdBRUEsT0FEQXNwQyxFQUFBQyxRQUFBdnBDLEVBQ0FzcEMsR0F4R0EvckMsRUFBQWlzQyxZQTJHQSxTQUFBakgsRUFBQWtILEdBRUEsT0FEQWxILEVBQUFtSCxLQUFBRCxFQUNBbEgsR0E1R0FobEMsRUFBQW9zQyxrQkErR0EsU0FBQUMsRUFBQXZ3QyxHQUNBLE9BQUF1d0MsRUFBQUEsRUFBQSxJQUFBLElBQUF2d0MsR0EvR0EsSUFBQTRuQixHQUNBNG9CLElBQUEsUUFDQUMsSUFBQSxPQUNBcm9CLElBQUEsT0FDQXNvQixJQUFBLFNBQ0FDLElBQUEsU0FDQUMsSUFBQSxTQUNBQyxJQUFBLFVBR0FkLEVBQUEsYUFDQUQsRUFBQSxZQWtCQXAyQixFQUFBSCxPQUFBOUcsVUFBQWlILFNBRUF4VixFQUFBd1YsU0FBQUEsRUFJQSxJQUFBNVQsRUFBQSxTQUFBNUcsR0FDQSxNQUFBLG1CQUFBQSxHQUlBNEcsRUFBQSxPQUNBNUIsRUFBQTRCLFdBQUFBLEVBQUEsU0FBQTVHLEdBQ0EsTUFBQSxtQkFBQUEsR0FBQSxzQkFBQXdhLEVBQUExVCxLQUFBOUcsS0FHQWdGLEVBQUE0QixXQUFBQSxFQUtBLElBQUFwRSxFQUFBRCxNQUFBQyxTQUFBLFNBQUF4QyxHQUNBLFNBQUFBLEdBQUEsaUJBQUFBLElBQUEsbUJBQUF3YSxFQUFBMVQsS0FBQTlHLElBR0FnRixFQUFBeEMsUUFBQUEsR0E4REEsU0FBQXVDLEVBQUFDLEVBQUFzbkMsR0FFQSxhQVFBLFNBQUE4QixFQUFBM2QsRUFBQWpnQixHQUNBLElBQUFvaEMsRUFBQXBoQyxHQUFBQSxFQUFBb2hDLElBQ0FDLE9BQUFocEMsRUFDQWlwQyxPQUFBanBDLEVBQ0Erb0MsSUFJQW5oQixHQUFBLE9BSEFvaEIsRUFBQUQsRUFBQTltQyxNQUFBK21DLE1BR0EsS0FGQUMsRUFBQUYsRUFBQTltQyxNQUFBZ25DLFNBUUEsSUFBQSxJQUhBcGxDLEVBQUF4SCxNQUFBcU8sVUFBQTZILFlBQUF0VSxLQUFBOUYsS0FBQXl2QixHQUdBckcsRUFBQSxFQUFBQSxFQUFBMm5CLEVBQUF6dkMsT0FBQThuQixJQUNBcHBCLEtBQUErd0MsRUFBQTNuQixJQUFBMWQsRUFBQXFsQyxFQUFBM25CLElBSUFsbEIsTUFBQThzQyxtQkFDQTlzQyxNQUFBOHNDLGtCQUFBaHhDLEtBQUFvdEMsR0FHQSxJQUNBd0QsSUFDQTV3QyxLQUFBaXhDLFdBQUFKLEVBSUFLLEVBQ0E3M0IsT0FBQWlYLGVBQUF0d0IsS0FBQSxVQUNBaEIsTUFBQTh4QyxFQUNBbmMsWUFBQSxJQUdBMzBCLEtBQUE4d0MsT0FBQUEsR0FHQSxNQUFBSyxLQTVDQSxJQUFBRCxFQUFBNUYsRUFBQSxHQUFBLFFBRUF0bkMsRUFBQXlvQyxZQUFBLEVBRUEsSUFBQXNFLEdBQUEsY0FBQSxXQUFBLGFBQUEsVUFBQSxPQUFBLFNBQUEsU0E2Q0EzRCxFQUFBNzZCLFVBQUEsSUFBQXJPLE1BRUFGLEVBQUEsUUFBQW9wQyxFQUNBcnBDLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxFQUFBc25DLEdBRUF2bkMsRUFBQUMsU0FBQStvQyxRQUFBekIsRUFBQSxHQUFBbUIsWUFBQSxJQUlBLFNBQUExb0MsRUFBQUMsRUFBQXNuQyxHQUVBLElBQUEzc0MsRUFBQTJzQyxFQUFBLEdBQ0F2bkMsRUFBQUMsUUFBQSxTQUFBb3RDLEVBQUE1b0MsRUFBQTZvQyxHQUNBLE9BQUExeUMsRUFBQTJ5QyxRQUFBRixFQUFBNW9DLEVBQUE2b0MsS0FLQSxTQUFBdHRDLEVBQUFDLEdBRUEsSUFBQXV0QyxFQUFBbDRCLE9BQ0F0VixFQUFBQyxTQUNBMm5DLE9BQUE0RixFQUFBNUYsT0FDQXZ5QixTQUFBbTRCLEVBQUFqNEIsZUFDQWs0QixVQUFBQyxxQkFDQUMsUUFBQUgsRUFBQUkseUJBQ0FMLFFBQUFDLEVBQUFqaEIsZUFDQXNoQixTQUFBTCxFQUFBTSxpQkFDQUMsUUFBQVAsRUFBQXp6QixLQUNBaTBCLFNBQUFSLEVBQUFTLG9CQUNBQyxXQUFBVixFQUFBVyxzQkFDQXhyQyxRQUFBakYsVUFLQSxTQUFBc0MsRUFBQUMsRUFBQXNuQyxHQUVBLGFBRUEsSUFBQWtCLEVBQUFsQixFQUFBLEdBQUEsUUFFQXRuQyxFQUFBeW9DLFlBQUEsRUFDQXpvQyxFQUFBaXFDLHVCQThCQSxTQUFBa0UsR0FDQUMsRUFBQSxRQUFBRCxHQUNBRSxFQUFBLFFBQUFGLEdBQ0FHLEVBQUEsUUFBQUgsR0FDQUksRUFBQSxRQUFBSixHQUNBSyxFQUFBLFFBQUFMLEdBQ0FNLEVBQUEsUUFBQU4sR0FDQU8sRUFBQSxRQUFBUCxJQW5DQSxJQUVBQyxFQUFBNUYsRUFGQWxCLEVBQUEsS0FNQStHLEVBQUE3RixFQUZBbEIsRUFBQSxLQU1BZ0gsRUFBQTlGLEVBRkFsQixFQUFBLEtBTUFpSCxFQUFBL0YsRUFGQWxCLEVBQUEsS0FNQWtILEVBQUFoRyxFQUZBbEIsRUFBQSxLQU1BbUgsRUFBQWpHLEVBRkFsQixFQUFBLEtBTUFvSCxFQUFBbEcsRUFGQWxCLEVBQUEsTUFnQkEsU0FBQXZuQyxFQUFBQyxFQUFBc25DLEdBRUEsYUFFQXRuQyxFQUFBeW9DLFlBQUEsRUFFQSxJQUFBMkIsRUFBQTlDLEVBQUEsR0FFQXRuQyxFQUFBLFFBQUEsU0FBQW11QyxHQUNBQSxFQUFBanhDLGVBQUEscUJBQUEsU0FBQUMsRUFBQXFGLEdBQ0EsSUFBQW1zQyxFQUFBbnNDLEVBQUFtc0MsUUFDQXRsQyxFQUFBN0csRUFBQTZHLEdBRUEsSUFBQSxJQUFBbE0sRUFDQSxPQUFBa00sRUFBQXJOLE1BQ0EsSUFBQSxJQUFBbUIsR0FBQSxNQUFBQSxFQUNBLE9BQUF3eEMsRUFBQTN5QyxNQUNBLEdBQUFvdUMsRUFBQTVzQyxRQUFBTCxHQUNBLE9BQUFBLEVBQUFHLE9BQUEsR0FDQWtGLEVBQUEwcEMsTUFDQTFwQyxFQUFBMHBDLEtBQUExcEMsRUFBQWxCLE9BR0E2c0MsRUFBQXRFLFFBQUFubkMsS0FBQXZGLEVBQUFxRixJQUVBbXNDLEVBQUEzeUMsTUFHQSxHQUFBd0csRUFBQXZHLE1BQUF1RyxFQUFBMHBDLElBQUEsQ0FDQSxJQUFBandDLEVBQUFtdUMsRUFBQW9CLFlBQUFocEMsRUFBQXZHLE1BQ0FBLEVBQUFvd0MsWUFBQWpDLEVBQUFnQyxrQkFBQTVwQyxFQUFBdkcsS0FBQW93QyxZQUFBN3BDLEVBQUFsQixNQUNBa0IsR0FBQXZHLEtBQUFBLEdBR0EsT0FBQW9OLEVBQUFsTSxFQUFBcUYsTUFLQXpDLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxFQUFBc25DLEdBRUEsYUFFQSxJQUFBa0IsRUFBQWxCLEVBQUEsR0FBQSxRQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUVBLElBQUEyQixFQUFBOUMsRUFBQSxHQUlBK0MsRUFBQTdCLEVBRkFsQixFQUFBLElBSUF0bkMsRUFBQSxRQUFBLFNBQUFtdUMsR0FDQUEsRUFBQWp4QyxlQUFBLE9BQUEsU0FBQUMsRUFBQXFGLEdBd0JBLFNBQUFvc0MsRUFBQUMsRUFBQWx4QyxFQUFBMkIsR0FDQXJELElBQ0FBLEVBQUF1SSxJQUFBcXFDLEVBQ0E1eUMsRUFBQTBCLE1BQUFBLEVBQ0ExQixFQUFBa0QsTUFBQSxJQUFBeEIsRUFDQTFCLEVBQUFxRCxPQUFBQSxFQUVBK3NDLElBQ0Fwd0MsRUFBQW93QyxZQUFBQSxFQUFBd0MsSUFJQS9uQyxHQUFBdUMsRUFBQWxNLEVBQUEweEMsSUFDQTV5QyxLQUFBQSxFQUNBZ3dDLFlBQUE3QixFQUFBNkIsYUFBQTl1QyxFQUFBMHhDLEdBQUFBLElBQUF4QyxFQUFBd0MsRUFBQSxTQXJDQSxJQUFBcnNDLEVBQ0EsTUFBQSxJQUFBNm5DLEVBQUEsUUFBQSwrQkFHQSxJQUFBaGhDLEVBQUE3RyxFQUFBNkcsR0FDQXNsQyxFQUFBbnNDLEVBQUFtc0MsUUFDQTF3QyxFQUFBLEVBQ0E2SSxFQUFBLEdBQ0E3SyxPQUFBNEgsRUFDQXdvQyxPQUFBeG9DLEVBZ0NBLEdBOUJBckIsRUFBQXZHLE1BQUF1RyxFQUFBMHBDLE1BQ0FHLEVBQUFqQyxFQUFBZ0Msa0JBQUE1cEMsRUFBQXZHLEtBQUFvd0MsWUFBQTdwQyxFQUFBMHBDLElBQUEsSUFBQSxLQUdBOUIsRUFBQXhvQyxXQUFBekUsS0FDQUEsRUFBQUEsRUFBQTJFLEtBQUE5RixPQUdBd0csRUFBQXZHLE9BQ0FBLEVBQUFtdUMsRUFBQW9CLFlBQUFocEMsRUFBQXZHLE9BcUJBa0IsR0FBQSxpQkFBQUEsRUFDQSxHQUFBaXRDLEVBQUE1c0MsUUFBQUwsR0FDQSxJQUFBLElBQUEwSyxFQUFBMUssRUFBQUcsT0FBQVcsRUFBQTRKLEVBQUE1SixJQUNBQSxLQUFBZCxHQUNBeXhDLEVBQUEzd0MsRUFBQUEsRUFBQUEsSUFBQWQsRUFBQUcsT0FBQSxPQUdBLENBQ0EsSUFBQXd4QyxPQUFBanJDLEVBRUEsSUFBQSxJQUFBVyxLQUFBckgsRUFDQUEsRUFBQXVZLGVBQUFsUixVQUlBWCxJQUFBaXJDLEdBQ0FGLEVBQUFFLEVBQUE3d0MsRUFBQSxHQUVBNndDLEVBQUF0cUMsRUFDQXZHLFVBR0E0RixJQUFBaXJDLEdBQ0FGLEVBQUFFLEVBQUE3d0MsRUFBQSxHQUFBLEdBU0EsT0FKQSxJQUFBQSxJQUNBNkksRUFBQTZuQyxFQUFBM3lDLE9BR0E4SyxLQUlBL0csRUFBQUMsUUFBQUEsRUFBQSxTQUlBLFNBQUFELEVBQUFDLEVBQUFzbkMsR0FFQSxhQUVBLElBQUFrQixFQUFBbEIsRUFBQSxHQUFBLFFBRUF0bkMsRUFBQXlvQyxZQUFBLEVBRUEsSUFFQTRCLEVBQUE3QixFQUZBbEIsRUFBQSxJQUlBdG5DLEVBQUEsUUFBQSxTQUFBbXVDLEdBQ0FBLEVBQUFqeEMsZUFBQSxnQkFBQSxXQUNBLEdBQUEsSUFBQXVNLFVBQUFuTSxPQUtBLE1BQUEsSUFBQStzQyxFQUFBLFFBQUEsb0JBQUE1Z0MsVUFBQUEsVUFBQW5NLE9BQUEsR0FBQWdFLEtBQUEsUUFLQXZCLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxFQUFBc25DLEdBRUEsYUFFQXRuQyxFQUFBeW9DLFlBQUEsRUFFQSxJQUFBMkIsRUFBQTlDLEVBQUEsR0FFQXRuQyxFQUFBLFFBQUEsU0FBQW11QyxHQUNBQSxFQUFBanhDLGVBQUEsS0FBQSxTQUFBNnhDLEVBQUF2c0MsR0FRQSxPQVBBNG5DLEVBQUF4b0MsV0FBQW10QyxLQUNBQSxFQUFBQSxFQUFBanRDLEtBQUE5RixRQU1Bd0csRUFBQWtqQixLQUFBc3BCLGNBQUFELEdBQUEzRSxFQUFBMEIsUUFBQWlELEdBQ0F2c0MsRUFBQW1zQyxRQUFBM3lDLE1BRUF3RyxFQUFBNkcsR0FBQXJOLFFBSUFteUMsRUFBQWp4QyxlQUFBLFNBQUEsU0FBQTZ4QyxFQUFBdnNDLEdBQ0EsT0FBQTJyQyxFQUFBdEUsUUFBQSxHQUFBL25DLEtBQUE5RixLQUFBK3lDLEdBQUExbEMsR0FBQTdHLEVBQUFtc0MsUUFBQUEsUUFBQW5zQyxFQUFBNkcsR0FBQXFjLEtBQUFsakIsRUFBQWtqQixVQUlBM2xCLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxHQUVBLGFBRUFBLEVBQUF5b0MsWUFBQSxFQUVBem9DLEVBQUEsUUFBQSxTQUFBbXVDLEdBQ0FBLEVBQUFqeEMsZUFBQSxNQUFBLFdBR0EsSUFBQSxJQUZBa08sUUFBQXZILEdBQ0FyQixFQUFBaUgsVUFBQUEsVUFBQW5NLE9BQUEsR0FDQVcsRUFBQSxFQUFBQSxFQUFBd0wsVUFBQW5NLE9BQUEsRUFBQVcsSUFDQW1OLEVBQUF4TixLQUFBNkwsVUFBQXhMLElBR0EsSUFBQWd4QyxFQUFBLEVBQ0EsTUFBQXpzQyxFQUFBa2pCLEtBQUF1cEIsTUFDQUEsRUFBQXpzQyxFQUFBa2pCLEtBQUF1cEIsTUFDQXpzQyxFQUFBdkcsTUFBQSxNQUFBdUcsRUFBQXZHLEtBQUFnekMsUUFDQUEsRUFBQXpzQyxFQUFBdkcsS0FBQWd6QyxPQUVBN2pDLEVBQUEsR0FBQTZqQyxFQUVBZCxFQUFBM3hDLElBQUFvSCxNQUFBdXFDLEVBQUEvaUMsTUFJQXJMLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxHQUVBLGFBRUFBLEVBQUF5b0MsWUFBQSxFQUVBem9DLEVBQUEsUUFBQSxTQUFBbXVDLEdBQ0FBLEVBQUFqeEMsZUFBQSxTQUFBLFNBQUE4RCxFQUFBNnRDLEdBQ0EsT0FBQTd0QyxHQUFBQSxFQUFBNnRDLE1BSUE5dUMsRUFBQUMsUUFBQUEsRUFBQSxTQUlBLFNBQUFELEVBQUFDLEVBQUFzbkMsR0FFQSxhQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUVBLElBQUEyQixFQUFBOUMsRUFBQSxHQUVBdG5DLEVBQUEsUUFBQSxTQUFBbXVDLEdBQ0FBLEVBQUFqeEMsZUFBQSxPQUFBLFNBQUFDLEVBQUFxRixHQUNBNG5DLEVBQUF4b0MsV0FBQXpFLEtBQ0FBLEVBQUFBLEVBQUEyRSxLQUFBOUYsT0FHQSxJQUFBcU4sRUFBQTdHLEVBQUE2RyxHQUVBLEdBQUErZ0MsRUFBQTBCLFFBQUEzdUMsR0FZQSxPQUFBcUYsRUFBQW1zQyxRQUFBM3lDLE1BWEEsSUFBQUMsRUFBQXVHLEVBQUF2RyxLQU1BLE9BTEF1RyxFQUFBdkcsTUFBQXVHLEVBQUEwcEMsT0FDQWp3QyxFQUFBbXVDLEVBQUFvQixZQUFBaHBDLEVBQUF2RyxPQUNBb3dDLFlBQUFqQyxFQUFBZ0Msa0JBQUE1cEMsRUFBQXZHLEtBQUFvd0MsWUFBQTdwQyxFQUFBMHBDLElBQUEsS0FHQTdpQyxFQUFBbE0sR0FDQWxCLEtBQUFBLEVBQ0Fnd0MsWUFBQTdCLEVBQUE2QixhQUFBOXVDLElBQUFsQixHQUFBQSxFQUFBb3dDLG1CQVFBdHNDLEVBQUFDLFFBQUFBLEVBQUEsU0FJQSxTQUFBRCxFQUFBQyxFQUFBc25DLEdBRUEsYUFFQSxJQUFBa0IsRUFBQWxCLEVBQUEsR0FBQSxRQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUNBem9DLEVBQUFtcUMsMEJBTUEsU0FBQWdFLEdBQ0FlLEVBQUEsUUFBQWYsSUFMQSxJQUVBZSxFQUFBMUcsRUFGQWxCLEVBQUEsTUFVQSxTQUFBdm5DLEVBQUFDLEVBQUFzbkMsR0FFQSxhQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUVBLElBQUEyQixFQUFBOUMsRUFBQSxHQUVBdG5DLEVBQUEsUUFBQSxTQUFBbXVDLEdBQ0FBLEVBQUE3QyxrQkFBQSxTQUFBLFNBQUFqaUMsRUFBQXlHLEVBQUF1bEIsRUFBQTd5QixHQUNBLElBQUFzRSxFQUFBdUMsRUFlQSxPQWRBeUcsRUFBQWc2QixXQUNBaDZCLEVBQUFnNkIsWUFDQWhqQyxFQUFBLFNBQUEzSixFQUFBcUYsR0FFQSxJQUFBdXlCLEVBQUFNLEVBQUF5VSxTQUNBelUsRUFBQXlVLFNBQUFNLEVBQUF2L0IsVUFBQWtxQixFQUFBamxCLEVBQUFnNkIsVUFDQSxJQUFBaGpDLEVBQUF1QyxFQUFBbE0sRUFBQXFGLEdBRUEsT0FEQTZ5QixFQUFBeVUsU0FBQS9VLEVBQ0FqdUIsSUFJQWdKLEVBQUFnNkIsU0FBQXRuQyxFQUFBNEksS0FBQSxJQUFBNUksRUFBQTZHLEdBRUF2QyxLQUlBL0csRUFBQUMsUUFBQUEsRUFBQSxTQUlBLFNBQUFELEVBQUFDLEVBQUFzbkMsR0FFQSxhQUVBdG5DLEVBQUF5b0MsWUFBQSxFQUVBLElBQUEyQixFQUFBOUMsRUFBQSxHQUVBMkQsR0FDQWtFLFdBQUEsUUFBQSxPQUFBLE9BQUEsU0FDQUYsTUFBQSxPQUdBRyxZQUFBLFNBQUFILEdBQ0EsR0FBQSxpQkFBQUEsRUFBQSxDQUNBLElBQUFJLEVBQUFqRixFQUFBcG9DLFFBQUFpcEMsRUFBQWtFLFVBQUFGLEVBQUExdEMsZUFFQTB0QyxFQURBSSxHQUFBLEVBQ0FBLEVBRUF0ekMsU0FBQWt6QyxFQUFBLElBSUEsT0FBQUEsR0FJQXp5QyxJQUFBLFNBQUF5eUMsR0FHQSxHQUZBQSxFQUFBaEUsRUFBQW1FLFlBQUFILEdBRUEsb0JBQUExeUMsU0FBQTB1QyxFQUFBbUUsWUFBQW5FLEVBQUFnRSxRQUFBQSxFQUFBLENBQ0EsSUFBQTFyQyxFQUFBMG5DLEVBQUFrRSxVQUFBRixHQUNBMXlDLFFBQUFnSCxLQUVBQSxFQUFBLE9BR0EsSUFBQSxJQUFBK3JDLEVBQUE3bEMsVUFBQW5NLE9BQUFtdUIsRUFBQWx1QixNQUFBK3hDLEVBQUEsRUFBQUEsRUFBQSxFQUFBLEdBQUFDLEVBQUEsRUFBQUEsRUFBQUQsRUFBQUMsSUFDQTlqQixFQUFBOGpCLEVBQUEsR0FBQTlsQyxVQUFBOGxDLEdBR0FoekMsUUFBQWdILEdBQUFLLE1BQUFySCxRQUFBa3ZCLE1BS0F6ckIsRUFBQSxRQUFBaXJDLEVBQ0FsckMsRUFBQUMsUUFBQUEsRUFBQSxTQUlBLFNBQUFELEVBQUFDLEdBR0EsYUFHQSxTQUFBa3BDLEVBQUExeEIsR0FDQXhiLEtBQUF3YixPQUFBQSxFQUZBeFgsRUFBQXlvQyxZQUFBLEVBS0FTLEVBQUEzNkIsVUFBQWlILFNBQUEwekIsRUFBQTM2QixVQUFBbzlCLE9BQUEsV0FDQSxNQUFBLEdBQUEzdkMsS0FBQXdiLFFBR0F4WCxFQUFBLFFBQUFrcEMsRUFDQW5wQyxFQUFBQyxRQUFBQSxFQUFBLFNBSUEsU0FBQUQsRUFBQUMsRUFBQXNuQyxHQUVBLGFBa05BLFNBQUFrSSxFQUFBbmEsRUFBQXAzQixFQUFBb0wsRUFBQXBOLEVBQUF3ekMsRUFBQXhELEVBQUF5RCxHQUNBLFNBQUFDLEVBQUF4eUMsR0FDQSxJQUFBcUYsRUFBQWlILFVBQUFuTSxRQUFBLFFBQUF1RyxJQUFBNEYsVUFBQSxNQUFBQSxVQUFBLEdBRUFtbUMsRUFBQUYsRUFLQSxPQUpBQSxHQUFBdnlDLEdBQUF1eUMsRUFBQSxJQUFBdnlDLElBQUFrNEIsRUFBQXdhLGFBQUEsT0FBQUgsRUFBQSxLQUNBRSxHQUFBenlDLEdBQUFtTyxPQUFBb2tDLElBR0FybUMsRUFBQWdzQixFQUFBbDRCLEVBQUFrNEIsRUFBQXdVLFFBQUF4VSxFQUFBeVUsU0FBQXRuQyxFQUFBdkcsTUFBQUEsRUFBQWd3QyxJQUFBenBDLEVBQUF5cEMsYUFBQTNnQyxPQUFBMmdDLEdBQUEyRCxHQVFBLE9BTEFELEVBQUFHLEVBQUF6bUMsRUFBQXNtQyxFQUFBdGEsRUFBQXFhLEVBQUF6ekMsRUFBQWd3QyxHQUVBMEQsRUFBQUksUUFBQTl4QyxFQUNBMHhDLEVBQUF0bEIsTUFBQXFsQixFQUFBQSxFQUFBcHlDLE9BQUEsRUFDQXF5QyxFQUFBMUQsWUFBQXdELEdBQUEsRUFDQUUsRUEwREEsU0FBQTE0QixJQUNBLE1BQUEsR0FHQSxTQUFBKzRCLEVBQUE3eUMsRUFBQWxCLEdBS0EsT0FKQUEsR0FBQSxTQUFBQSxLQUNBQSxFQUFBQSxFQUFBZzBDLEVBQUF6RSxZQUFBdnZDLE9BQ0EycEIsS0FBQXpvQixHQUVBbEIsRUFHQSxTQUFBNnpDLEVBQUF6bUMsRUFBQXNtQyxFQUFBdGEsRUFBQXFhLEVBQUF6ekMsRUFBQWd3QyxHQUNBLEdBQUE1aUMsRUFBQTZtQyxVQUFBLENBQ0EsSUFBQXBnQyxLQUNBNi9CLEVBQUF0bUMsRUFBQTZtQyxVQUFBUCxFQUFBNy9CLEVBQUF1bEIsRUFBQXFhLEdBQUFBLEVBQUEsR0FBQXp6QyxFQUFBZ3dDLEVBQUF5RCxHQUNBekcsRUFBQXArQixPQUFBOGtDLEVBQUE3L0IsR0FFQSxPQUFBNi9CLEVBN1NBLElBQUFRLEVBQUE3SSxFQUFBLElBQUEsUUFFQXFDLEVBQUFyQyxFQUFBLEdBQUEsUUFFQWtCLEVBQUFsQixFQUFBLEdBQUEsUUFFQXRuQyxFQUFBeW9DLFlBQUEsRUFDQXpvQyxFQUFBb3dDLGNBaUJBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQUQsR0FBQUEsRUFBQSxJQUFBLEVBQ0FFLEVBQUFOLEVBQUF6RixrQkFFQSxHQUFBOEYsSUFBQUMsRUFBQSxDQUNBLEdBQUFELEVBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBUCxFQUFBeEYsaUJBQUE4RixHQUNBRSxFQUFBUixFQUFBeEYsaUJBQUE2RixHQUNBLE1BQUEsSUFBQWpHLEVBQUEsUUFBQSw2SUFBQW1HLEVBQUEsb0RBQUFDLEVBQUEsTUFHQSxNQUFBLElBQUFwRyxFQUFBLFFBQUEsd0lBQUFnRyxFQUFBLEdBQUEsUUEzQkFyd0MsRUFBQXlwQyxTQWdDQSxTQUFBaUgsRUFBQUMsR0ErR0EsU0FBQTdwQyxFQUFBM0osR0FtQkEsU0FBQXl6QyxFQUFBenpDLEdBQ0EsTUFBQSxHQUFBdXpDLEVBQUFFLEtBQUF2YixFQUFBbDRCLEVBQUFrNEIsRUFBQXdVLFFBQUF4VSxFQUFBeVUsU0FBQTd0QyxFQUFBZ3dDLEVBQUF5RCxHQW5CQSxJQUFBbHRDLEVBQUFpSCxVQUFBbk0sUUFBQSxRQUFBdUcsSUFBQTRGLFVBQUEsTUFBQUEsVUFBQSxHQUVBeE4sRUFBQXVHLEVBQUF2RyxLQUVBNkssRUFBQStwQyxPQUFBcnVDLElBQ0FBLEVBQUE0b0MsU0FBQXNGLEVBQUFJLFVBQ0E3MEMsRUFBQSt6QyxFQUFBN3lDLEVBQUFsQixJQUVBLElBQUF5ekMsT0FBQTdyQyxFQUNBb29DLEVBQUF5RSxFQUFBSyx1QkFBQWx0QyxFQWFBLE9BWkE2c0MsRUFBQU0sWUFFQXRCLEVBREFsdEMsRUFBQWt0QyxPQUNBdnlDLEdBQUFxRixFQUFBa3RDLE9BQUEsSUFBQXZ5QyxHQUFBbU8sT0FBQTlJLEVBQUFrdEMsUUFBQWx0QyxFQUFBa3RDLFFBRUF2eUMsS0FPQXl6QyxFQUFBZCxFQUFBWSxFQUFBRSxLQUFBQSxFQUFBdmIsRUFBQTd5QixFQUFBa3RDLFdBQUF6ekMsRUFBQWd3QyxJQUNBOXVDLEVBQUFxRixHQXBJQSxJQUFBbXVDLEVBQ0EsTUFBQSxJQUFBdEcsRUFBQSxRQUFBLHFDQUVBLElBQUFxRyxJQUFBQSxFQUFBRSxLQUNBLE1BQUEsSUFBQXZHLEVBQUEsUUFBQSxtQ0FBQXFHLEdBR0FBLEVBQUFFLEtBQUFWLFVBQUFRLEVBQUFPLE9BSUFOLEVBQUFwSCxHQUFBNkcsY0FBQU0sRUFBQVEsVUFvQ0EsSUFBQTdiLEdBQ0E4YixPQUFBLFNBQUFud0MsRUFBQU0sR0FDQSxLQUFBQSxLQUFBTixHQUNBLE1BQUEsSUFBQXFwQyxFQUFBLFFBQUEsSUFBQS9vQyxFQUFBLG9CQUFBTixHQUVBLE9BQUFBLEVBQUFNLElBRUE4dkMsT0FBQSxTQUFBMUIsRUFBQXB1QyxHQUVBLElBQUEsSUFEQW1WLEVBQUFpNUIsRUFBQXB5QyxPQUNBVyxFQUFBLEVBQUFBLEVBQUF3WSxFQUFBeFksSUFDQSxHQUFBeXhDLEVBQUF6eEMsSUFBQSxNQUFBeXhDLEVBQUF6eEMsR0FBQXFELEdBQ0EsT0FBQW91QyxFQUFBenhDLEdBQUFxRCxJQUlBK3ZDLE9BQUEsU0FBQXo4QixFQUFBelgsR0FDQSxNQUFBLG1CQUFBeVgsRUFBQUEsRUFBQTlTLEtBQUEzRSxHQUFBeVgsR0FHQTAwQixpQkFBQUwsRUFBQUssaUJBQ0FnSSxjQXREQSxTQUFBbEcsRUFBQWp1QyxFQUFBcUYsR0FDQUEsRUFBQWtqQixPQUNBdm9CLEVBQUE4ckMsRUFBQXArQixVQUFBMU4sRUFBQXFGLEVBQUFrakIsTUFDQWxqQixFQUFBMHBDLE1BQ0ExcEMsRUFBQTBwQyxJQUFBLElBQUEsSUFJQWQsRUFBQXVGLEVBQUFwSCxHQUFBZ0ksZUFBQXp2QyxLQUFBOUYsS0FBQW92QyxFQUFBanVDLEVBQUFxRixHQUNBLElBQUE2TixFQUFBc2dDLEVBQUFwSCxHQUFBK0gsY0FBQXh2QyxLQUFBOUYsS0FBQW92QyxFQUFBanVDLEVBQUFxRixHQU1BLEdBSkEsTUFBQTZOLEdBQUFzZ0MsRUFBQTl6QyxVQUNBMkYsRUFBQXNuQyxTQUFBdG5DLEVBQUFsQixNQUFBcXZDLEVBQUE5ekMsUUFBQXV1QyxFQUFBc0YsRUFBQWMsZ0JBQUFiLEdBQ0F0Z0MsRUFBQTdOLEVBQUFzbkMsU0FBQXRuQyxFQUFBbEIsTUFBQW5FLEVBQUFxRixJQUVBLE1BQUE2TixFQUFBLENBQ0EsR0FBQTdOLEVBQUFpdkMsT0FBQSxDQUVBLElBQUEsSUFEQUMsRUFBQXJoQyxFQUFBMkUsTUFBQSxNQUNBL1csRUFBQSxFQUFBb0osRUFBQXFxQyxFQUFBcDBDLE9BQUFXLEVBQUFvSixJQUNBcXFDLEVBQUF6ekMsSUFBQUEsRUFBQSxJQUFBb0osR0FEQXBKLElBS0F5ekMsRUFBQXp6QyxHQUFBdUUsRUFBQWl2QyxPQUFBQyxFQUFBenpDLEdBRUFvUyxFQUFBcWhDLEVBQUF4L0IsS0FBQSxNQUVBLE9BQUE3QixFQUVBLE1BQUEsSUFBQWc2QixFQUFBLFFBQUEsZUFBQTduQyxFQUFBbEIsS0FBQSw2REEyQkErSCxHQUFBLFNBQUFwTCxHQUNBLElBQUE2SSxFQUFBNHBDLEVBQUF6eUMsR0FFQSxPQURBNkksRUFBQW9wQyxVQUFBUSxFQUFBenlDLEVBQUEsTUFDQTZJLEdBR0E2cUMsWUFDQTVCLFFBQUEsU0FBQTl4QyxFQUFBaEMsRUFBQXd6QyxFQUFBeEQsRUFBQXlELEdBQ0EsSUFBQWtDLEVBQUE1MUMsS0FBQTIxQyxTQUFBMXpDLEdBQ0FvTCxFQUFBck4sS0FBQXFOLEdBQUFwTCxHQU1BLE9BTEFoQyxHQUFBeXpDLEdBQUF6RCxHQUFBd0QsRUFDQW1DLEVBQUFwQyxFQUFBeHpDLEtBQUFpQyxFQUFBb0wsRUFBQXBOLEVBQUF3ekMsRUFBQXhELEVBQUF5RCxHQUNBa0MsSUFDQUEsRUFBQTUxQyxLQUFBMjFDLFNBQUExekMsR0FBQXV4QyxFQUFBeHpDLEtBQUFpQyxFQUFBb0wsSUFFQXVvQyxHQUdBMzFDLEtBQUEsU0FBQWpCLEVBQUFxdkIsR0FDQSxLQUFBcnZCLEdBQUFxdkIsS0FDQXJ2QixFQUFBQSxFQUFBZ3hDLFFBRUEsT0FBQWh4QyxHQUVBaU0sTUFBQSxTQUFBaTNCLEVBQUEyVCxHQUNBLElBQUE3d0MsRUFBQWs5QixHQUFBMlQsRUFNQSxPQUpBM1QsR0FBQTJULEdBQUEzVCxJQUFBMlQsSUFDQTd3QyxFQUFBaW9DLEVBQUFwK0IsVUFBQWduQyxFQUFBM1QsSUFHQWw5QixHQUdBNnVDLFlBQUFNLE1BRUFsNUIsS0FBQTA1QixFQUFBcEgsR0FBQXR5QixLQUNBbzVCLGFBQUFLLEVBQUFRLFVBeURBLE9BN0JBcHFDLEVBQUFnckMsT0FBQSxFQUVBaHJDLEVBQUErcEMsT0FBQSxTQUFBcnVDLEdBQ0FBLEVBQUE0b0MsU0FVQS9WLEVBQUF3VSxRQUFBcm5DLEVBQUFxbkMsUUFDQXhVLEVBQUF5VSxTQUFBdG5DLEVBQUFzbkMsU0FDQXpVLEVBQUEwVSxXQUFBdm5DLEVBQUF1bkMsYUFYQTFVLEVBQUF3VSxRQUFBeFUsRUFBQXB1QixNQUFBekUsRUFBQXFuQyxRQUFBOEcsRUFBQTlHLFNBRUE2RyxFQUFBcUIsYUFDQTFjLEVBQUF5VSxTQUFBelUsRUFBQXB1QixNQUFBekUsRUFBQXNuQyxTQUFBNkcsRUFBQTdHLFlBRUE0RyxFQUFBcUIsWUFBQXJCLEVBQUFzQixpQkFDQTNjLEVBQUEwVSxXQUFBMVUsRUFBQXB1QixNQUFBekUsRUFBQXVuQyxXQUFBNEcsRUFBQTVHLGVBU0FqakMsRUFBQW1yQyxPQUFBLFNBQUFoMEMsRUFBQWhDLEVBQUFnd0MsRUFBQXlELEdBQ0EsR0FBQWdCLEVBQUFLLGlCQUFBOUUsRUFDQSxNQUFBLElBQUE1QixFQUFBLFFBQUEsMEJBRUEsR0FBQXFHLEVBQUFNLFlBQUF0QixFQUNBLE1BQUEsSUFBQXJGLEVBQUEsUUFBQSwyQkFHQSxPQUFBbUYsRUFBQW5hLEVBQUFwM0IsRUFBQXl5QyxFQUFBenlDLEdBQUFoQyxFQUFBLEVBQUFnd0MsRUFBQXlELElBRUE1b0MsR0FwTUE5RyxFQUFBd3ZDLFlBQUFBLEVBQ0F4dkMsRUFBQXV4QyxlQTBOQSxTQUFBbkcsRUFBQWp1QyxFQUFBcUYsR0FZQSxPQVhBNG9DLEVBTUFBLEVBQUF0cEMsTUFBQVUsRUFBQWxCLE9BRUFrQixFQUFBbEIsS0FBQThwQyxFQUNBQSxFQUFBNW9DLEVBQUFzbkMsU0FBQXNCLElBUEFBLEVBREEsbUJBQUE1b0MsRUFBQWxCLEtBQ0FrQixFQUFBdkcsS0FBQSxpQkFFQXVHLEVBQUFzbkMsU0FBQXRuQyxFQUFBbEIsTUFPQThwQyxHQXJPQXByQyxFQUFBc3hDLGNBd09BLFNBQUFsRyxFQUFBanVDLEVBQUFxRixHQUVBLElBQUEwdkMsRUFBQTF2QyxFQUFBdkcsTUFBQXVHLEVBQUF2RyxLQUFBLGlCQUNBdUcsRUFBQTRvQyxTQUFBLEVBQ0E1b0MsRUFBQTBwQyxNQUNBMXBDLEVBQUF2RyxLQUFBb3dDLFlBQUE3cEMsRUFBQTBwQyxJQUFBLElBQUExcEMsRUFBQXZHLEtBQUFvd0MsYUFHQSxJQUFBOEYsT0FBQXR1QyxFQXlCQSxHQXhCQXJCLEVBQUE2RyxJQUFBN0csRUFBQTZHLEtBQUE0TixHQUNBLFdBQ0F6VSxFQUFBdkcsS0FBQWcwQyxFQUFBekUsWUFBQWhwQyxFQUFBdkcsTUFFQSxJQUFBb04sRUFBQTdHLEVBQUE2RyxHQUNBOG9DLEVBQUEzdkMsRUFBQXZHLEtBQUEsaUJBQUEsU0FBQWtCLEdBQ0EsSUFBQXFGLEVBQUFpSCxVQUFBbk0sUUFBQSxRQUFBdUcsSUFBQTRGLFVBQUEsTUFBQUEsVUFBQSxHQU1BLE9BRkFqSCxFQUFBdkcsS0FBQWcwQyxFQUFBekUsWUFBQWhwQyxFQUFBdkcsTUFDQXVHLEVBQUF2RyxLQUFBLGlCQUFBaTJDLEVBQ0E3b0MsRUFBQWxNLEVBQUFxRixJQUVBNkcsRUFBQXlnQyxXQUNBdG5DLEVBQUFzbkMsU0FBQWIsRUFBQXArQixVQUFBckksRUFBQXNuQyxTQUFBemdDLEVBQUF5Z0MsbUJBS0FqbUMsSUFBQXVuQyxHQUFBK0csSUFDQS9HLEVBQUErRyxRQUdBdHVDLElBQUF1bkMsRUFDQSxNQUFBLElBQUFmLEVBQUEsUUFBQSxlQUFBN25DLEVBQUFsQixLQUFBLHVCQUNBLEdBQUE4cEMsYUFBQWdILFNBQ0EsT0FBQWhILEVBQUFqdUMsRUFBQXFGLElBM1FBeEMsRUFBQWlYLEtBQUFBLEVBRUEsSUFFQWd5QixFQUFBVSxFQUZBckMsRUFBQSxJQU1BK0MsRUFBQTdCLEVBRkFsQixFQUFBLElBSUEySSxFQUFBM0ksRUFBQSxJQTRSQSxTQUFBdm5DLEVBQUFDLEVBQUFzbkMsR0FFQXZuQyxFQUFBQyxTQUFBK29DLFFBQUF6QixFQUFBLElBQUFtQixZQUFBLElBSUEsU0FBQTFvQyxFQUFBQyxFQUFBc25DLEdBRUFBLEVBQUEsSUFDQXZuQyxFQUFBQyxRQUFBc25DLEVBQUEsSUFBQWp5QixPQUFBZzlCLE1BSUEsU0FBQXR5QyxFQUFBQyxFQUFBc25DLEdBR0EsSUFBQWdMLEVBQUFoTCxFQUFBLElBRUFBLEVBQUEsSUFBQSxPQUFBLFNBQUFpTCxHQUNBLE9BQUEsU0FBQW5GLEdBQ0EsT0FBQW1GLEdBQUFELEVBQUFsRixHQUFBbUYsRUFBQW5GLEdBQUFBLE1BTUEsU0FBQXJ0QyxFQUFBQyxHQUVBRCxFQUFBQyxRQUFBLFNBQUFvdEMsR0FDQSxNQUFBLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUEsbUJBQUFBLElBS0EsU0FBQXJ0QyxFQUFBQyxFQUFBc25DLEdBR0EsSUFBQWtMLEVBQUFsTCxFQUFBLElBQ0FtTCxFQUFBbkwsRUFBQSxJQUNBb0wsRUFBQXBMLEVBQUEsSUFDQXZuQyxFQUFBQyxRQUFBLFNBQUEyeUMsRUFBQS9zQyxHQUNBLElBQUF5RCxHQUFBb3BDLEVBQUFwOUIsWUFBQXM5QixJQUFBdDlCLE9BQUFzOUIsR0FDQUMsS0FDQUEsRUFBQUQsR0FBQS9zQyxFQUFBeUQsR0FDQW1wQyxFQUFBQSxFQUFBSyxFQUFBTCxFQUFBTSxFQUFBSixFQUFBLFdBQUFycEMsRUFBQSxLQUFBLFNBQUF1cEMsS0FLQSxTQUFBN3lDLEVBQUFDLEVBQUFzbkMsR0FFQSxJQUFBem5DLEVBQUF5bkMsRUFBQSxJQUNBbUwsRUFBQW5MLEVBQUEsSUFDQXlMLEVBQUF6TCxFQUFBLElBR0FrTCxFQUFBLFNBQUF2eEMsRUFBQUssRUFBQTRyQixHQUNBLElBUUExb0IsRUFBQXd1QyxFQUFBQyxFQVJBQyxFQUFBanlDLEVBQUF1eEMsRUFBQU0sRUFDQUssRUFBQWx5QyxFQUFBdXhDLEVBQUFZLEVBQ0FDLEVBQUFweUMsRUFBQXV4QyxFQUFBSyxFQUNBUyxFQUFBcnlDLEVBQUF1eEMsRUFBQWUsRUFDQUMsRUFBQXZ5QyxFQUFBdXhDLEVBQUFpQixFQUNBQyxFQUFBenlDLEVBQUF1eEMsRUFBQW1CLEVBQ0EzekMsRUFBQW16QyxFQUFBVixFQUFBQSxFQUFBbnhDLEtBQUFteEMsRUFBQW54QyxPQUNBbVMsRUFBQTAvQixFQUFBdHpDLEVBQUF3ekMsRUFBQXh6QyxFQUFBeUIsSUFBQXpCLEVBQUF5QixRQUFBLFVBRUE2eEMsSUFBQWptQixFQUFBNXJCLEdBQ0EsSUFBQWtELEtBQUEwb0IsR0FFQThsQixHQUFBRSxHQUFBei9CLEdBQUFqUCxLQUFBaVAsSUFDQWpQLEtBQUF4RSxJQUVBaXpDLEVBQUFELEVBQUF2L0IsRUFBQWpQLEdBQUEwb0IsRUFBQTFvQixHQUVBeEUsRUFBQXdFLEdBQUEydUMsR0FBQSxtQkFBQTEvQixFQUFBalAsR0FBQTBvQixFQUFBMW9CLEdBRUFndkMsR0FBQVIsRUFBQUQsRUFBQUUsRUFBQXB6QyxHQUVBNnpDLEdBQUFqZ0MsRUFBQWpQLElBQUF5dUMsRUFBQSxTQUFBVyxHQUNBLElBQUFkLEVBQUEsU0FBQTVVLEdBQ0EsT0FBQWxpQyxnQkFBQTQzQyxFQUFBLElBQUFBLEVBQUExVixHQUFBMFYsRUFBQTFWLElBR0EsT0FEQTRVLEVBQUEsVUFBQWMsRUFBQSxVQUNBZCxHQUVBRyxHQUFBSyxHQUFBLG1CQUFBTCxFQUFBRixFQUFBWCxTQUFBdHdDLEtBQUFteEMsR0FBQUEsRUFDQUssS0FBQXR6QyxFQUFBLFlBQUFBLEVBQUEsZUFBQXdFLEdBQUF5dUMsS0FJQVQsRUFBQU0sRUFBQSxFQUNBTixFQUFBWSxFQUFBLEVBQ0FaLEVBQUFLLEVBQUEsRUFDQUwsRUFBQWUsRUFBQSxFQUNBZixFQUFBaUIsRUFBQSxHQUNBakIsRUFBQW1CLEVBQUEsR0FDQTV6QyxFQUFBQyxRQUFBd3lDLEdBSUEsU0FBQXp5QyxFQUFBQyxHQUdBLElBQUFILEVBQUFFLEVBQUFDLFFBQUEsb0JBQUFHLFFBQUFBLE9BQUF1TixNQUFBQSxLQUNBdk4sT0FBQSxvQkFBQS9CLE1BQUFBLEtBQUFzUCxNQUFBQSxLQUFBdFAsS0FBQWcwQyxTQUFBLGlCQUNBLGlCQUFBeUIsTUFBQUEsSUFBQWgwQyxJQUlBLFNBQUFFLEVBQUFDLEdBRUEsSUFBQXl5QyxFQUFBMXlDLEVBQUFDLFNBQUE4ekMsUUFBQSxTQUNBLGlCQUFBQyxNQUFBQSxJQUFBdEIsSUFJQSxTQUFBMXlDLEVBQUFDLEVBQUFzbkMsR0FHQSxJQUFBME0sRUFBQTFNLEVBQUEsSUFDQXZuQyxFQUFBQyxRQUFBLFNBQUFxSixFQUFBa2hCLEVBQUFqdEIsR0FFQSxHQURBMDJDLEVBQUEzcUMsUUFDQXhGLElBQUEwbUIsRUFBQSxPQUFBbGhCLEVBQ0EsT0FBQS9MLEdBQ0EsS0FBQSxFQUFBLE9BQUEsU0FBQWtkLEdBQ0EsT0FBQW5SLEVBQUF2SCxLQUFBeW9CLEVBQUEvUCxJQUVBLEtBQUEsRUFBQSxPQUFBLFNBQUFBLEVBQUFDLEdBQ0EsT0FBQXBSLEVBQUF2SCxLQUFBeW9CLEVBQUEvUCxFQUFBQyxJQUVBLEtBQUEsRUFBQSxPQUFBLFNBQUFELEVBQUFDLEVBQUFpdEIsR0FDQSxPQUFBcitCLEVBQUF2SCxLQUFBeW9CLEVBQUEvUCxFQUFBQyxFQUFBaXRCLElBR0EsT0FBQSxXQUNBLE9BQUFyK0IsRUFBQXpGLE1BQUEybUIsRUFBQTlnQixjQU1BLFNBQUExSixFQUFBQyxHQUVBRCxFQUFBQyxRQUFBLFNBQUFvdEMsR0FDQSxHQUFBLG1CQUFBQSxFQUFBLE1BQUExaUIsVUFBQTBpQixFQUFBLHVCQUNBLE9BQUFBLElBS0EsU0FBQXJ0QyxFQUFBQyxHQUVBRCxFQUFBQyxRQUFBLFNBQUE0RixHQUNBLElBQ0EsUUFBQUEsSUFDQSxNQUFBaEIsR0FDQSxPQUFBLEtBTUEsU0FBQTdFLEVBQUFDLElBRUEsU0FBQUgsR0FDQSxhQUVBRyxFQUFBeW9DLFlBQUEsRUFFQXpvQyxFQUFBLFFBQUEsU0FBQXBELEdBRUEsSUFBQWdwQixPQUFBLElBQUEvbEIsRUFBQUEsRUFBQU0sT0FDQTh6QyxFQUFBcnVCLEVBQUFocEIsV0FFQUEsRUFBQXdxQyxXQUFBLFdBSUEsT0FIQXhoQixFQUFBaHBCLGFBQUFBLElBQ0FncEIsRUFBQWhwQixXQUFBcTNDLEdBRUFyM0MsSUFJQW1ELEVBQUFDLFFBQUFBLEVBQUEsVUFDQThCLEtBQUE5QixFQUFBLFdBQUEsT0FBQWhFLFVBSUEsU0FBQStELEVBQUFDLEdBRUEsYUFFQUEsRUFBQXlvQyxZQUFBLEVBQ0EsSUFBQVQsR0FFQTZCLFNBSUFxSyxpQkFBQSxTQUFBMW9DLEdBQ0EsTUFBQSxrQkFBQUEsRUFBQXZLLE9BQUEsc0JBQUF1SyxFQUFBdkssTUFBQSxtQkFBQXVLLEVBQUF2SyxVQUFBdUssRUFBQXc1QixRQUFBeDVCLEVBQUF3NUIsT0FBQTFuQyxRQUFBa08sRUFBQWthLE9BR0F5dUIsU0FBQSxTQUFBaEksR0FDQSxNQUFBLGFBQUFqcUMsS0FBQWlxQyxFQUFBcFgsV0FNQXFmLFNBQUEsU0FBQWpJLEdBQ0EsT0FBQSxJQUFBQSxFQUFBcFUsTUFBQXo2QixTQUFBMHFDLEVBQUE2QixRQUFBc0ssU0FBQWhJLEtBQUFBLEVBQUE5aEIsU0FPQXJxQixFQUFBLFFBQUFnb0MsRUFDQWpvQyxFQUFBQyxRQUFBQSxFQUFBLFNBSUEsU0FBQUQsRUFBQUMsRUFBQXNuQyxHQUVBLGFBRUEsSUFBQWtCLEVBQUFsQixFQUFBLEdBQUEsUUFFQXFDLEVBQUFyQyxFQUFBLEdBQUEsUUFFQXRuQyxFQUFBeW9DLFlBQUEsRUFDQXpvQyxFQUFBM0UsTUFxQkEsU0FBQW1uQixFQUFBaGdCLEdBRUEsTUFBQSxZQUFBZ2dCLEVBQUF2aEIsS0FDQXVoQixHQUdBNnhCLEVBQUEsUUFBQUMsR0FBQUEsRUFHQUEsRUFBQUMsUUFBQSxTQUFBQSxHQUNBLE9BQUEsSUFBQUQsRUFBQUUsZUFBQWh5QyxHQUFBQSxFQUFBaXlDLFFBQUFGLElBR0EsSUFBQUcsRUFBQSxRQUFBbHlDLEdBQ0FteUMsT0FBQU4sRUFBQSxRQUFBaDVDLE1BQUFtbkIsTUFqQ0EsSUFFQTZ4QixFQUFBN0wsRUFGQWxCLEVBQUEsS0FNQW9OLEVBQUFsTSxFQUZBbEIsRUFBQSxLQU1Bc04sRUFBQWpMLEVBRkFyQyxFQUFBLEtBSUE4QyxFQUFBOUMsRUFBQSxHQUVBdG5DLEVBQUF1b0MsT0FBQThMLEVBQUEsUUFFQSxJQUFBQyxLQUNBbEssRUFBQXYvQixPQUFBeXBDLEVBQUFNLElBcUJBLFNBQUE3MEMsRUFBQUMsR0FJQSxhQUVBQSxFQUFBeW9DLFlBQUEsRUFDQSxJQUFBb00sRUFBQSxXQXV0QkEsU0FBQXhNLElBQ0Fyc0MsS0FBQXM0QyxNQXZ0QkEsSUFBQS9MLEdBQUF1TSxNQUFBLGFBQ0FSLE1BQ0FTLFVBQUF4NUMsTUFBQSxFQUFBcXFCLEtBQUEsRUFBQW1xQixRQUFBLEVBQUFpRixJQUFBLEVBQUFDLG9CQUFBLEVBQUFDLFVBQUEsRUFBQUMsU0FBQSxFQUFBQyxNQUFBLEVBQUFDLFNBQUEsR0FBQWpLLFFBQUEsR0FBQStHLGFBQUEsR0FBQXRvQyxRQUFBLEdBQUF5ckMsUUFBQSxHQUFBQyxRQUFBLEdBQUFDLGFBQUEsR0FBQUMsMEJBQUEsR0FBQUMsY0FBQSxHQUFBQyxlQUFBLEdBQUFDLFdBQUEsR0FBQUMseUJBQUEsR0FBQUMscUJBQUEsR0FBQUMsZ0JBQUEsR0FBQUMsVUFBQSxHQUFBQyxjQUFBLEdBQUFDLFdBQUEsR0FBQUMsWUFBQSxHQUFBQyxjQUFBLEdBQUFDLFdBQUEsR0FBQUMsc0JBQUEsR0FBQUMsa0JBQUEsR0FBQUMsa0JBQUEsR0FBQUMsTUFBQSxHQUFBQyxhQUFBLEdBQUFDLHdCQUFBLEdBQUFDLG9CQUFBLEdBQUFDLG9CQUFBLEdBQUFDLGlCQUFBLEdBQUFDLG1CQUFBLEdBQUFDLDZCQUFBLEdBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLEdBQUFDLGtCQUFBLEdBQUFDLFFBQUEsR0FBQUMsYUFBQSxHQUFBQyxxQkFBQSxHQUFBQyxjQUFBLEdBQUFDLEtBQUEsR0FBQUMscUJBQUEsR0FBQUMsaUJBQUEsR0FBQUMsZUFBQSxHQUFBQyxxQkFBQSxHQUFBQyxpQkFBQSxHQUFBQyxnQkFBQSxHQUFBQyxhQUFBLEdBQUFDLFlBQUEsR0FBQUMsb0JBQUEsR0FBQUMsZ0JBQUEsR0FBQUMsaUJBQUEsR0FBQUMsbUJBQUEsR0FBQUMsNkJBQUEsR0FBQUMseUJBQUEsR0FBQXBhLE1BQUEsR0FBQXFhLE1BQUEsR0FBQUMsV0FBQSxHQUFBQyxrQkFBQSxHQUFBQyxjQUFBLEdBQUFDLFlBQUEsR0FBQWp6QixLQUFBLEdBQUFrekIsc0JBQUEsR0FBQUMsWUFBQSxHQUFBejRCLEdBQUEsR0FBQTA0QixPQUFBLEdBQUE3TSxZQUFBLEdBQUE4TSxrQkFBQSxHQUFBQyw2QkFBQSxHQUFBQyxtQkFBQSxHQUFBOU0sS0FBQSxHQUFBK00sU0FBQSxHQUFBQyxPQUFBLEdBQUFDLE9BQUEsR0FBQUMsUUFBQSxHQUFBQyxVQUFBLEdBQUFDLEtBQUEsR0FBQUMsS0FBQSxHQUFBQyxhQUFBLEdBQUFDLElBQUEsR0FBQUMsUUFBQSxFQUFBQyxLQUFBLEdBQ0FDLFlBQUFsUCxFQUFBLFFBQUFHLEVBQUEsTUFBQWdQLEdBQUEsVUFBQUMsR0FBQSxVQUFBQyxHQUFBLGdCQUFBQyxHQUFBLGlCQUFBQyxHQUFBLGtCQUFBQyxHQUFBLGFBQUFDLEdBQUEsUUFBQUMsR0FBQSxlQUFBQyxHQUFBLHFCQUFBQyxHQUFBLFVBQUFDLEdBQUEsZ0JBQUFDLEdBQUEsT0FBQUMsR0FBQSxpQkFBQUMsR0FBQSxrQkFBQUMsR0FBQSxlQUFBQyxHQUFBLHFCQUFBQyxHQUFBLGFBQUFDLEdBQUEsY0FBQUMsR0FBQSxLQUFBQyxHQUFBLFNBQUFDLEdBQUEsb0JBQUFDLEdBQUEscUJBQUFDLEdBQUEsU0FBQUMsR0FBQSxTQUFBQyxHQUFBLFVBQUFDLEdBQUEsWUFBQUMsR0FBQSxPQUFBQyxHQUFBLE9BQUFDLEdBQUEsT0FDQUMsY0FBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxH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LElBQUFDLElBQUEsRUFBQSxNQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBL1AsR0FBQSxFQUFBLEdBQUFnUCxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFFLElBQUEsRUFBQSxHQUFBRSxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUUsSUFBQSxFQUFBLEdBQUFDLElBQUEsRUFBQSxLQUFBZ0QsR0FBQSxHQUFBN0MsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFILEdBQUEsR0FBQTdDLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBblQsRUFBQSxHQUFBRSxFQUFBLEVBQUErTyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBaFEsRUFBQSxHQUFBRSxFQUFBLEVBQUErTyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUEyQyxHQUFBLEdBQUF6RCxJQUFBLEVBQUEsSUFBQWtFLEdBQUEsS0FBQUosR0FBQSxHQUFBSyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJELElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQW5ULEVBQUEsR0FBQUUsRUFBQSxFQUFBK08sSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUEvUCxHQUFBLEVBQUEsSUFBQWdQLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBZ0QsR0FBQSxHQUFBN0MsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFILEdBQUEsR0FBQTdDLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBSCxHQUFBLEdBQUE3QyxJQUFBLEVBQUEsSUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQUgsR0FBQSxHQUFBSyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJELElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQTVELElBQUEsRUFBQSxJQUFBZ0UsR0FBQSxHQUFBdEQsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBdkIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUF2QixJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBRyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXZCLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQU8sSUFBQSxFQUFBLElBQUFHLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBdkIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUF2QixJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBRyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXZCLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQU8sSUFBQSxFQUFBLElBQUFHLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBdkIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUF2QixJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBRyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFWLElBQUEsRUFBQSxJQUFBZ0QsR0FBQSxLQUFBOUQsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBMkMsR0FBQSxHQUFBMUQsSUFBQSxFQUFBLElBQUFHLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUksSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQTZDLEdBQUEsR0FBQUMsR0FBQSxHQUFBakUsSUFBQSxFQUFBLElBQUFrRSxHQUFBLEdBQUFqRSxJQUFBLEVBQUEsSUFBQWtFLEdBQUEsR0FBQWpFLElBQUEsRUFBQSxNQUFBa0UsR0FBQSxHQUFBRixHQUFBLEdBQUFqRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFnRCxHQUFBLEdBQUF6RCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFELElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQUksSUFBQSxFQUFBLElBQUF1RSxHQUFBLEdBQUE3RCxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFJLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFyQixJQUFBLEVBQUEsSUFBQVUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBckIsSUFBQSxFQUFBLElBQUFVLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUksSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQW9DLEdBQUEsR0FBQTdDLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBWSxHQUFBLEdBQUFwRSxJQUFBLEVBQUEsTUFBQXFFLEdBQUEsR0FBQXpFLElBQUEsRUFBQSxJQUFBVSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBckIsSUFBQSxFQUFBLElBQUEwRSxHQUFBLEdBQUFoRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBc0QsR0FBQSxHQUFBN0UsSUFBQSxFQUFBLElBQUFZLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUksSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXJCLElBQUEsRUFBQSxJQUFBNEUsR0FBQSxHQUFBbEUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBb0MsR0FBQSxHQUFBekQsSUFBQSxFQUFBLElBQUE2RSxHQUFBLEdBQUFDLEdBQUEsR0FBQWYsR0FBQSxHQUFBckQsSUFBQSxFQUFBLElBQUFxRSxHQUFBLEdBQUFDLEdBQUEsR0FBQUMsR0FBQSxHQUFBckUsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFoRCxJQUFBLEVBQUEsTUFBQWQsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBbUMsR0FBQSxHQUFBeUIsR0FBQSxHQUFBM0UsSUFBQSxFQUFBLElBQUF1RSxHQUFBLEdBQUFmLEdBQUEsR0FBQXJELElBQUEsRUFBQSxJQUFBcUUsR0FBQSxHQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJFLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBWSxHQUFBLEdBQUFwRSxJQUFBLEVBQUEsTUFBQUEsSUFBQSxFQUFBLE1BQUEzUCxFQUFBLEdBQUFFLEVBQUEsRUFBQStPLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFMLElBQUEsRUFBQSxNQUFBcUQsR0FBQSxHQUFBN0MsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFuVCxFQUFBLEdBQUFFLEVBQUEsRUFBQStPLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBK0QsR0FBQSxHQUFBcEUsSUFBQSxFQUFBLE1BQUFBLElBQUEsRUFBQSxNQUFBMVAsR0FBQSxFQUFBLElBQUFnUCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBZCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUE2RCxHQUFBLEdBQUF6RCxJQUFBLEVBQUEsSUFBQW1GLEdBQUEsR0FBQUwsR0FBQSxHQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQXFFLEdBQUEsR0FBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFyRSxJQUFBLEVBQUEsSUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQWxELElBQUEsRUFBQSxJQUFBMEUsR0FBQSxHQUFBekUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBM1EsR0FBQSxFQUFBLElBQUFnUCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBZ0QsR0FBQSxHQUFBN0MsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFILEdBQUEsR0FBQTRCLEdBQUEsR0FBQXJGLElBQUEsRUFBQSxJQUFBOEUsR0FBQSxHQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQXFFLEdBQUEsR0FBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFyRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUE0QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFILEdBQUEsR0FBQXpELElBQUEsRUFBQSxJQUFBc0YsR0FBQSxHQUFBUixHQUFBLEdBQUFmLEdBQUEsR0FBQXJELElBQUEsRUFBQSxJQUFBcUUsR0FBQSxHQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQTRDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQUgsR0FBQSxHQUFBOEIsR0FBQSxJQUFBekYsSUFBQSxFQUFBLElBQUFnRixHQUFBLElBQUFmLEdBQUEsR0FBQXJELElBQUEsRUFBQSxJQUFBcUUsR0FBQSxJQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJFLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBSCxHQUFBLEdBQUF6RCxJQUFBLEVBQUEsSUFBQXdGLEdBQUEsSUFBQVYsR0FBQSxJQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQXFFLEdBQUEsSUFBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFyRSxJQUFBLEVBQUEsSUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQXVDLEdBQUEsS0FBQTVELElBQUEsRUFBQSxPQUFBQSxJQUFBLEVBQUEsSUFBQVUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBckIsSUFBQSxFQUFBLE1BQUFGLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQU8sSUFBQSxFQUFBLElBQUFHLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBdkIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUF2QixJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQXNFLEdBQUEsSUFBQXJFLElBQUEsRUFBQSxLQUFBRSxJQUFBLEVBQUEsTUFBQWhCLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQU8sSUFBQSxFQUFBLElBQUFJLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLE1BQUFoQixJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBRyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsS0FBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBeEIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBZixJQUFBLEVBQUEsT0FBQUEsSUFBQSxFQUFBLElBQUFHLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUksSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQWQsSUFBQSxFQUFBLE1BQUE3UCxHQUFBLEVBQUEsSUFBQWdQLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUEwRCxHQUFBLEdBQUFqRSxJQUFBLEVBQUEsSUFBQWtFLEdBQUEsR0FBQWpFLElBQUEsRUFBQSxJQUFBa0UsR0FBQSxJQUFBb0IsR0FBQSxJQUFBckYsSUFBQSxFQUFBLE1BQUFKLElBQUEsRUFBQSxJQUFBMEYsR0FBQSxJQUFBaEYsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQWpCLElBQUEsRUFBQSxNQUFBMVAsR0FBQSxFQUFBLElBQUFnUCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBVCxJQUFBLEVBQUEsT0FBQUEsSUFBQSxFQUFBLElBQUFVLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUksSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXJCLElBQUEsRUFBQSxNQUFBeUQsR0FBQSxHQUFBcUIsR0FBQSxJQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQWlGLEdBQUEsSUFBQWhGLElBQUEsRUFBQSxJQUFBb0UsR0FBQSxJQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQXJFLElBQUEsRUFBQSxJQUFBOEMsR0FBQSxHQUFBQyxHQUFBLEdBQUEzQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBdUMsR0FBQSxLQUFBNUQsSUFBQSxFQUFBLE9BQUE0RixHQUFBLElBQUE1RixJQUFBLEVBQUEsSUFBQTZGLEdBQUEsSUFBQS9FLElBQUEsRUFBQSxPQUFBZCxJQUFBLEVBQUEsSUFBQVUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXJCLElBQUEsRUFBQSxJQUFBYyxJQUFBLEVBQUEsTUFBQWQsSUFBQSxFQUFBLElBQUE4RixHQUFBLElBQUFELEdBQUEsSUFBQS9FLElBQUEsRUFBQSxPQUFBZCxJQUFBLEVBQUEsSUFBQVUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQXJCLElBQUEsRUFBQSxJQUFBYyxJQUFBLEVBQUEsTUFBQWhCLElBQUEsRUFBQSxPQUFBQSxJQUFBLEVBQUEsSUFBQVksSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBdkIsSUFBQSxFQUFBLE1BQUFFLElBQUEsRUFBQSxPQUFBQSxJQUFBLEVBQUEsSUFBQVUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBckIsSUFBQSxFQUFBLE1BQUF0UCxHQUFBLEVBQUEsSUFBQWdQLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFYLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQU8sSUFBQSxFQUFBLElBQUFJLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLE1BQUFELElBQUEsRUFBQSxPQUFBNEMsR0FBQSxHQUFBcUIsR0FBQSxJQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUE4QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFsVCxHQUFBLEVBQUEsSUFBQWdQLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFMLElBQUEsRUFBQSxNQUFBQSxJQUFBLEVBQUEsTUFBQXFELEdBQUEsR0FBQXpELElBQUEsRUFBQSxJQUFBK0YsR0FBQSxJQUFBakIsR0FBQSxJQUFBZixHQUFBLEdBQUFyRCxJQUFBLEVBQUEsSUFBQXFFLEdBQUEsSUFBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFyRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUE0QyxHQUFBLEdBQUFDLEdBQUEsR0FBQTNDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUF1QyxHQUFBLEtBQUFsVCxHQUFBLEVBQUEsSUFBQWdQLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUFFLElBQUEsRUFBQSxPQUFBRCxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBVixJQUFBLEVBQUEsTUFBQWpRLEdBQUEsRUFBQSxJQUFBZ1AsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsTUFBQVQsSUFBQSxFQUFBLE9BQUFBLElBQUEsRUFBQSxNQUFBWSxJQUFBLEVBQUEsS0FBQW9GLEdBQUEsTUFBQWhHLElBQUEsRUFBQSxPQUFBQSxJQUFBLEVBQUEsTUFBQUwsSUFBQSxFQUFBLE1BQUFELElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBWCxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFPLElBQUEsRUFBQSxJQUFBSSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxNQUFBZCxJQUFBLEVBQUEsSUFBQWlHLEdBQUEsSUFBQUosR0FBQSxJQUFBL0UsSUFBQSxFQUFBLE9BQUFkLElBQUEsRUFBQSxJQUFBVSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBckIsSUFBQSxFQUFBLElBQUFjLElBQUEsRUFBQSxNQUFBaEIsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBTyxJQUFBLEVBQUEsSUFBQUcsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLE1BQUEzQixJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFFLElBQUEsRUFBQSxJQUFBRSxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUMsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxJQUFBQyxJQUFBLEVBQUEsSUFBQUUsSUFBQSxFQUFBLElBQUFDLElBQUEsRUFBQSxNQUFBRyxJQUFBLEVBQUEsS0FBQUcsSUFBQSxFQUFBLE9BQUFILElBQUEsRUFBQSxLQUFBRyxJQUFBLEVBQUEsT0FBQXJCLElBQUEsRUFBQSxJQUFBQyxJQUFB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LElBQUEsS0FDQTdDLEdBR0Ewc0QsYUFBQSxTQUFBQyxHQUdBLElBQUEsSUFGQTNzRCxFQUFBOUssS0FBQW1xQixRQUVBbG9CLEVBQUEsRUFBQXdZLEVBQUFnOUMsRUFBQW4yRCxPQUFBVyxFQUFBd1ksRUFBQXhZLElBQ0FBLEdBQ0E2SSxFQUFBNkMsSUFBQSxLQUdBN0MsRUFBQTZDLElBQUFxcEQsRUFBQVMsRUFBQXgxRCxHQUFBakMsT0FHQSxPQUFBOEssR0FHQThyRCxjQUFBLFNBQUFhLEdBQ0EsSUFBQTNzRCxFQUFBOUssS0FBQXczRCxhQUFBQyxHQUlBLE9BSEEzc0QsRUFBQXV0QixRQUFBLEtBQ0F2dEIsRUFBQTZDLElBQUEsS0FFQTdDLElBSUE5RyxFQUFBLFFBQUFtekQsRUFDQXB6RCxFQUFBQyxRQUFBQSxFQUFBLGFKbnFKQXJGLEVBQUFDLFVBQUFxSixNQUFBLFlBQ0EsSUFBQXhKLFlBQUE2QixPQzlEQTNCLEVBQUEsb0JBQUFNLElEZ0VBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBDb250cm9sbGVyKCkge1xyXG4gIHZhclxyXG4gICAgcHJldmlldyA9IG5ldyBQcmV2aWV3KCksXHJcbiAgICBzbGlkZXI7XHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RlbmVycygpIHtcclxuICAgICQoZG9jdW1lbnQpXHJcbiAgICAgIC5vbignY2xpY2snLCAnLmpzLWFkZC1hcnJheScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciB2YWx1ZSA9ICQoJy5qcy1pbnNlcnQtYXJyYXknKS52YWwoKTtcclxuICAgICAgICAgIHByZXZpZXcuY3JlYXRlRGF0YShKU09OLnBhcnNlKHZhbHVlKSk7XHJcbiAgICAgICAgICBwcmV2aWV3LnJlbmRlclNsaWRlc1RlbXBsYXRlKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGFsZXJ0KFwi0J7RiNC40LHQutCwISBcIiArIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignY2xpY2snLCAnLmpzLWJhY2stc3RlcC1vbmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcHJldmlldy5yZW5kZXJJbnB1dFRlbXBsYXRlKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignY2hhbmdlJywgJy5qcy1hZGQtY29tbWVudCwgLmpzLWFkZC1saW5rJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHByZXZpZXcuZWRpdERhdGEoKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdjbGljaycsICcuanMtc2F2ZS1zbGlkZXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcHJldmlldy5yZW5kZXJTbGlkZXJUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHNsaWRlciA9IG5ldyBTbGlkZXIoKTtcclxuICAgICAgICAvL3NsaWRlci5hdXRvcGxheVNsaWRlcigpO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJ2NsaWNrJywgJy5qcy1yZW1vdmUtc2xpZGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkID0gcGFyc2VJbnQoJCh0aGlzKS5kYXRhKCdpZCcpKTtcclxuICAgICAgICBwcmV2aWV3LmRlbGV0ZURhdGEoaWQpO1xyXG4gICAgICAgIHByZXZpZXcucmVuZGVyU2xpZGVzVGVtcGxhdGUoKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdjbGljaycsICcuanMtYnRuLXByZXYnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2xpZGVyLm1vdmVTbGlkZSgkKHRoaXMpLCAkKHRoaXMpLmRhdGEoJ2RpcmVjdGlvbicpKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdjbGljaycsICcuanMtYnRuLW5leHQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2xpZGVyLm1vdmVTbGlkZSgkKHRoaXMpLCAkKHRoaXMpLmRhdGEoJ2RpcmVjdGlvbicpKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdjbGljaycsICcuanMtYnVsbGV0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpZCA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgnaWQnKSk7XHJcblxyXG4gICAgICAgIHNsaWRlci5tYW5hZ2VCdWxsZXQoJCh0aGlzKSxpZCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC8qLm9uKCdtb3VzZWVudGVyJywgJy5zbGlkZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaG92ZXInKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdtb3VzZWxlYXZlJywgJy5zbGlkZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaG92ZXInKTtcclxuICAgICAgfSkqL1xyXG4gICAgICAub24oJ2NsaWNrJywgJy5qcy1iYWNrLXN0ZXAtdHdvJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHByZXZpZXcucmVuZGVyU2xpZGVzVGVtcGxhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnaW5pdCcpO1xyXG4gICAgcHJldmlldy5yZW5kZXJJbnB1dFRlbXBsYXRlKCk7XHJcbiAgICBsaXN0ZW5lcnMoKTtcclxuICB9O1xyXG5cclxufVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gIG5ldyBDb250cm9sbGVyKCkuaW5pdCgpO1xyXG5cclxuICB2YXIgcXFxID0gJ1tcXFxyXG4gICAgXCJodHRwczovL2MxLnN0YXRpY2ZsaWNrci5jb20vMy8yNDkxLzM3NTE2NDczNzVfNDY5NWIzNzhkZV96LmpwZ1wiLFxcXHJcbiAgICBcImh0dHBzOi8vYzEuc3RhdGljZmxpY2tyLmNvbS8zLzI0NDMvMzc1MjQyNjE5OF9lYmUwM2ZhNjE1X3ouanBnXCIsXFxcclxuICAgIFwiaHR0cHM6Ly9jMi5zdGF0aWNmbGlja3IuY29tLzIvMTAzMi8zMTc1MDIyMDY2XzU3ZmNlNTA1YmVfei5qcGdcIixcXFxyXG4gICAgXCJodHRwczovL2MxLnN0YXRpY2ZsaWNrci5jb20vMy8yNTI4LzM3NTE2MjQ1NzNfMDg4MTVmODk1MF96LmpwZ1wiXFxcclxuICBdJztcclxuICAkKCcuanMtaW5zZXJ0LWFycmF5JykudmFsKHFxcSk7XHJcbn0pO1xyXG4iLCJmdW5jdGlvbiBQcmV2aWV3KCkge1xyXG4gIHZhclxyXG4gICAgYXJyYXlVUkwgPSBbXSxcclxuICAgIGFycmF5T2JqZWN0cyA9IFtdLFxyXG4gICAgaW5wdXRUZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZSgkKCcjaW5wdXQtdGVtcGxhdGUnKS5odG1sKCkpLFxyXG4gICAgc2xpZGVzVGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoJCgnI3NsaWRlcy10ZW1wbGF0ZScpLmh0bWwoKSksXHJcbiAgICBzbGlkZXJUZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZSgkKCcjc2xpZGVyLXRlbXBsYXRlJykuaHRtbCgpKSxcclxuICAgICRjb250YWluZXIgPSAkKCcuanMtY29udGFpbmVyJyk7XHJcblxyXG4gIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2pzb24nLCBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNvbnRleHQpO1xyXG4gIH0pO1xyXG5cclxuICB0aGlzLmNyZWF0ZURhdGEgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgIGlmIChhcnJheU9iamVjdHMubGVuZ3RoICE9PSAwIHx8IGFycmF5VVJMLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICBhcnJheU9iamVjdHMubGVuZ3RoID0gMDtcclxuICAgICAgYXJyYXlVUkwubGVuZ3RoID0gMDtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGFycmF5VVJMLnB1c2goaXRlbSk7XHJcbiAgICAgICAgYXJyYXlPYmplY3RzLnB1c2goe1xyXG4gICAgICAgICAgaWQ6IGluZGV4LFxyXG4gICAgICAgICAgaW1hZ2U6IGl0ZW0sXHJcbiAgICAgICAgICBsaW5rOiAnJyxcclxuICAgICAgICAgIGNvbW1lbnQ6ICcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxlcnQoJ9Ct0YLQsCDRgdGC0YDRg9C60YLRg9GA0LAg0L3QtSDQvNCw0YHRgdC40LIgVVJMINC60LDRgNGC0LjQvdC+0LouJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5lZGl0RGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGFycmF5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgIHZhciBpdGVtTGluaztcclxuXHJcbiAgICAgIGl0ZW1MaW5rID0gJCgnLmpzLWFkZC1saW5rW2RhdGEtaWQ9XCInICsgaXRlbS5pZCArICdcIl0nKS52YWwoKTtcclxuICAgICAgaXRlbS5jb21tZW50ID0gJCgnLmpzLWFkZC1jb21tZW50W2RhdGEtaWQ9XCInICsgaXRlbS5pZCArICdcIl0nKS52YWwoKTtcclxuICAgICAgaXRlbS5saW5rID0gaXRlbUxpbms7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLmRlbGV0ZURhdGEgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgIGFycmF5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGkpIHtcclxuICAgICAgaWYgKGl0ZW0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgYXJyYXlPYmplY3RzLnNwbGljZShpLCAxKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZW5kZXJJbnB1dFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJGNvbnRhaW5lci5odG1sKGlucHV0VGVtcGxhdGUoe3NsaWRlczogYXJyYXlVUkx9KSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZW5kZXJTbGlkZXNUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICRjb250YWluZXIuaHRtbChzbGlkZXNUZW1wbGF0ZSh7c2xpZGVzOiBhcnJheU9iamVjdHN9KSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZW5kZXJTbGlkZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICRjb250YWluZXIuaHRtbChzbGlkZXJUZW1wbGF0ZSh7c2xpZGVzOiBhcnJheU9iamVjdHN9KSk7XHJcbiAgfTtcclxufVxyXG4iLCJmdW5jdGlvbiBTbGlkZXIoKSB7XHJcbiAgdmFyXHJcbiAgICBzZWxmID0gdGhpcyxcclxuICAgIHBvc2l0aW9uID0gMCxcclxuICAgICRzbGlkZXJMaXN0ID0gJCgnLnNsaWRlci1saXN0JyksXHJcbiAgICAkc2xpZGVySXRlbSA9ICQoJy5zbGlkZXItaXRlbScpLFxyXG4gICAgbWF4V2lkdGggPSAkc2xpZGVySXRlbS53aWR0aCgpICogKCRzbGlkZXJJdGVtLmxlbmd0aCAtIDEpO1xyXG5cclxuICB0aGlzLm1vdmVTbGlkZSA9IGZ1bmN0aW9uKGJ1dHRvbiwgZGlyZWN0aW9uKSB7XHJcbiAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoJy5qcy1zbGlkZXItaXRlbS5hY3RpdmUnKTtcclxuICAgIC8vJChcIiNpZFwiKS5vZmYoJ2NsaWNrJyk7XHJcblxyXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICBwb3NpdGlvbiAtPSAkY3VycmVudFNsaWRlLndpZHRoKCk7XHJcbiAgICAgICRzbGlkZXJMaXN0LmFkZENsYXNzKCdhbmltYXRlZCcpLmNzcyh7bGVmdDogcG9zaXRpb24gKyAncHgnfSk7XHJcbiAgICAgICRjdXJyZW50U2xpZGUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLm5leHQoJy5qcy1zbGlkZXItaXRlbScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgIGlmIChwb3NpdGlvbiA8PSAtbWF4V2lkdGgpIHtcclxuICAgICAgICBwb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgJHNsaWRlckxpc3QucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkJykuY3NzKHtsZWZ0OiBwb3NpdGlvbiArICdweCd9KTtcclxuICAgICAgICAkc2xpZGVyTGlzdC5jaGlsZHJlbigpLmZpcnN0KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHNlbGYubW92ZVNsaWRlKCdyaWdodCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xyXG4gICAgICBwb3NpdGlvbiArPSAkY3VycmVudFNsaWRlLndpZHRoKCk7XHJcbiAgICAgICRzbGlkZXJMaXN0LmFkZENsYXNzKCdhbmltYXRlZCcpLmNzcyh7bGVmdDogcG9zaXRpb24gKyAncHgnfSk7XHJcbiAgICAgICRjdXJyZW50U2xpZGUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLnByZXYoJy5qcy1zbGlkZXItaXRlbScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgIGlmIChwb3NpdGlvbiA+IDApIHtcclxuICAgICAgICBwb3NpdGlvbiA9IC1tYXhXaWR0aDtcclxuICAgICAgICAkc2xpZGVyTGlzdC5yZW1vdmVDbGFzcygnYW5pbWF0ZWQnKS5jc3Moe2xlZnQ6IHBvc2l0aW9uICsgJ3B4J30pO1xyXG4gICAgICAgICRzbGlkZXJMaXN0LmNoaWxkcmVuKCkubGFzdCgpLmFkZENsYXNzKCdhY3RpdmUnKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICBzZWxmLm1vdmVTbGlkZSgnbGVmdCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAkKCcuanMtYnVsbGV0W2RhdGEtaWQ9XCInICsgJCgnLmpzLXNsaWRlci1pdGVtLmFjdGl2ZScpLmRhdGEoJ2lkJykgKyAnXCJdJykuYWRkQ2xhc3MoJ2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gIH07XHJcblxyXG4gIC8qdGhpcy5yZXNldFNsaWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChwb3NpdGlvbiA8PSAtbWF4V2lkdGgpIHtcclxuICAgICAgcG9zaXRpb24gPSAwO1xyXG4gICAgICAkc2xpZGVyTGlzdC5yZW1vdmVDbGFzcygnYW5pbWF0ZWQnKS5jc3Moe2xlZnQ6IHBvc2l0aW9uICsgJ3B4J30pO1xyXG4gICAgICAkc2xpZGVyTGlzdC5jaGlsZHJlbigpLmZpcnN0KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAkc2xpZGVyTGlzdC5vZmYoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLnJlc2V0U2xpZGVyKTtcclxuICAgIH1cclxuICB9OyovXHJcblxyXG4gIHRoaXMubWFuYWdlQnVsbGV0ID0gZnVuY3Rpb24oJHRoaXMsaWQpIHtcclxuICAgIHZhclxyXG4gICAgICAkc2xpZGUgPSAkKCcuanMtc2xpZGVyLWl0ZW1bZGF0YS1pZD1cIicgKyBpZCArICdcIl0nKSxcclxuICAgICAgb2Zmc2V0ID0gaWQgKiAkc2xpZGUud2lkdGgoKTtcclxuXHJcbiAgICAkc2xpZGVyTGlzdC5hZGRDbGFzcygnYW5pbWF0ZWQnKS5jc3Moe2xlZnQ6ICctJyArIG9mZnNldCArICdweCd9KTtcclxuICAgICRzbGlkZS5hZGRDbGFzcygnYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkdGhpcy5hZGRDbGFzcygnYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5hdXRvcGxheVNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuICAgICAgaWYgKCEkKCcuc2xpZGVyJykuaGFzQ2xhc3MoJ2hvdmVyJykpIHtcclxuICAgICAgICBzZWxmLm1vdmVTbGlkZSgncmlnaHQnKTtcclxuICAgICAgfVxyXG4gICAgfSwgNzAwMClcclxuICB9XHJcblxyXG59XHJcbiIsIi8qIVxyXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxyXG4gKiBodHRwczovL2pxdWVyeS5jb20vXHJcbiAqXHJcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xyXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcclxuICovXHJcbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxyXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cclxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXHJcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmphdmFzY3JpcHRzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cclxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXHJcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XHJcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XHJcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xyXG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XHJcblx0XHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xyXG5cdH1cclxuXHJcbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XHJcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xyXG5cclxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXHJcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxyXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxyXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgYXJyID0gW107XHJcblxyXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcblxyXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XHJcblxyXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XHJcblxyXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcclxuXHJcbnZhciBwdXNoID0gYXJyLnB1c2g7XHJcblxyXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xyXG5cclxudmFyIGNsYXNzMnR5cGUgPSB7fTtcclxuXHJcbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XHJcblxyXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xyXG5cclxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcclxuXHJcbnZhciBzdXBwb3J0ID0ge307XHJcblxyXG5cclxuXHJcblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xyXG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xyXG5cclxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcclxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcclxuXHR9XHJcbi8qIGdsb2JhbCBTeW1ib2wgKi9cclxuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcclxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcclxuXHJcblxyXG5cclxudmFyXHJcblx0dmVyc2lvbiA9IFwiMy4yLjFcIixcclxuXHJcblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcclxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXHJcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxyXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcclxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcclxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcclxuXHJcblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXHJcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcclxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXHJcblxyXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcclxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xyXG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xyXG5cclxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXHJcblx0anF1ZXJ5OiB2ZXJzaW9uLFxyXG5cclxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxyXG5cclxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcclxuXHRsZW5ndGg6IDAsXHJcblxyXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXHJcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcclxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XHJcblxyXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxyXG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XHJcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcclxuXHR9LFxyXG5cclxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXHJcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXHJcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XHJcblxyXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcclxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcclxuXHJcblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxyXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xyXG5cdH0sXHJcblxyXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcclxuXHRcdH0gKSApO1xyXG5cdH0sXHJcblxyXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XHJcblx0fSxcclxuXHJcblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcclxuXHR9LFxyXG5cclxuXHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xyXG5cdH0sXHJcblxyXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcclxuXHR9LFxyXG5cclxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XHJcblx0fSxcclxuXHJcblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxyXG5cdHB1c2g6IHB1c2gsXHJcblx0c29ydDogYXJyLnNvcnQsXHJcblx0c3BsaWNlOiBhcnIuc3BsaWNlXHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxyXG5cdFx0aSA9IDEsXHJcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxyXG5cdFx0ZGVlcCA9IGZhbHNlO1xyXG5cclxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGRlZXAgPSB0YXJnZXQ7XHJcblxyXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XHJcblx0XHRpKys7XHJcblx0fVxyXG5cclxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcclxuXHRcdHRhcmdldCA9IHt9O1xyXG5cdH1cclxuXHJcblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXHJcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XHJcblx0XHR0YXJnZXQgPSB0aGlzO1xyXG5cdFx0aS0tO1xyXG5cdH1cclxuXHJcblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblxyXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XHJcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcclxuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXHJcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xyXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxyXG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcclxuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XHJcblx0cmV0dXJuIHRhcmdldDtcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXHJcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcclxuXHJcblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcclxuXHRpc1JlYWR5OiB0cnVlLFxyXG5cclxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcclxuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XHJcblx0fSxcclxuXHJcblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcclxuXHJcblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcclxuXHR9LFxyXG5cclxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XHJcblx0fSxcclxuXHJcblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXHJcblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXHJcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxyXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XHJcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxyXG5cclxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXHJcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcclxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXHJcblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcclxuXHR9LFxyXG5cclxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0dmFyIHByb3RvLCBDdG9yO1xyXG5cclxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xyXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXHJcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcclxuXHJcblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXHJcblx0XHRpZiAoICFwcm90byApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cclxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xyXG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xyXG5cdH0sXHJcblxyXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxyXG5cdFx0dmFyIG5hbWU7XHJcblxyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcclxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XHJcblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdHR5cGVvZiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcclxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcclxuXHRcdERPTUV2YWwoIGNvZGUgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXHJcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xyXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcclxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XHJcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcclxuXHR9LFxyXG5cclxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcclxuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xyXG5cclxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xyXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxyXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XHJcblx0XHRcdFwiXCIgOlxyXG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcclxuXHR9LFxyXG5cclxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xyXG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcclxuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxyXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XHJcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XHJcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcclxuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcclxuXHRcdFx0aiA9IDAsXHJcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XHJcblxyXG5cdFx0cmV0dXJuIGZpcnN0O1xyXG5cdH0sXHJcblxyXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcclxuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXHJcblx0XHRcdG1hdGNoZXMgPSBbXSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcclxuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXHJcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XHJcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcclxuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVzO1xyXG5cdH0sXHJcblxyXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xyXG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRyZXQgPSBbXTtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcclxuXHRndWlkOiAxLFxyXG5cclxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHQvLyBhcmd1bWVudHMuXHJcblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcclxuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XHJcblx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0Zm4gPSB0bXA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaW11bGF0ZWQgYmluZFxyXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxyXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XHJcblxyXG5cdFx0cmV0dXJuIHByb3h5O1xyXG5cdH0sXHJcblxyXG5cdG5vdzogRGF0ZS5ub3csXHJcblxyXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0c3VwcG9ydDogc3VwcG9ydFxyXG59ICk7XHJcblxyXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcclxufVxyXG5cclxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXHJcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXHJcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG59ICk7XHJcblxyXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xyXG5cclxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXHJcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxyXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xyXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcclxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcclxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XHJcblxyXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxyXG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcclxufVxyXG52YXIgU2l6emxlID1cclxuLyohXHJcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xyXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNi0wOC0wOFxyXG4gKi9cclxuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG52YXIgaSxcclxuXHRzdXBwb3J0LFxyXG5cdEV4cHIsXHJcblx0Z2V0VGV4dCxcclxuXHRpc1hNTCxcclxuXHR0b2tlbml6ZSxcclxuXHRjb21waWxlLFxyXG5cdHNlbGVjdCxcclxuXHRvdXRlcm1vc3RDb250ZXh0LFxyXG5cdHNvcnRJbnB1dCxcclxuXHRoYXNEdXBsaWNhdGUsXHJcblxyXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcclxuXHRzZXREb2N1bWVudCxcclxuXHRkb2N1bWVudCxcclxuXHRkb2NFbGVtLFxyXG5cdGRvY3VtZW50SXNIVE1MLFxyXG5cdHJidWdneVFTQSxcclxuXHRyYnVnZ3lNYXRjaGVzLFxyXG5cdG1hdGNoZXMsXHJcblx0Y29udGFpbnMsXHJcblxyXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcclxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxyXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHRkaXJydW5zID0gMCxcclxuXHRkb25lID0gMCxcclxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH0sXHJcblxyXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcclxuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxyXG5cdGFyciA9IFtdLFxyXG5cdHBvcCA9IGFyci5wb3AsXHJcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcclxuXHRwdXNoID0gYXJyLnB1c2gsXHJcblx0c2xpY2UgPSBhcnIuc2xpY2UsXHJcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXHJcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxyXG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fSxcclxuXHJcblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXHJcblxyXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2VcclxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxyXG5cclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxyXG5cclxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcclxuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcclxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxyXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XCIqXFxcXF1cIixcclxuXHJcblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXHJcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxyXG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXHJcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcclxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxyXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xyXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxyXG5cdFx0XCIuKlwiICtcclxuXHRcdFwiKVxcXFwpfClcIixcclxuXHJcblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxyXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcclxuXHJcblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblxyXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXHJcblxyXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXHJcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxyXG5cclxuXHRtYXRjaEV4cHIgPSB7XHJcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcclxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcclxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxyXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXHJcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcclxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxyXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxyXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcclxuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXHJcblx0fSxcclxuXHJcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcclxuXHJcblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXHJcblxyXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xyXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcclxuXHJcblx0cnNpYmxpbmcgPSAvWyt+XS8sXHJcblxyXG5cdC8vIENTUyBlc2NhcGVzXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xyXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXHJcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xyXG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcclxuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XHJcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcclxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cclxuXHRcdFx0ZXNjYXBlZCA6XHJcblx0XHRcdGhpZ2ggPCAwID9cclxuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XHJcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XHJcblx0fSxcclxuXHJcblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cclxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcclxuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXHJcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XHJcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xyXG5cclxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXHJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xyXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcclxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xyXG5cdH0sXHJcblxyXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcclxuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxyXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxyXG5cdC8vIGVycm9yIGluIElFXHJcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0RG9jdW1lbnQoKTtcclxuXHR9LFxyXG5cclxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcclxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XHJcblx0XHR9LFxyXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cclxuXHQpO1xyXG5cclxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcclxudHJ5IHtcclxuXHRwdXNoLmFwcGx5KFxyXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxyXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcclxuXHQpO1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxyXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XHJcbn0gY2F0Y2ggKCBlICkge1xyXG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cclxuXHJcblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcclxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3RvcixcclxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcclxuXHJcblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcclxuXHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XHJcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XHJcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0fVxyXG5cclxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXHJcblx0aWYgKCAhc2VlZCApIHtcclxuXHJcblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcclxuXHJcblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXHJcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcclxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3JcclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXHJcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcclxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcclxuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXHJcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxyXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3JcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxyXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcclxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxyXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcclxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cclxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcclxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXHJcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XHJcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xyXG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XHJcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXHJcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcclxuXHRcdFx0XHRcdFx0Y29udGV4dDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxyXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcclxuXHRcdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQWxsIG90aGVyc1xyXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXHJcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcclxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXHJcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcclxuXHR2YXIga2V5cyA9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcclxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXHJcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XHJcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xyXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcclxuICovXHJcbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XHJcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XHJcblx0cmV0dXJuIGZuO1xyXG59XHJcblxyXG4vKipcclxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcclxuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XHJcblxyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSBmaW5hbGx5IHtcclxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcclxuXHRcdGVsID0gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xyXG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXHJcblx0XHRpID0gYXJyLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcclxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXHJcbiAqL1xyXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XHJcblx0dmFyIGN1ciA9IGIgJiYgYSxcclxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xyXG5cclxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcclxuXHRpZiAoIGRpZmYgKSB7XHJcblx0XHRyZXR1cm4gZGlmZjtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXHJcblx0aWYgKCBjdXIgKSB7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xyXG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBhID8gMSA6IC0xO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcclxuXHJcblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXHJcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXHJcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxyXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xyXG5cclxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxyXG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxyXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXHJcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXHJcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcclxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXHJcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cclxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XHJcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcclxuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcclxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XHJcblxyXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcclxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcclxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xyXG5cclxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cclxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxyXG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXHJcblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xyXG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XHJcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xyXG5cdFx0XHR2YXIgaixcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XHJcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcclxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcclxuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xyXG59XHJcblxyXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxyXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXHJcbiAqL1xyXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3RcclxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcclxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcclxuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqL1xyXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xyXG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXHJcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XHJcblxyXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXHJcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcclxuXHRcdHJldHVybiBkb2N1bWVudDtcclxuXHR9XHJcblxyXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXHJcblx0ZG9jdW1lbnQgPSBkb2M7XHJcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxyXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcclxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcclxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXHJcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxyXG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogQXR0cmlidXRlc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xyXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxyXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XHJcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcclxuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xyXG5cdH0pO1xyXG5cclxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XHJcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xyXG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXHJcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXHJcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XHJcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcclxuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xyXG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xyXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcclxuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XHJcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XHJcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcclxuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXHJcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXHJcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcclxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcclxuXHRcdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xyXG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8vIFRhZ1xyXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cclxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdHRtcCA9IFtdLFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cclxuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXHJcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBDbGFzc1xyXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3JcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcclxuXHJcblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcclxuXHRyYnVnZ3lNYXRjaGVzID0gW107XHJcblxyXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXHJcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXHJcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxyXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXHJcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxyXG5cdHJidWdneVFTQSA9IFtdO1xyXG5cclxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcclxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxyXG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcclxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxyXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcclxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXHJcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxyXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xyXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xyXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcclxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxyXG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcclxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXHJcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxyXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXHJcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xyXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXHJcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcclxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xyXG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xyXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXHJcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxyXG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcclxuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcclxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcclxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XHJcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xyXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcclxuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcclxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xyXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3JcclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcclxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XHJcblxyXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXHJcblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcclxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xyXG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xyXG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XHJcblxyXG5cdC8qIENvbnRhaW5zXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcclxuXHJcblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXHJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXHJcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcclxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXHJcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XHJcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxyXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cclxuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcclxuXHRcdFx0KSk7XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRpZiAoIGIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9O1xyXG5cclxuXHQvKiBTb3J0aW5nXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXHJcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblxyXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxyXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xyXG5cdFx0aWYgKCBjb21wYXJlICkge1xyXG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XHJcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xyXG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXHJcblx0XHRcdDE7XHJcblxyXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XHJcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcclxuXHJcblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxyXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xyXG5cdH0gOlxyXG5cdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxyXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXHJcblx0XHRcdGFwID0gWyBhIF0sXHJcblx0XHRcdGJwID0gWyBiIF07XHJcblxyXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcclxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XHJcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcclxuXHRcdFx0XHRhdXAgPyAtMSA6XHJcblx0XHRcdFx0YnVwID8gMSA6XHJcblx0XHRcdFx0c29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xyXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XHJcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxyXG5cdFx0Y3VyID0gYTtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblx0XHRjdXIgPSBiO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxyXG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XHJcblx0XHRcdGkrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaSA/XHJcblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxyXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxyXG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxyXG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XHJcblx0XHRcdDA7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIGRvY3VtZW50O1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XHJcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcclxufTtcclxuXHJcblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdH1cclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXHJcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xyXG5cclxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcclxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcclxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XHJcblxyXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcclxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XHJcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xyXG59O1xyXG5cclxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XHJcbn07XHJcblxyXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxyXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXHJcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XHJcblx0XHRcdHVuZGVmaW5lZDtcclxuXHJcblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdHZhbCA6XHJcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XHJcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxufTtcclxuXHJcblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xyXG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xyXG59O1xyXG5cclxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXHJcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXHJcbiAqL1xyXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxyXG5cdFx0aiA9IDAsXHJcblx0XHRpID0gMDtcclxuXHJcblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxyXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XHJcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XHJcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcclxuXHJcblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XHJcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XHJcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcclxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcclxuXHRzb3J0SW5wdXQgPSBudWxsO1xyXG5cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xyXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cclxuICovXHJcbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHZhciBub2RlLFxyXG5cdFx0cmV0ID0gXCJcIixcclxuXHRcdGkgPSAwLFxyXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRpZiAoICFub2RlVHlwZSApIHtcclxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XHJcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcclxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcclxuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XHJcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXHJcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xyXG5cdH1cclxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xyXG5cclxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcclxuXHRjYWNoZUxlbmd0aDogNTAsXHJcblxyXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxyXG5cclxuXHRtYXRjaDogbWF0Y2hFeHByLFxyXG5cclxuXHRhdHRySGFuZGxlOiB7fSxcclxuXHJcblx0ZmluZDoge30sXHJcblxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxyXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cclxuXHR9LFxyXG5cclxuXHRwcmVGaWx0ZXI6IHtcclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXHJcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcclxuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cclxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcclxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcclxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcclxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHQqL1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XHJcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcclxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxyXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcclxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xyXG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcclxuXHJcblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHR2YXIgZXhjZXNzLFxyXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xyXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxyXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxyXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxyXG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZmlsdGVyOiB7XHJcblxyXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xyXG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcclxuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xyXG5cclxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcclxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXHJcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcclxuXHRcdFx0XHRcdGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XHJcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXHJcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxyXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xyXG5cclxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0fSA6XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcclxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxyXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcclxuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcclxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxyXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xyXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xyXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXHJcblx0XHRcdHZhciBhcmdzLFxyXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXHJcblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcclxuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXHJcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcclxuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkeCxcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZuO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHBzZXVkb3M6IHtcclxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xyXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcclxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcclxuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXHJcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxyXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcclxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cclxuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXHJcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XHJcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXHJcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxyXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcclxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXHJcblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cclxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcclxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cclxuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xyXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXHJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBNaXNjZWxsYW5lb3VzXHJcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXHJcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXHJcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXHJcblxyXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XHJcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcclxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBDb250ZW50c1xyXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cclxuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxyXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxyXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXHJcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgYXR0cjtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXHJcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcclxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxyXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gWyAwIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMTtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pXHJcblx0fVxyXG59O1xyXG5cclxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XHJcblxyXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xyXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XHJcbn1cclxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xyXG59XHJcblxyXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcclxuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XHJcbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xyXG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xyXG5cclxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcclxuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcclxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXHJcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggY2FjaGVkICkge1xyXG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcclxuXHR9XHJcblxyXG5cdHNvRmFyID0gc2VsZWN0b3I7XHJcblx0Z3JvdXBzID0gW107XHJcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xyXG5cclxuXHR3aGlsZSAoIHNvRmFyICkge1xyXG5cclxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cclxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRpZiAoIG1hdGNoICkge1xyXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXHJcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XHJcblx0XHRcdH1cclxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRtYXRjaGVkID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gQ29tYmluYXRvcnNcclxuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxyXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpbHRlcnNcclxuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XHJcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcclxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFtYXRjaGVkICkge1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xyXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xyXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xyXG5cdHJldHVybiBwYXJzZU9ubHkgP1xyXG5cdFx0c29GYXIubGVuZ3RoIDpcclxuXHRcdHNvRmFyID9cclxuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcclxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xyXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xyXG5cdH1cclxuXHRyZXR1cm4gc2VsZWN0b3I7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XHJcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxyXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcclxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxyXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcclxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xyXG5cclxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XHJcblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcclxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcclxuXHJcblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xyXG5cdFx0XHRpZiAoIHhtbCApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcclxuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxyXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcclxuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gOlxyXG5cdFx0bWF0Y2hlcnNbMF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxyXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XHJcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xyXG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcclxuXHR9XHJcblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XHJcblx0fVxyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxyXG5cdFx0XHRwcmVNYXAgPSBbXSxcclxuXHRcdFx0cG9zdE1hcCA9IFtdLFxyXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcclxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxyXG5cclxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXHJcblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRlbGVtcyxcclxuXHJcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxyXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cclxuXHJcblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdFtdIDpcclxuXHJcblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcclxuXHRcdFx0XHRcdHJlc3VsdHMgOlxyXG5cdFx0XHRcdG1hdGNoZXJJbjtcclxuXHJcblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xyXG5cdFx0aWYgKCBtYXRjaGVyICkge1xyXG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcclxuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XHJcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcclxuXHJcblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cclxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xyXG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xyXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xyXG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxyXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXHJcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXHJcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcclxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cclxuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0XHJcblx0XHRcdCk7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcclxuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXHJcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxyXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxyXG5cclxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXHJcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcclxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xyXG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XHJcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XHJcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fSBdO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcclxuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcclxuXHRcdFx0XHRqID0gKytpO1xyXG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXHJcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcclxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXHJcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXHJcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXHJcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcclxuXHRcdFx0XHRcdG1hdGNoZXIsXHJcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xyXG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcclxuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXHJcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcclxuXHRcdFx0XHRpID0gXCIwXCIsXHJcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcclxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXHJcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXHJcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxyXG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXHJcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcclxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxyXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcclxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcclxuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXHJcblx0XHRcdFx0aWYgKCBieVNldCApIHtcclxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcclxuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxyXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxyXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcclxuXHJcblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xyXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXHJcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxyXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxyXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XHJcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xyXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxyXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcclxuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcclxuXHJcblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXHJcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXHJcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcclxuXHJcblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIGJ5U2V0ID9cclxuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxyXG5cdFx0c3VwZXJNYXRjaGVyO1xyXG59XHJcblxyXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xyXG5cdHZhciBpLFxyXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoICFjYWNoZWQgKSB7XHJcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcclxuXHRcdGlmICggIW1hdGNoICkge1xyXG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0fVxyXG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcclxuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xyXG5cclxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxyXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxyXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cclxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcclxuICovXHJcbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXHJcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxyXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XHJcblxyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxyXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcclxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcclxuXHJcblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxyXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xyXG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxyXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcclxuXHJcblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcclxuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcclxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XHJcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xyXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXHJcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XHJcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXHJcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXHJcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXHJcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0XHRcdFx0KSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XHJcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcclxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXHJcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxyXG5cdFx0c2VlZCxcclxuXHRcdGNvbnRleHQsXHJcblx0XHQhZG9jdW1lbnRJc0hUTUwsXHJcblx0XHRyZXN1bHRzLFxyXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdCk7XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xyXG5cclxuLy8gU29ydCBzdGFiaWxpdHlcclxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xyXG5cclxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xyXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXHJcbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XHJcbnNldERvY3VtZW50KCk7XHJcblxyXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxyXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcclxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xyXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxyXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xyXG59KTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFPDhcclxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcclxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcclxuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcclxuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcclxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xyXG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcclxuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xyXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xyXG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgdmFsO1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxucmV0dXJuIFNpenpsZTtcclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcblxyXG5cclxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XHJcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcclxuXHJcbi8vIERlcHJlY2F0ZWRcclxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xyXG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcclxualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xyXG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XHJcblxyXG5cclxuXHJcblxyXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XHJcblx0dmFyIG1hdGNoZWQgPSBbXSxcclxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcclxuXHJcblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XHJcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBtYXRjaGVkO1xyXG59O1xyXG5cclxuXHJcbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xyXG5cdHZhciBtYXRjaGVkID0gW107XHJcblxyXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcclxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbWF0Y2hlZDtcclxufTtcclxuXHJcblxyXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XHJcblxyXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxufTtcclxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XHJcblxyXG5cclxuXHJcbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XHJcblxyXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxyXG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBTaW5nbGUgZWxlbWVudFxyXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcclxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXHJcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XHJcblx0fVxyXG5cclxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXHJcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xyXG5cdH0gKTtcclxufVxyXG5cclxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xyXG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcclxuXHJcblx0aWYgKCBub3QgKSB7XHJcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xyXG5cdH1cclxuXHJcblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xyXG5cdH0gKSApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBpLCByZXQsXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRzZWxmID0gdGhpcztcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xyXG5cclxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcclxuXHR9LFxyXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XHJcblx0fSxcclxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XHJcblx0fSxcclxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuICEhd2lubm93KFxyXG5cdFx0XHR0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxyXG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXHJcblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XHJcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXHJcblx0XHRcdGZhbHNlXHJcblx0XHQpLmxlbmd0aDtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxyXG5cclxuXHJcbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxyXG52YXIgcm9vdGpRdWVyeSxcclxuXHJcblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcclxuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXHJcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXHJcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxyXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcclxuXHJcblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xyXG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xyXG5cclxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxyXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxyXG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxyXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcclxuXHJcblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxyXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXHJcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXHJcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXHJcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxyXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcclxuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcclxuXHJcblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXHJcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXHJcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXHJcblx0XHRcdFx0XHRcdHRydWVcclxuXHRcdFx0XHRcdCkgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXHJcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXHJcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxyXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XHJcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xyXG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcclxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxyXG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XHJcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xyXG5cdH07XHJcblxyXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXHJcbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxyXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xyXG5cclxuXHJcbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcclxuXHJcblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcclxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xyXG5cdFx0Y2hpbGRyZW46IHRydWUsXHJcblx0XHRjb250ZW50czogdHJ1ZSxcclxuXHRcdG5leHQ6IHRydWUsXHJcblx0XHRwcmV2OiB0cnVlXHJcblx0fTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XHJcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXHJcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xyXG5cdFx0dmFyIGN1cixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xyXG5cclxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcclxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xyXG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHJcblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxyXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcclxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcclxuXHRcdGlmICggIWVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxyXG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcclxuXHJcblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxyXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cclxuXHRcdCk7XHJcblx0fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXHJcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcclxuXHRcdFx0KVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xyXG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXHJcblx0XHQpO1xyXG5cdH1cclxufSApO1xyXG5cclxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XHJcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxyXG5cdHJldHVybiBjdXI7XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xyXG5cdH0sXHJcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xyXG5cdH0sXHJcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xyXG5cdH0sXHJcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcclxuXHR9LFxyXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxyXG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxyXG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXHJcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XHJcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcclxuXHR9XHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xyXG5cclxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xyXG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXHJcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xyXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcclxuXHR9O1xyXG59ICk7XHJcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcclxuXHJcblxyXG5cclxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcclxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcclxuXHR2YXIgb2JqZWN0ID0ge307XHJcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XHJcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XHJcblx0fSApO1xyXG5cdHJldHVybiBvYmplY3Q7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxyXG4gKlxyXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xyXG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcclxuICpcclxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcclxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxyXG4gKlxyXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxyXG4gKlxyXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxyXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXHJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxyXG4gKlxyXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcclxuICpcclxuICovXHJcbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHJcblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxyXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcclxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcclxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XHJcblxyXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXHJcblx0XHRmaXJpbmcsXHJcblxyXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcclxuXHRcdG1lbW9yeSxcclxuXHJcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxyXG5cdFx0ZmlyZWQsXHJcblxyXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xyXG5cdFx0bG9ja2VkLFxyXG5cclxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XHJcblx0XHRsaXN0ID0gW10sXHJcblxyXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcclxuXHRcdHF1ZXVlID0gW10sXHJcblxyXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXHJcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxyXG5cclxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXHJcblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcclxuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcclxuXHJcblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxyXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXHJcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcclxuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XHJcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxyXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcclxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XHJcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xyXG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXHJcblx0XHRcdGlmICggbG9ja2VkICkge1xyXG5cclxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXHJcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gW107XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XHJcblx0XHRzZWxmID0ge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxyXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdHZhciBpbmRleDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xyXG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxyXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cclxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuID9cclxuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxyXG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcclxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xyXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xyXG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxyXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxyXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XHJcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XHJcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xyXG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XHJcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xyXG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2VcclxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gc2VsZjtcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcclxuXHRyZXR1cm4gdjtcclxufVxyXG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcclxuXHR0aHJvdyBleDtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcclxuXHR2YXIgbWV0aG9kO1xyXG5cclxuXHR0cnkge1xyXG5cclxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3JcclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XHJcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcclxuXHJcblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcclxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xyXG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xyXG5cclxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XHJcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcclxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcclxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xyXG5cdFx0fVxyXG5cclxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcclxuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXHJcblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cclxuXHR9IGNhdGNoICggdmFsdWUgKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxyXG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxyXG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xyXG5cdH1cclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XHJcblx0XHR2YXIgdHVwbGVzID0gW1xyXG5cclxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxyXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cclxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxyXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXHJcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxyXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxyXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXHJcblx0XHRcdF0sXHJcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXHJcblx0XHRcdHByb21pc2UgPSB7XHJcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxyXG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcclxuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxyXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcclxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcclxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xyXG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcclxuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcclxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXHJcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXHJcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxyXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxyXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcclxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcclxuXHRcdFx0XHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXHJcblx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcclxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcclxuXHRcdFx0XHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcclxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcclxuXHRcdFx0XHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxyXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3RcclxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcclxuXHJcblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXHJcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcclxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XHJcblxyXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcclxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcclxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcclxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcclxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcclxuXHRcdFx0XHRsaXN0LmFkZChcclxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcclxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcclxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcclxuXHRcdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcclxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxyXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcclxuXHJcblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xyXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxyXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxyXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXHJcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcclxuXHJcblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxyXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxyXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXHJcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxyXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xyXG5cdFx0fSApO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxyXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xyXG5cclxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcclxuXHRcdGlmICggZnVuYyApIHtcclxuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgZG9uZSFcclxuXHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHR9LFxyXG5cclxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XHJcblx0XHR2YXJcclxuXHJcblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xyXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXHJcblx0XHRcdGkgPSByZW1haW5pbmcsXHJcblxyXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXHJcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXHJcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHJcblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcclxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblxyXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XHJcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xyXG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xyXG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xyXG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXHJcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xyXG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXHJcblx0XHRcdFx0IXJlbWFpbmluZyApO1xyXG5cclxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxyXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxyXG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXHJcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxyXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcclxuXHJcbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxyXG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXHJcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcclxuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcclxuXHR9XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XHJcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhyb3cgZXJyb3I7XHJcblx0fSApO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHJcblx0cmVhZHlMaXN0XHJcblx0XHQudGhlbiggZm4gKVxyXG5cclxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXHJcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcclxuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cclxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xyXG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XHJcblx0XHR9ICk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxyXG5cdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXHJcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcclxuXHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XHJcblxyXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxyXG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcclxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcclxuXHJcblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxyXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXHJcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xyXG5cclxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcclxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xyXG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcclxuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xyXG5cdGpRdWVyeS5yZWFkeSgpO1xyXG59XHJcblxyXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxyXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cclxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxyXG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cclxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcclxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcclxuXHJcblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XHJcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xyXG5cclxufSBlbHNlIHtcclxuXHJcblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcclxuXHJcblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cclxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXHJcbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xyXG5cclxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXHJcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XHJcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xyXG5cdFx0fVxyXG5cclxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cclxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyYXcgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYnVsayApIHtcclxuXHJcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxyXG5cdFx0XHRpZiAoIHJhdyApIHtcclxuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcclxuXHRcdFx0XHRmbiA9IG51bGw7XHJcblxyXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YnVsayA9IGZuO1xyXG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmbiApIHtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0Zm4oXHJcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XHJcblx0XHRcdFx0XHR2YWx1ZSA6XHJcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICggY2hhaW5hYmxlICkge1xyXG5cdFx0cmV0dXJuIGVsZW1zO1xyXG5cdH1cclxuXHJcblx0Ly8gR2V0c1xyXG5cdGlmICggYnVsayApIHtcclxuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xyXG59O1xyXG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHJcblx0Ly8gQWNjZXB0cyBvbmx5OlxyXG5cdC8vICAtIE5vZGVcclxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXHJcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcclxuXHQvLyAgLSBPYmplY3RcclxuXHQvLyAgICAtIEFueVxyXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIERhdGEoKSB7XHJcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xyXG59XHJcblxyXG5EYXRhLnVpZCA9IDE7XHJcblxyXG5EYXRhLnByb3RvdHlwZSA9IHtcclxuXHJcblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHJcblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcclxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHJcblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcclxuXHRcdGlmICggIXZhbHVlICkge1xyXG5cdFx0XHR2YWx1ZSA9IHt9O1xyXG5cclxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXHJcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXHJcblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxyXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxyXG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XHJcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcclxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xyXG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXHJcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB2YWx1ZTtcclxuXHR9LFxyXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcclxuXHRcdHZhciBwcm9wLFxyXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xyXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XHJcblxyXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3NcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxyXG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XHJcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2FjaGU7XHJcblx0fSxcclxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xyXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XHJcblxyXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXHJcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XHJcblx0fSxcclxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcclxuXHJcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxyXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXHJcblx0XHQvL1xyXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXHJcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxyXG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxyXG5cdFx0Ly9cclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcclxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xyXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcclxuXHRcdC8vXHJcblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcclxuXHJcblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcclxuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxyXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcclxuXHR9LFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XHJcblx0XHR2YXIgaSxcclxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblxyXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXHJcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXHJcblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXHJcblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2VcclxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xyXG5cdFx0XHRcdFx0WyBrZXkgXSA6XHJcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxyXG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xyXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXHJcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcclxuXHR9XHJcbn07XHJcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XHJcblxyXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xyXG5cclxuXHJcblxyXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxyXG4vL1xyXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxyXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXHJcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cclxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXHJcbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXHJcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcclxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxyXG5cclxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcclxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XHJcblxyXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xyXG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcclxuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcclxuXHRcdHJldHVybiArZGF0YTtcclxuXHR9XHJcblxyXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcclxuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxyXG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxyXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHt9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcclxuXHR9LFxyXG5cclxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXHJcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXHJcblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xyXG5cdH0sXHJcblxyXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcclxuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcclxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXHJcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcclxuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGRhdGE7XHJcblxyXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxyXG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxyXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXHJcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXHJcblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXHJcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcclxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cclxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXHJcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcclxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgcXVldWU7XHJcblxyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xyXG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxyXG5cdFx0XHRpZiAoIGRhdGEgKSB7XHJcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xyXG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxyXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0c3RhcnRMZW5ndGgtLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xyXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xyXG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxyXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XHJcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xyXG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcclxuXHRcdFx0fSApXHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIHNldHRlciA9IDI7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZGF0YSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSBcImZ4XCI7XHJcblx0XHRcdHNldHRlci0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHRoaXMgOlxyXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xyXG5cclxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxyXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0fSxcclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxyXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxyXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XHJcblx0XHR2YXIgdG1wLFxyXG5cdFx0XHRjb3VudCA9IDEsXHJcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcclxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XHJcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRvYmogPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xyXG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XHJcblx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJlc29sdmUoKTtcclxuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcclxuXHR9XHJcbn0gKTtcclxudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xyXG5cclxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xyXG5cclxuXHJcbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcclxuXHJcbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XHJcblxyXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XHJcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcclxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xyXG5cclxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXHJcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxyXG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcclxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcclxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXHJcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cclxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxyXG5cclxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XHJcblx0fTtcclxuXHJcbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdHZhciByZXQsIG5hbWUsXHJcblx0XHRvbGQgPSB7fTtcclxuXHJcblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xyXG5cclxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xyXG5cdHZhciBhZGp1c3RlZCxcclxuXHRcdHNjYWxlID0gMSxcclxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcclxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cclxuXHRcdFx0ZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xyXG5cdFx0XHR9IDpcclxuXHRcdFx0ZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcclxuXHRcdFx0fSxcclxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcclxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcclxuXHJcblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xyXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXHJcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XHJcblxyXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XHJcblxyXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xyXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cclxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xyXG5cclxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XHJcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcclxuXHJcblx0XHRkbyB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cclxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XHJcblxyXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XHJcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XHJcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcclxuXHJcblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxyXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cclxuXHRcdH0gd2hpbGUgKFxyXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcclxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xyXG5cclxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxyXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xyXG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxyXG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xyXG5cdFx0aWYgKCB0d2VlbiApIHtcclxuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XHJcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcclxuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBhZGp1c3RlZDtcclxufVxyXG5cclxuXHJcbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xyXG5cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XHJcblx0dmFyIHRlbXAsXHJcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXHJcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXHJcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XHJcblxyXG5cdGlmICggZGlzcGxheSApIHtcclxuXHRcdHJldHVybiBkaXNwbGF5O1xyXG5cdH1cclxuXHJcblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xyXG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xyXG5cclxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcclxuXHJcblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcclxuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblx0fVxyXG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcclxuXHR2YXIgZGlzcGxheSwgZWxlbSxcclxuXHRcdHZhbHVlcyA9IFtdLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2VcclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcclxuXHRcdGlmICggc2hvdyApIHtcclxuXHJcblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcclxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXHJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcclxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcclxuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XHJcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcclxuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xyXG5cclxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXHJcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XHJcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XHJcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbWVudHM7XHJcbn1cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRzaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xyXG5cdH0sXHJcblx0aGlkZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xyXG5cclxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcclxuXHJcbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xyXG5cclxuXHJcblxyXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxyXG52YXIgd3JhcE1hcCA9IHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcclxuXHJcblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcclxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXHJcblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxyXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcclxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxyXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblxyXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxyXG59O1xyXG5cclxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xyXG5cclxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcclxud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcclxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXHJcblx0dmFyIHJldDtcclxuXHJcblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xyXG5cclxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdHJldCA9IFtdO1xyXG5cdH1cclxuXHJcblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldDtcclxufVxyXG5cclxuXHJcbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxyXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZGF0YVByaXYuc2V0KFxyXG5cdFx0XHRlbGVtc1sgaSBdLFxyXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcclxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XHJcblxyXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xyXG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXHJcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0bm9kZXMgPSBbXSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcclxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXHJcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cclxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcclxuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcclxuXHJcblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XHJcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcclxuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXHJcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxyXG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuXHJcblx0aSA9IDA7XHJcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxyXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XHJcblx0XHRcdGlmICggaWdub3JlZCApIHtcclxuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHJcblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XHJcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRpZiAoIHNjcmlwdHMgKSB7XHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcclxuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XHJcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBmcmFnbWVudDtcclxufVxyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxyXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxyXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXHJcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxyXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcclxuXHJcblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcclxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcclxuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxyXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xyXG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xyXG59ICkoKTtcclxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcblxyXG5cclxudmFyXHJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxyXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxyXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcclxuXHJcbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XHJcblx0cmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXHJcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuXHR9IGNhdGNoICggZXJyICkgeyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XHJcblx0dmFyIG9yaWdGbiwgdHlwZTtcclxuXHJcblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXHJcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxyXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW07XHJcblx0fVxyXG5cclxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xyXG5cclxuXHRcdC8vICggdHlwZXMsIGZuIClcclxuXHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcclxuXHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcclxuXHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0fSBlbHNlIGlmICggIWZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW07XHJcblx0fVxyXG5cclxuXHRpZiAoIG9uZSA9PT0gMSApIHtcclxuXHRcdG9yaWdGbiA9IGZuO1xyXG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cclxuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xyXG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cclxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xyXG5cdH1cclxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcclxuXHR9ICk7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cclxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cclxuICovXHJcbmpRdWVyeS5ldmVudCA9IHtcclxuXHJcblx0Z2xvYmFsOiB7fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xyXG5cclxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcclxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxyXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xyXG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XHJcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xyXG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcclxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxyXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcclxuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXHJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxyXG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcclxuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XHJcblx0XHR9XHJcblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XHJcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXHJcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIHQtLSApIHtcclxuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcclxuXHJcblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xyXG5cdFx0XHRpZiAoICF0eXBlICkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcclxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXHJcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXHJcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3RvcixcclxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxyXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXHJcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XHJcblxyXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxyXG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcclxuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XHJcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcclxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XHJcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblxyXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcclxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcclxuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cclxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcclxuXHJcblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXHJcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xyXG5cclxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xyXG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXHJcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcclxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXHJcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxyXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcclxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XHJcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xyXG5cclxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxyXG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcclxuXHJcblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcclxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxyXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxyXG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XHJcblxyXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXHJcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xyXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xyXG5cclxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xyXG5cclxuXHRcdFx0aiA9IDA7XHJcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXHJcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2UocylcclxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cclxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xyXG5cclxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcclxuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcclxuXHJcblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XHJcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcclxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XHJcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcclxuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXHJcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxyXG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcclxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcclxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxyXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcclxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxyXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcclxuXHJcblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcclxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcclxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcclxuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcclxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcclxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcclxuXHRcdGN1ciA9IHRoaXM7XHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XHJcblx0fSxcclxuXHJcblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG5cclxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cclxuXHRcdFx0XHRmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IDpcclxuXHRcdFx0XHRmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XHJcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXHJcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xyXG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xyXG5cdH0sXHJcblxyXG5cdHNwZWNpYWw6IHtcclxuXHRcdGxvYWQ6IHtcclxuXHJcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcclxuXHRcdFx0bm9CdWJibGU6IHRydWVcclxuXHRcdH0sXHJcblx0XHRmb2N1czoge1xyXG5cclxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xyXG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxyXG5cdFx0fSxcclxuXHRcdGJsdXI6IHtcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcclxuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcclxuXHRcdH0sXHJcblx0XHRjbGljazoge1xyXG5cclxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcclxuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRiZWZvcmV1bmxvYWQ6IHtcclxuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXHJcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcclxuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcclxuXHJcblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXHJcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xyXG5cclxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBFdmVudCBvYmplY3RcclxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcclxuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcclxuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xyXG5cclxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXHJcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcclxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxyXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRyZXR1cm5UcnVlIDpcclxuXHRcdFx0cmV0dXJuRmFsc2U7XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXHJcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XHJcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxyXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cclxuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcclxuXHRcdFx0c3JjLnRhcmdldDtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcclxuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xyXG5cclxuXHQvLyBFdmVudCB0eXBlXHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMudHlwZSA9IHNyYztcclxuXHR9XHJcblxyXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XHJcblx0aWYgKCBwcm9wcyApIHtcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxyXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xyXG5cclxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXHJcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XHJcbn07XHJcblxyXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcclxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxyXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXHJcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcclxuXHJcblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XHJcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHR9XHJcbn07XHJcblxyXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xyXG5qUXVlcnkuZWFjaCgge1xyXG5cdGFsdEtleTogdHJ1ZSxcclxuXHRidWJibGVzOiB0cnVlLFxyXG5cdGNhbmNlbGFibGU6IHRydWUsXHJcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXHJcblx0Y3RybEtleTogdHJ1ZSxcclxuXHRkZXRhaWw6IHRydWUsXHJcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcclxuXHRtZXRhS2V5OiB0cnVlLFxyXG5cdHBhZ2VYOiB0cnVlLFxyXG5cdHBhZ2VZOiB0cnVlLFxyXG5cdHNoaWZ0S2V5OiB0cnVlLFxyXG5cdHZpZXc6IHRydWUsXHJcblx0XCJjaGFyXCI6IHRydWUsXHJcblx0Y2hhckNvZGU6IHRydWUsXHJcblx0a2V5OiB0cnVlLFxyXG5cdGtleUNvZGU6IHRydWUsXHJcblx0YnV0dG9uOiB0cnVlLFxyXG5cdGJ1dHRvbnM6IHRydWUsXHJcblx0Y2xpZW50WDogdHJ1ZSxcclxuXHRjbGllbnRZOiB0cnVlLFxyXG5cdG9mZnNldFg6IHRydWUsXHJcblx0b2Zmc2V0WTogdHJ1ZSxcclxuXHRwb2ludGVySWQ6IHRydWUsXHJcblx0cG9pbnRlclR5cGU6IHRydWUsXHJcblx0c2NyZWVuWDogdHJ1ZSxcclxuXHRzY3JlZW5ZOiB0cnVlLFxyXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXHJcblx0dG9FbGVtZW50OiB0cnVlLFxyXG5cdHRvdWNoZXM6IHRydWUsXHJcblxyXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xyXG5cclxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xyXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XHJcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcclxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcclxuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIDM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcclxuXHRcdFx0XHRyZXR1cm4gMjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xyXG5cdH1cclxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcclxuXHJcbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xyXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxyXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxyXG4vL1xyXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XHJcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxyXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcclxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxyXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcclxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcclxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXHJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcclxuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxyXG5cdFx0YmluZFR5cGU6IGZpeCxcclxuXHJcblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxyXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcclxuXHJcblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXHJcblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XHJcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcclxuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xyXG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cclxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcclxuXHR9LFxyXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XHJcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xyXG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XHJcblxyXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XHJcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcclxuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcclxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cclxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XHJcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXHJcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXHJcblx0XHRcdCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXHJcblx0XHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbnZhclxyXG5cclxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXHJcblxyXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxyXG5cclxuXHQvKiBlc2xpbnQtZW5hYmxlICovXHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXHJcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cclxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xyXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxyXG5cclxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcclxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXHJcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcclxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XHJcblxyXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcclxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xyXG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXHJcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5KCBcIj50Ym9keVwiLCBlbGVtIClbIDAgXSB8fCBlbGVtO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cclxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcclxuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xyXG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xyXG5cclxuXHRpZiAoIG1hdGNoICkge1xyXG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcclxuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcclxuXHJcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cclxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xyXG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XHJcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XHJcblxyXG5cdFx0aWYgKCBldmVudHMgKSB7XHJcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XHJcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxyXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XHJcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XHJcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xyXG5cclxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xyXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXHJcblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XHJcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XHJcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XHJcblxyXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xyXG5cclxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXHJcblx0XHRpID0gMCxcclxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcclxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXHJcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XHJcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XHJcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XHJcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XHJcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0aWYgKCBsICkge1xyXG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcclxuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcclxuXHJcblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xyXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xyXG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XHJcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cclxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXHJcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XHJcblxyXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XHJcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxyXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XHJcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcclxuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXHJcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xyXG5cclxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XHJcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xyXG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXHJcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY29sbGVjdGlvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XHJcblx0dmFyIG5vZGUsXHJcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXHJcblx0XHRpID0gMDtcclxuXHJcblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxyXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXHJcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXHJcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXHJcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXHJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcclxuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcclxuXHJcblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxyXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XHJcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XHJcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcclxuXHRcdHJldHVybiBjbG9uZTtcclxuXHR9LFxyXG5cclxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXHJcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcclxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcclxuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxyXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XHJcblx0fSxcclxuXHJcblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblxyXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXHJcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcclxuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXHJcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxyXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW0gPSAwO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcclxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpZ25vcmVkID0gW107XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XHJcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxyXG5cdFx0fSwgaWdub3JlZCApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcclxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxyXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcclxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxyXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxyXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgZWxlbXMsXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXHJcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcclxuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcclxuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XHJcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XHJcblx0fTtcclxufSApO1xyXG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XHJcblxyXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XHJcblxyXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxyXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXHJcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcclxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xyXG5cdFx0XHR2aWV3ID0gd2luZG93O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cclxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcclxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxyXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xyXG5cclxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2VcclxuXHRcdGlmICggIWRpdiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xyXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xyXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xyXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XHJcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxyXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcclxuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxyXG5cdFx0Ly8gU29tZSBzdHlsZXNoZWV0cyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3RcclxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XHJcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XHJcblxyXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXHJcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXHJcblx0XHRkaXYgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXHJcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblxyXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXHJcblx0aWYgKCAhZGl2LnN0eWxlICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxyXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcclxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XHJcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcclxuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xyXG5cclxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXHJcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xyXG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcclxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcclxuXHRcdH0sXHJcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcclxuXHRcdH0sXHJcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XHJcblx0XHR9LFxyXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcclxuXHRcdH1cclxuXHR9ICk7XHJcbn0gKSgpO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XHJcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xyXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xyXG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xyXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHJcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxyXG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxyXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxyXG5cdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcclxuXHJcblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxyXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXHJcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxyXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxyXG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcclxuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcclxuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcclxuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcclxuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcclxuXHJcblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xyXG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcclxuXHJcblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcclxuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxyXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cclxuXHRcdHJldCArIFwiXCIgOlxyXG5cdFx0cmV0O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xyXG5cclxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxyXG5cdHJldHVybiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxyXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cclxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cclxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuXHJcbnZhclxyXG5cclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXHJcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXHJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XHJcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxyXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXHJcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXHJcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXHJcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXHJcblx0fSxcclxuXHJcblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxyXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XHJcblxyXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XHJcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xyXG5cclxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxyXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXHJcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcclxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xyXG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XHJcblx0XHRcdHJldHVybiBuYW1lO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXHJcbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxyXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xyXG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcclxuXHRpZiAoICFyZXQgKSB7XHJcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcclxuXHR9XHJcblx0cmV0dXJuIHJldDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcclxuXHJcblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxyXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxyXG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xyXG5cdHJldHVybiBtYXRjaGVzID9cclxuXHJcblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xyXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XHJcblx0XHR2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xyXG5cdHZhciBpLFxyXG5cdFx0dmFsID0gMDtcclxuXHJcblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXHJcblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xyXG5cdFx0aSA9IDQ7XHJcblxyXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcclxuXHR9IGVsc2Uge1xyXG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xyXG5cdH1cclxuXHJcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xyXG5cclxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xyXG5cclxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XHJcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xyXG5cclxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXHJcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXHJcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICksXHJcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XHJcblxyXG5cdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXHJcblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXHJcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXHJcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcclxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXHJcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiICkge1xyXG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XHJcblx0fVxyXG5cclxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXHJcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcclxuXHJcblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNoZWV0c1xyXG5cdHJldHVybiAoIHZhbCArXHJcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0ZWxlbSxcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxyXG5cdFx0XHRzdHlsZXNcclxuXHRcdClcclxuXHQpICsgXCJweFwiO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxyXG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxyXG5cdGNzc0hvb2tzOiB7XHJcblx0XHRvcGFjaXR5OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcclxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcclxuXHRjc3NOdW1iZXI6IHtcclxuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcclxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxyXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXHJcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxyXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXHJcblx0XHRcIndpZG93c1wiOiB0cnVlLFxyXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcclxuXHRcdFwiem9vbVwiOiB0cnVlXHJcblx0fSxcclxuXHJcblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxyXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcclxuXHRjc3NQcm9wczoge1xyXG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxyXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xyXG5cclxuXHRcdC8vIERvbid0IHNldCBzdHlsZXNoZWV0cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxyXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XHJcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcclxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cclxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcclxuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XHJcblxyXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xyXG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxyXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXHJcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcclxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xyXG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XHJcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XHJcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcclxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3RcclxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcclxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cclxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcclxuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxyXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XHJcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcclxuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XHJcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cclxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxyXG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXHJcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xyXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxyXG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxyXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxyXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cclxuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xyXG5cdFx0XHR2YXIgbWF0Y2hlcyxcclxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRleHRyYSxcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRzdHlsZXNcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcclxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxyXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XHJcblxyXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxyXG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXHJcblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcblx0XHRcdFx0XHR9IClcclxuXHRcdFx0XHQpICsgXCJweFwiO1xyXG5cdFx0fVxyXG5cdH1cclxuKTtcclxuXHJcbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcclxualF1ZXJ5LmVhY2goIHtcclxuXHRtYXJnaW46IFwiXCIsXHJcblx0cGFkZGluZzogXCJcIixcclxuXHRib3JkZXI6IFwiV2lkdGhcIlxyXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcclxuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcclxuXHJcblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXHJcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcclxuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XHJcblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBleHBhbmRlZDtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxyXG5cdFx0XHRcdG1hcCA9IHt9LFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG1hcDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xyXG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XHJcbn1cclxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XHJcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxyXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcclxuXHRcdHRoaXMuZWxlbSA9IGVsZW07XHJcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xyXG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcclxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xyXG5cdFx0dGhpcy5lbmQgPSBlbmQ7XHJcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xyXG5cdH0sXHJcblx0Y3VyOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XHJcblxyXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XHJcblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xyXG5cdH0sXHJcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcclxuXHRcdHZhciBlYXNlZCxcclxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcclxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cclxuXHRcdFx0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcclxuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn07XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XHJcblxyXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XHJcblx0X2RlZmF1bHQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0XHR2YXIgcmVzdWx0O1xyXG5cclxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcclxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cclxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XHJcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXHJcblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xyXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxyXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XHJcblxyXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cclxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblxyXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cclxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxyXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxyXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcclxuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XHJcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmVhc2luZyA9IHtcclxuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIHA7XHJcblx0fSxcclxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xyXG5cdH0sXHJcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxyXG59O1xyXG5cclxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XHJcblxyXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxyXG5qUXVlcnkuZnguc3RlcCA9IHt9O1xyXG5cclxuXHJcblxyXG5cclxudmFyXHJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXHJcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXHJcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XHJcblxyXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcclxuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XHJcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcclxuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XHJcblx0XHR9XHJcblxyXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XHJcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0fSApO1xyXG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XHJcblx0dmFyIHdoaWNoLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XHJcblxyXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcclxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxyXG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xyXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XHJcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBhdHRycztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XHJcblx0dmFyIHR3ZWVuLFxyXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcclxuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXHJcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxyXG5cdFx0YW5pbSA9IHRoaXMsXHJcblx0XHRvcmlnID0ge30sXHJcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXHJcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxyXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHJcblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXHJcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcclxuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcclxuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcclxuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xyXG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xyXG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGhvb2tzLnVucXVldWVkKys7XHJcblxyXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcclxuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XHJcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcclxuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcclxuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxyXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXHJcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xyXG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXNoZWV0cyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcclxuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xyXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXHJcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxyXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XHJcblxyXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXHJcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XHJcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XHJcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xyXG5cdFx0fVxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xyXG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxyXG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xyXG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xyXG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xyXG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXHJcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcclxuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XHJcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XHJcblx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xyXG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XHJcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xyXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xyXG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHJcblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxyXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xyXG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xyXG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcclxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XHJcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cclxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cclxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXHJcblxyXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxyXG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcclxuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxyXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XHJcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcclxuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcclxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcclxuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcclxuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xyXG5cclxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3NcclxuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcclxuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xyXG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcclxuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcclxuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XHJcblx0XHR9XHJcblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcclxuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxyXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXHJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcclxuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XHJcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xyXG5cdHZhciByZXN1bHQsXHJcblx0XHRzdG9wcGVkLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxyXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXHJcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XHJcblx0XHR9ICksXHJcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcclxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXHJcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxyXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcclxuXHRcdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xyXG5cclxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxyXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cclxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xyXG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cclxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fSxcclxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXHJcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcclxuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcclxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcclxuXHRcdFx0fSwgb3B0aW9ucyApLFxyXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXHJcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcclxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcclxuXHRcdFx0dHdlZW5zOiBbXSxcclxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XHJcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxyXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xyXG5cdFx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxyXG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHRcdH0gKSxcclxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xyXG5cclxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcclxuXHRcdGlmICggcmVzdWx0ICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XHJcblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcclxuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xyXG5cdH1cclxuXHJcblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcclxuXHRhbmltYXRpb25cclxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxyXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcclxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcclxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xyXG5cclxuXHRqUXVlcnkuZngudGltZXIoXHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcclxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXHJcblx0XHR9IClcclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gYW5pbWF0aW9uO1xyXG59XHJcblxyXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XHJcblxyXG5cdHR3ZWVuZXJzOiB7XHJcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XHJcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9IF1cclxuXHR9LFxyXG5cclxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcclxuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHByb3AsXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcclxuXHJcblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XHJcblx0XHRpZiAoIHByZXBlbmQgKSB7XHJcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xyXG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcclxuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XHJcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxyXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxyXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXHJcblx0fTtcclxuXHJcblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXHJcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xyXG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcclxuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXHJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XHJcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XHJcblx0fVxyXG5cclxuXHQvLyBRdWV1ZWluZ1xyXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XHJcblxyXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xyXG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHJldHVybiBvcHQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXHJcblxyXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcclxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9LFxyXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXHJcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcclxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3RcclxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XHJcblxyXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxyXG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XHJcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xyXG5cclxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cclxuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcclxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xyXG5cdH0sXHJcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XHJcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xyXG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XHJcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xyXG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcclxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XHJcblxyXG5cdFx0XHRpZiAoIGluZGV4ICkge1xyXG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XHJcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xyXG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxyXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xyXG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXHJcblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcclxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxyXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaW5kZXgsXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxyXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxyXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XHJcblxyXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXHJcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxyXG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XHJcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XHJcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcclxuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xyXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cclxuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcclxualF1ZXJ5LmVhY2goIHtcclxuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxyXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxyXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxyXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxyXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcclxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxyXG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkudGltZXJzID0gW107XHJcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHRpbWVyLFxyXG5cdFx0aSA9IDAsXHJcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xyXG5cclxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcclxuXHJcblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXHJcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcclxuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHR9XHJcblx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XHJcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xyXG5cdGpRdWVyeS5meC5zdGFydCgpO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XHJcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICggaW5Qcm9ncmVzcyApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xyXG5cdHNjaGVkdWxlKCk7XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcclxuXHRzbG93OiA2MDAsXHJcblx0ZmFzdDogMjAwLFxyXG5cclxuXHQvLyBEZWZhdWx0IHNwZWVkXHJcblx0X2RlZmF1bHQ6IDQwMFxyXG59O1xyXG5cclxuXHJcbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cclxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cclxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XHJcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcclxuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XHJcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XHJcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuXHRcdH07XHJcblx0fSApO1xyXG59O1xyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXHJcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXHJcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xyXG5cclxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcclxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcclxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XHJcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3RcclxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcclxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xyXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XHJcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcclxuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xyXG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcclxufSApKCk7XHJcblxyXG5cclxudmFyIGJvb2xIb29rLFxyXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cclxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcclxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcclxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcclxuXHR9LFxyXG5cclxuXHRhdHRySG9va3M6IHtcclxuXHRcdHR5cGU6IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcclxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xyXG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0dmFyIG5hbWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cclxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xyXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcclxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcclxuXHJcblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXHJcbmJvb2xIb29rID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcclxuXHJcblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0dmFyIHJldCwgaGFuZGxlLFxyXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cclxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XHJcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcclxuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xyXG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcmV0LCBob29rcyxcclxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcclxuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3NcclxuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XHJcblx0fSxcclxuXHJcblx0cHJvcEhvb2tzOiB7XHJcblx0XHR0YWJJbmRleDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XHJcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXHJcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XHJcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXHJcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3MilcclxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxyXG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcclxuXHRcdFx0XHRcdGVsZW0uaHJlZlxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIDA7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcm9wRml4OiB7XHJcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcclxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxyXG5cdH1cclxufSApO1xyXG5cclxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XHJcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxyXG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXHJcbi8vIG9uIHRoZSBvcHRpb25cclxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcclxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxyXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcclxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXHJcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XHJcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXHJcblxyXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXHJcblxyXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goIFtcclxuXHRcInRhYkluZGV4XCIsXHJcblx0XCJyZWFkT25seVwiLFxyXG5cdFwibWF4TGVuZ3RoXCIsXHJcblx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFwiY2VsbFBhZGRpbmdcIixcclxuXHRcInJvd1NwYW5cIixcclxuXHRcImNvbFNwYW5cIixcclxuXHRcInVzZU1hcFwiLFxyXG5cdFwiZnJhbWVCb3JkZXJcIixcclxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcbl0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xyXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2VcclxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcclxuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xyXG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xyXG5cdH1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcclxuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XHJcbn1cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcclxuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xyXG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcclxuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xyXG5cclxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcclxuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcclxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXHJcblx0XHRcdFx0XHRzdGF0ZVZhbFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcclxuXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcclxuXHRcdFx0XHRpID0gMDtcclxuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XHJcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxyXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XHJcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxyXG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxyXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcclxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXHJcblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXHJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRcdFx0XHRcIlwiIDpcclxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcclxuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XHJcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXHJcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcclxuXHJcblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xyXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXHJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0dmFyIHZhbDtcclxuXHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXHJcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0dmFsID0gXCJcIjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IFwiXCI7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHR2YWxIb29rczoge1xyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcclxuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xyXG5cdFx0XHRcdFx0dmFsIDpcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxyXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxyXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2VcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXHJcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcclxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXHJcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XHJcblx0XHRcdFx0XHRpID0gbWF4O1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxyXG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXHJcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxyXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcclxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcclxuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxyXG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcclxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cclxuXHJcblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XHJcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXHJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XHJcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxyXG5cclxuXHJcbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcclxuXHJcbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xyXG5cclxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcclxuXHJcblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxyXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcclxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcclxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XHJcblxyXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XHJcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xyXG5cclxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxyXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcclxuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcclxuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XHJcblx0XHR9XHJcblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXHJcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cclxuXHRcdFx0ZXZlbnQgOlxyXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXHJcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcclxuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcclxuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xyXG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XHJcblx0XHRcdG51bGw7XHJcblxyXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXHJcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XHJcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxyXG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XHJcblx0XHRcdFsgZXZlbnQgXSA6XHJcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xyXG5cclxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcclxuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcclxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XHJcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XHJcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHR0bXAgPSBjdXI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxyXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xyXG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxyXG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcclxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcclxuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcclxuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xyXG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xyXG5cclxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblxyXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcclxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxyXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cclxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXHJcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXHJcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcclxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcclxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xyXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XHJcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcclxuXHRcdFx0ZXZlbnQsXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcclxuXHR9XHJcblxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcclxuXHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXHJcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXHJcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcclxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHJcblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XHJcblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxyXG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcclxuXHJcblxyXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcclxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xyXG4vL1xyXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcclxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXHJcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xyXG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XHJcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHJcblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxyXG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xyXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufVxyXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcblxyXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XHJcblxyXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xyXG5cclxuXHJcblxyXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXHJcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdHZhciB4bWw7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcclxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cclxuXHR0cnkge1xyXG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcclxuXHR9IGNhdGNoICggZSApIHtcclxuXHRcdHhtbCA9IHVuZGVmaW5lZDtcclxuXHR9XHJcblxyXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XHJcblx0fVxyXG5cdHJldHVybiB4bWw7XHJcbn07XHJcblxyXG5cclxudmFyXHJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxyXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcclxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXHJcblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcclxuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxyXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cclxuXHRcdFx0XHRidWlsZFBhcmFtcyhcclxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXHJcblx0XHRcdFx0XHR2LFxyXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXHJcblx0XHRcdFx0XHRhZGRcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblxyXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXHJcblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxyXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcclxualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xyXG5cdHZhciBwcmVmaXgsXHJcblx0XHRzID0gW10sXHJcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXHJcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XHJcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxyXG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcclxuXHJcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xyXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xyXG5cdFx0fTtcclxuXHJcblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cclxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXHJcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHR9ICk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxyXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XHJcblx0fSxcclxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xyXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XHJcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xyXG5cdFx0fSApXHJcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3NcclxuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxyXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcclxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XHJcblx0XHR9IClcclxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xyXG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XHJcblxyXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcclxuXHRcdH0gKS5nZXQoKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG52YXJcclxuXHRyMjAgPSAvJTIwL2csXHJcblx0cmhhc2ggPSAvIy4qJC8sXHJcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcclxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXHJcblxyXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxyXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXHJcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXHJcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxyXG5cclxuXHQvKiBQcmVmaWx0ZXJzXHJcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qYXZhc2NyaXB0cyBmb3IgYW4gZXhhbXBsZSlcclxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxyXG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcclxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXHJcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHByZWZpbHRlcnMgPSB7fSxcclxuXHJcblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xyXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXHJcblx0ICovXHJcblx0dHJhbnNwb3J0cyA9IHt9LFxyXG5cclxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cclxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXHJcblxyXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxyXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XHJcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xyXG5cclxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxyXG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcclxuXHJcblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxyXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcclxuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRhdGFUeXBlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XHJcblxyXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcclxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXHJcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XHJcblxyXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcclxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xyXG5cclxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcclxuXHRcdHZhciBzZWxlY3RlZDtcclxuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XHJcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xyXG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xyXG5cclxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcdHJldHVybiBzZWxlY3RlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG59XHJcblxyXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcclxuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcclxuLy8gRml4ZXMgIzk4ODdcclxuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XHJcblx0dmFyIGtleSwgZGVlcCxcclxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcclxuXHJcblx0Zm9yICgga2V5IGluIHNyYyApIHtcclxuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGRlZXAgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcclxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcclxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcbiAqL1xyXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xyXG5cclxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXHJcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcclxuXHJcblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcclxuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxyXG5cdGlmICggY3QgKSB7XHJcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xyXG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xyXG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxyXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xyXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcclxuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xyXG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXHJcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XHJcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xyXG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0Y29udmVydGVycyA9IHt9LFxyXG5cclxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xyXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XHJcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcclxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XHJcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXHJcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XHJcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByZXYgPSBjdXJyZW50O1xyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdGlmICggY3VycmVudCApIHtcclxuXHJcblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cclxuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XHJcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXHJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XHJcblxyXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXHJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcclxuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxyXG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxyXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXHJcblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XHJcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcclxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcclxuXHRhY3RpdmU6IDAsXHJcblxyXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3RcclxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxyXG5cdGV0YWc6IHt9LFxyXG5cclxuXHRhamF4U2V0dGluZ3M6IHtcclxuXHRcdHVybDogbG9jYXRpb24uaHJlZixcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxyXG5cdFx0Z2xvYmFsOiB0cnVlLFxyXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXHJcblx0XHRhc3luYzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxyXG5cclxuXHRcdC8qXHJcblx0XHR0aW1lb3V0OiAwLFxyXG5cdFx0ZGF0YTogbnVsbCxcclxuXHRcdGRhdGFUeXBlOiBudWxsLFxyXG5cdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdGNhY2hlOiBudWxsLFxyXG5cdFx0dGhyb3dzOiBmYWxzZSxcclxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcclxuXHRcdGhlYWRlcnM6IHt9LFxyXG5cdFx0Ki9cclxuXHJcblx0XHRhY2NlcHRzOiB7XHJcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcclxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXHJcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXHJcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Y29udGVudHM6IHtcclxuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcclxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxyXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cclxuXHRcdH0sXHJcblxyXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcclxuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXHJcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXHJcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXHJcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXHJcblx0XHRjb252ZXJ0ZXJzOiB7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcclxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxyXG5cclxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXHJcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXHJcblxyXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXHJcblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXHJcblxyXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxyXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxyXG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxyXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcclxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxyXG5cdFx0ZmxhdE9wdGlvbnM6IHtcclxuXHRcdFx0dXJsOiB0cnVlLFxyXG5cdFx0XHRjb250ZXh0OiB0cnVlXHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcclxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXHJcblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cclxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xyXG5cdFx0cmV0dXJuIHNldHRpbmdzID9cclxuXHJcblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcclxuXHJcblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3NcclxuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XHJcblx0fSxcclxuXHJcblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXHJcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXHJcblxyXG5cdC8vIE1haW4gbWV0aG9kXHJcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcclxuXHJcblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxyXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRvcHRpb25zID0gdXJsO1xyXG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcclxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuXHRcdHZhciB0cmFuc3BvcnQsXHJcblxyXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXHJcblx0XHRcdGNhY2hlVVJMLFxyXG5cclxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcclxuXHJcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdHRpbWVvdXRUaW1lcixcclxuXHJcblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxyXG5cdFx0XHR1cmxBbmNob3IsXHJcblxyXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXHJcblx0XHRcdGNvbXBsZXRlZCxcclxuXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxyXG5cdFx0XHRmaXJlR2xvYmFscyxcclxuXHJcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcclxuXHRcdFx0aSxcclxuXHJcblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxyXG5cdFx0XHR1bmNhY2hlZCxcclxuXHJcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3RcclxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXHJcblxyXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxyXG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcclxuXHJcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXHJcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxyXG5cclxuXHRcdFx0Ly8gRGVmZXJyZWRzXHJcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXHJcblxyXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXHJcblxyXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2VcclxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXHJcblxyXG5cdFx0XHQvLyBGYWtlIHhoclxyXG5cdFx0XHRqcVhIUiA9IHtcclxuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxyXG5cclxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XHJcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXHJcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXHJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cclxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xyXG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XHJcblx0XHRcdFx0XHR2YXIgY29kZTtcclxuXHRcdFx0XHRcdGlmICggbWFwICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXHJcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xyXG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXHJcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxyXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcclxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxyXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxyXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xyXG5cclxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxyXG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcclxuXHJcblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XHJcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHJcblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cclxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xyXG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xyXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxyXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxyXG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXHJcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcclxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XHJcblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxyXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcclxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xyXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcclxuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXHJcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcclxuXHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXHJcblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxyXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XHJcblxyXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xyXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXHJcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxyXG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXHJcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cclxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cclxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcclxuXHJcblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxyXG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXHJcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xyXG5cclxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxyXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xyXG5cclxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XHJcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxyXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XHJcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxyXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XHJcblxyXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXHJcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxyXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcclxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXHJcblx0XHRcdFwiQWNjZXB0XCIsXHJcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xyXG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcclxuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxyXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XHJcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxyXG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcclxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxyXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cclxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xyXG5cclxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xyXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcclxuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xyXG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xyXG5cclxuXHRcdC8vIEdldCB0cmFuc3BvcnRcclxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxyXG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XHJcblxyXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxyXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4ganFYSFI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRpbWVvdXRcclxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XHJcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XHJcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XHJcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXHJcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXHJcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxyXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XHJcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXHJcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XHJcblxyXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXHJcblx0XHRcdGlmICggY29tcGxldGVkICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXHJcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xyXG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxyXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxyXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XHJcblxyXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxyXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcclxuXHJcblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXHJcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXHJcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XHJcblxyXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xyXG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xyXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxyXG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3JcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblxyXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpxWEhSO1xyXG5cdH0sXHJcblxyXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XHJcblx0fSxcclxuXHJcblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XHJcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xyXG5cclxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xyXG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXHJcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcclxuXHRcdHVybDogdXJsLFxyXG5cclxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxyXG5cdFx0dHlwZTogXCJHRVRcIixcclxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxyXG5cdFx0Y2FjaGU6IHRydWUsXHJcblx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRnbG9iYWw6IGZhbHNlLFxyXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxyXG5cdH0gKTtcclxufTtcclxuXHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHR2YXIgd3JhcDtcclxuXHJcblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxyXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcclxuXHJcblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBlbGVtO1xyXG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XHJcblx0XHR9ICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XHJcbn07XHJcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xyXG5cdH0gY2F0Y2ggKCBlICkge31cclxufTtcclxuXHJcbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xyXG5cclxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXHJcblx0XHQwOiAyMDAsXHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxyXG5cdFx0MTIyMzogMjA0XHJcblx0fSxcclxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xyXG5cclxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xyXG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcclxuXHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XHJcblxyXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3RcclxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0dmFyIGksXHJcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xyXG5cclxuXHRcdFx0XHR4aHIub3BlbihcclxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcclxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcclxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXHJcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxyXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xyXG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXHJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxyXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXHJcblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXHJcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXHJcblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcclxuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcclxuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENhbGxiYWNrXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cclxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcclxuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcclxuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxyXG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XHJcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xyXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXHJcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxyXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxyXG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXHJcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXHJcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcclxuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXHJcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcclxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXHJcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxualF1ZXJ5LmFqYXhTZXR1cCgge1xyXG5cdGFjY2VwdHM6IHtcclxuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcclxuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxyXG5cdH0sXHJcblx0Y29udGVudHM6IHtcclxuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXHJcblx0fSxcclxuXHRjb252ZXJ0ZXJzOiB7XHJcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xyXG5cdFx0XHRyZXR1cm4gdGV4dDtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xyXG5cdH1cclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcclxuXHJcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xyXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxyXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxyXG5cdFx0XHRcdH0gKS5vbihcclxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xyXG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxyXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XHJcblxyXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXHJcbmpRdWVyeS5hamF4U2V0dXAoIHtcclxuXHRqc29ucDogXCJjYWxsYmFja1wiLFxyXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XHJcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcclxuXHRcdHJldHVybiBjYWxsYmFjaztcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxyXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cclxuXHRcdFx0XCJ1cmxcIiA6XHJcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXHJcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXHJcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXHJcblx0XHQpO1xyXG5cclxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XHJcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XHJcblxyXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxyXG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cclxuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxyXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcclxuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcclxuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xyXG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cclxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXHJcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcclxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcclxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcclxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXHJcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXHJcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2VcclxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcclxuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xyXG5cdFx0fSApO1xyXG5cclxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XHJcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcclxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXHJcbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cclxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xyXG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xyXG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xyXG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xyXG59ICkoKTtcclxuXHJcblxyXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcclxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxyXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxyXG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXHJcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XHJcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9XHJcblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XHJcblx0XHRjb250ZXh0ID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xyXG5cclxuXHRpZiAoICFjb250ZXh0ICkge1xyXG5cclxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxyXG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cclxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XHJcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcclxuXHJcblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxyXG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xyXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxyXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xyXG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xyXG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xyXG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XHJcblxyXG5cdC8vIFNpbmdsZSB0YWdcclxuXHRpZiAoIHBhcnNlZCApIHtcclxuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xyXG5cdH1cclxuXHJcblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcclxuXHJcblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxyXG4gKi9cclxualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xyXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXHJcblx0XHRzZWxmID0gdGhpcyxcclxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xyXG5cclxuXHRpZiAoIG9mZiA+IC0xICkge1xyXG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XHJcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XHJcblxyXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcclxuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xyXG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xyXG5cclxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXHJcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHR0eXBlID0gXCJQT1NUXCI7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxyXG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xyXG5cdFx0alF1ZXJ5LmFqYXgoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxyXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2VcclxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXHJcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcclxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxyXG5cdFx0XHRkYXRhOiBwYXJhbXNcclxuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXHJcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xyXG5cclxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xyXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxyXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxyXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxyXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XHJcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xyXG5qUXVlcnkuZWFjaCggW1xyXG5cdFwiYWpheFN0YXJ0XCIsXHJcblx0XCJhamF4U3RvcFwiLFxyXG5cdFwiYWpheENvbXBsZXRlXCIsXHJcblx0XCJhamF4RXJyb3JcIixcclxuXHRcImFqYXhTdWNjZXNzXCIsXHJcblx0XCJhamF4U2VuZFwiXHJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xyXG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XHJcblx0fSApLmxlbmd0aDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbmpRdWVyeS5vZmZzZXQgPSB7XHJcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXHJcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXHJcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0cHJvcHMgPSB7fTtcclxuXHJcblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXHJcblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XHJcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcclxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XHJcblxyXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxyXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcclxuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XHJcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcclxuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxyXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XHJcblx0XHR9XHJcblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHR0aGlzIDpcclxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xyXG5cclxuXHRcdGlmICggIWVsZW0gKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcclxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxyXG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxyXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXHJcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuXHRcdH1cclxuXHJcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XHJcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXHJcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XHJcblxyXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcclxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxyXG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xyXG5cclxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXHJcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XHJcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XHJcblxyXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXHJcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XHJcblx0XHRcdGlmICggIW5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XHJcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxyXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXHJcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxyXG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cclxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcclxuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XHJcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxyXG5cdC8vXHJcblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXHJcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXHJcblx0Ly9cclxuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxyXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XHJcblxyXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcclxuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xyXG5cclxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcclxuXHJcblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xyXG5cdFx0XHR2YXIgd2luO1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cdFx0XHRcdHdpbiA9IGVsZW07XHJcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0VmlldztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB3aW4gKSB7XHJcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxyXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcclxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcclxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cclxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XHJcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XHJcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XHJcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXHJcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XHJcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XHJcblx0XHRcdFx0XHRjb21wdXRlZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCk7XHJcbn0gKTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcclxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xyXG5cclxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxyXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXHJcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBkb2M7XHJcblxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XHJcblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XHJcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcclxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxyXG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHJcblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xyXG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblxyXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xyXG5cdH0sXHJcblxyXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcclxuXHJcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XHJcblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxyXG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcclxuXHRpZiAoIGhvbGQgKSB7XHJcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XHJcblx0fSBlbHNlIHtcclxuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdH1cclxufTtcclxualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xyXG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcclxualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxyXG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3RcclxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxyXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2VcclxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXHJcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cclxuXHJcbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXHJcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cclxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxyXG5cclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcclxuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnk7XHJcblx0fSApO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG52YXJcclxuXHJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXHJcblxyXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XyQgPSB3aW5kb3cuJDtcclxuXHJcbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XHJcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LiQgPSBfJDtcclxuXHR9XHJcblxyXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxyXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuaWYgKCAhbm9HbG9iYWwgKSB7XHJcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5yZXR1cm4galF1ZXJ5O1xyXG59ICk7XHJcbiIsIi8qKiFcclxuXHJcbiBAbGljZW5zZVxyXG4gaGFuZGxlYmFycyB2NC4wLjEwXHJcblxyXG5Db3B5cmlnaHQgKEMpIDIwMTEtMjAxNiBieSBZZWh1ZGEgS2F0elxyXG5cclxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG5USEUgU09GVFdBUkUuXHJcblxyXG4qL1xyXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xyXG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JylcclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxyXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcclxuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JylcclxuXHRcdGV4cG9ydHNbXCJIYW5kbGViYXJzXCJdID0gZmFjdG9yeSgpO1xyXG5cdGVsc2VcclxuXHRcdHJvb3RbXCJIYW5kbGViYXJzXCJdID0gZmFjdG9yeSgpO1xyXG59KSh0aGlzLCBmdW5jdGlvbigpIHtcclxucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcclxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXHJcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcclxuXHJcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cclxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XHJcblxyXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXHJcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XHJcblxyXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcclxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcclxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXHJcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxyXG4vKioqKioqLyBcdFx0fTtcclxuXHJcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cclxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xyXG5cclxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcclxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xyXG5cclxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXHJcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0fVxyXG5cclxuXHJcbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xyXG5cclxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XHJcblxyXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcclxuXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbi8qKioqKiovIH0pXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKioqKiovIChbXHJcbi8qIDAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzUnVudGltZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzUnVudGltZSk7XHJcblxyXG5cdC8vIENvbXBpbGVyIGltcG9ydHNcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVyQXN0KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XHJcblxyXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XHJcblxyXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcclxuXHJcblx0dmFyIF9jcmVhdGUgPSBfaGFuZGxlYmFyc1J1bnRpbWUyWydkZWZhdWx0J10uY3JlYXRlO1xyXG5cdGZ1bmN0aW9uIGNyZWF0ZSgpIHtcclxuXHQgIHZhciBoYiA9IF9jcmVhdGUoKTtcclxuXHJcblx0ICBoYi5jb21waWxlID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcblx0ICAgIHJldHVybiBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xyXG5cdCAgfTtcclxuXHQgIGhiLnByZWNvbXBpbGUgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcclxuXHQgICAgcmV0dXJuIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5wcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XHJcblx0ICB9O1xyXG5cclxuXHQgIGhiLkFTVCA9IF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyWydkZWZhdWx0J107XHJcblx0ICBoYi5Db21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5Db21waWxlcjtcclxuXHQgIGhiLkphdmFTY3JpcHRDb21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyWydkZWZhdWx0J107XHJcblx0ICBoYi5QYXJzZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZXI7XHJcblx0ICBoYi5wYXJzZSA9IF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlLnBhcnNlO1xyXG5cclxuXHQgIHJldHVybiBoYjtcclxuXHR9XHJcblxyXG5cdHZhciBpbnN0ID0gY3JlYXRlKCk7XHJcblx0aW5zdC5jcmVhdGUgPSBjcmVhdGU7XHJcblxyXG5cdF9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcclxuXHJcblx0aW5zdC5WaXNpdG9yID0gX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyWydkZWZhdWx0J107XHJcblxyXG5cdGluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHQgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XHJcblx0ICAgIFwiZGVmYXVsdFwiOiBvYmpcclxuXHQgIH07XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHJcblx0dmFyIGJhc2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc0Jhc2UpO1xyXG5cclxuXHQvLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXHJcblx0Ly8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzU2FmZVN0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNTYWZlU3RyaW5nKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNFeGNlcHRpb24pO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzVXRpbHMpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XHJcblxyXG5cdHZhciBydW50aW1lID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNSdW50aW1lKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcclxuXHJcblx0Ly8gRm9yIGNvbXBhdGliaWxpdHkgYW5kIHVzYWdlIG91dHNpZGUgb2YgbW9kdWxlIHN5c3RlbXMsIG1ha2UgdGhlIEhhbmRsZWJhcnMgb2JqZWN0IGEgbmFtZXNwYWNlXHJcblx0ZnVuY3Rpb24gY3JlYXRlKCkge1xyXG5cdCAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XHJcblxyXG5cdCAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcclxuXHQgIGhiLlNhZmVTdHJpbmcgPSBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyWydkZWZhdWx0J107XHJcblx0ICBoYi5FeGNlcHRpb24gPSBfaGFuZGxlYmFyc0V4Y2VwdGlvbjJbJ2RlZmF1bHQnXTtcclxuXHQgIGhiLlV0aWxzID0gVXRpbHM7XHJcblx0ICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcclxuXHJcblx0ICBoYi5WTSA9IHJ1bnRpbWU7XHJcblx0ICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzcGVjKSB7XHJcblx0ICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcclxuXHQgIH07XHJcblxyXG5cdCAgcmV0dXJuIGhiO1xyXG5cdH1cclxuXHJcblx0dmFyIGluc3QgPSBjcmVhdGUoKTtcclxuXHRpbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcclxuXHJcblx0X2hhbmRsZWJhcnNOb0NvbmZsaWN0MlsnZGVmYXVsdCddKGluc3QpO1xyXG5cclxuXHRpbnN0WydkZWZhdWx0J10gPSBpbnN0O1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBpbnN0O1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XHJcblx0ICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XHJcblx0ICAgIHJldHVybiBvYmo7XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICB2YXIgbmV3T2JqID0ge307XHJcblxyXG5cdCAgICBpZiAob2JqICE9IG51bGwpIHtcclxuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcblx0ICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XHJcblx0ICAgIHJldHVybiBuZXdPYmo7XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLkhhbmRsZWJhcnNFbnZpcm9ubWVudCA9IEhhbmRsZWJhcnNFbnZpcm9ubWVudDtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF9oZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcblxyXG5cdHZhciBfZGVjb3JhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5cclxuXHR2YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xyXG5cclxuXHR2YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xyXG5cclxuXHR2YXIgVkVSU0lPTiA9ICc0LjAuMTAnO1xyXG5cdGV4cG9ydHMuVkVSU0lPTiA9IFZFUlNJT047XHJcblx0dmFyIENPTVBJTEVSX1JFVklTSU9OID0gNztcclxuXHJcblx0ZXhwb3J0cy5DT01QSUxFUl9SRVZJU0lPTiA9IENPTVBJTEVSX1JFVklTSU9OO1xyXG5cdHZhciBSRVZJU0lPTl9DSEFOR0VTID0ge1xyXG5cdCAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcclxuXHQgIDI6ICc9PSAxLjAuMC1yYy4zJyxcclxuXHQgIDM6ICc9PSAxLjAuMC1yYy40JyxcclxuXHQgIDQ6ICc9PSAxLngueCcsXHJcblx0ICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXHJcblx0ICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcclxuXHQgIDc6ICc+PSA0LjAuMCdcclxuXHR9O1xyXG5cclxuXHRleHBvcnRzLlJFVklTSU9OX0NIQU5HRVMgPSBSRVZJU0lPTl9DSEFOR0VTO1xyXG5cdHZhciBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcblxyXG5cdGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xyXG5cdCAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcclxuXHQgIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcclxuXHQgIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XHJcblxyXG5cdCAgX2hlbHBlcnMucmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcclxuXHQgIF9kZWNvcmF0b3JzLnJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XHJcblx0fVxyXG5cclxuXHRIYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xyXG5cdCAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcclxuXHJcblx0ICBsb2dnZXI6IF9sb2dnZXIyWydkZWZhdWx0J10sXHJcblx0ICBsb2c6IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nLFxyXG5cclxuXHQgIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiByZWdpc3RlckhlbHBlcihuYW1lLCBmbikge1xyXG5cdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcclxuXHQgICAgICBpZiAoZm4pIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gdW5yZWdpc3RlckhlbHBlcihuYW1lKSB7XHJcblx0ICAgIGRlbGV0ZSB0aGlzLmhlbHBlcnNbbmFtZV07XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHBhcnRpYWwpIHtcclxuXHQgICAgaWYgKF91dGlscy50b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLnBhcnRpYWxzLCBuYW1lKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0ICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJyArIG5hbWUgKyAnXCIgYXMgdW5kZWZpbmVkJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQYXJ0aWFsKG5hbWUpIHtcclxuXHQgICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihuYW1lLCBmbikge1xyXG5cdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcclxuXHQgICAgICBpZiAoZm4pIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XHJcblx0ICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0dmFyIGxvZyA9IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nO1xyXG5cclxuXHRleHBvcnRzLmxvZyA9IGxvZztcclxuXHRleHBvcnRzLmNyZWF0ZUZyYW1lID0gX3V0aWxzLmNyZWF0ZUZyYW1lO1xyXG5cdGV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA1ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xyXG5cdGV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XHJcblx0ZXhwb3J0cy5lc2NhcGVFeHByZXNzaW9uID0gZXNjYXBlRXhwcmVzc2lvbjtcclxuXHRleHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xyXG5cdGV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcclxuXHRleHBvcnRzLmJsb2NrUGFyYW1zID0gYmxvY2tQYXJhbXM7XHJcblx0ZXhwb3J0cy5hcHBlbmRDb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoO1xyXG5cdHZhciBlc2NhcGUgPSB7XHJcblx0ICAnJic6ICcmYW1wOycsXHJcblx0ICAnPCc6ICcmbHQ7JyxcclxuXHQgICc+JzogJyZndDsnLFxyXG5cdCAgJ1wiJzogJyZxdW90OycsXHJcblx0ICBcIidcIjogJyYjeDI3OycsXHJcblx0ICAnYCc6ICcmI3g2MDsnLFxyXG5cdCAgJz0nOiAnJiN4M0Q7J1xyXG5cdH07XHJcblxyXG5cdHZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXHJcblx0ICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xyXG5cclxuXHRmdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xyXG5cdCAgcmV0dXJuIGVzY2FwZVtjaHJdO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xyXG5cdCAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xyXG5cdCAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XHJcblx0ICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiBvYmo7XHJcblx0fVxyXG5cclxuXHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5cclxuXHRleHBvcnRzLnRvU3RyaW5nID0gdG9TdHJpbmc7XHJcblx0Ly8gU291cmNlZCBmcm9tIGxvZGFzaFxyXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcclxuXHQvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXHJcblx0dmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XHJcblx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG5cdH07XHJcblx0Ly8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXHJcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHRpZiAoaXNGdW5jdGlvbigveC8pKSB7XHJcblx0ICBleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XHJcblx0ICB9O1xyXG5cdH1cclxuXHRleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xyXG5cclxuXHQvKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cclxuXHJcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHR2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcclxuXHQvLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxyXG5cclxuXHRmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xyXG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcclxuXHQgICAgICByZXR1cm4gaTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdCAgcmV0dXJuIC0xO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcclxuXHQgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xyXG5cdCAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXHJcblx0ICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xyXG5cdCAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XHJcblx0ICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHQgICAgICByZXR1cm4gJyc7XHJcblx0ICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xyXG5cdCAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXHJcblx0ICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxyXG5cdCAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cclxuXHQgICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcclxuXHQgICAgcmV0dXJuIHN0cmluZztcclxuXHQgIH1cclxuXHQgIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XHJcblx0ICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICByZXR1cm4gZmFsc2U7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcclxuXHQgIHZhciBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcclxuXHQgIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XHJcblx0ICByZXR1cm4gZnJhbWU7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xyXG5cdCAgcGFyYW1zLnBhdGggPSBpZHM7XHJcblx0ICByZXR1cm4gcGFyYW1zO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XHJcblx0ICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9PYmplY3QkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcclxuXHJcblx0ZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcclxuXHQgIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxyXG5cdCAgICAgIGxpbmUgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgY29sdW1uID0gdW5kZWZpbmVkO1xyXG5cdCAgaWYgKGxvYykge1xyXG5cdCAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XHJcblx0ICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XHJcblxyXG5cdCAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcclxuXHQgIH1cclxuXHJcblx0ICB2YXIgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XHJcblxyXG5cdCAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXHJcblx0ICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcclxuXHQgICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XHJcblx0ICB9XHJcblxyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuXHQgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG5cdCAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xyXG5cdCAgfVxyXG5cclxuXHQgIHRyeSB7XHJcblx0ICAgIGlmIChsb2MpIHtcclxuXHQgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xyXG5cclxuXHQgICAgICAvLyBXb3JrIGFyb3VuZCBpc3N1ZSB1bmRlciBzYWZhcmkgd2hlcmUgd2UgY2FuJ3QgZGlyZWN0bHkgc2V0IHRoZSBjb2x1bW4gdmFsdWVcclxuXHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICAgIGlmIChfT2JqZWN0JGRlZmluZVByb3BlcnR5KSB7XHJcblx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcclxuXHQgICAgICAgICAgdmFsdWU6IGNvbHVtbixcclxuXHQgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSBjYXRjaCAobm9wKSB7XHJcblx0ICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cclxuXHQgIH1cclxuXHR9XHJcblxyXG5cdEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gRXhjZXB0aW9uO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oOCksIF9fZXNNb2R1bGU6IHRydWUgfTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA4ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0dmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7XHJcblx0ICByZXR1cm4gJC5zZXREZXNjKGl0LCBrZXksIGRlc2MpO1xyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogOSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdHZhciAkT2JqZWN0ID0gT2JqZWN0O1xyXG5cdG1vZHVsZS5leHBvcnRzID0ge1xyXG5cdCAgY3JlYXRlOiAgICAgJE9iamVjdC5jcmVhdGUsXHJcblx0ICBnZXRQcm90bzogICAkT2JqZWN0LmdldFByb3RvdHlwZU9mLFxyXG5cdCAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsXHJcblx0ICBnZXREZXNjOiAgICAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcclxuXHQgIHNldERlc2M6ICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHksXHJcblx0ICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXHJcblx0ICBnZXRLZXlzOiAgICAkT2JqZWN0LmtleXMsXHJcblx0ICBnZXROYW1lczogICAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXHJcblx0ICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcclxuXHQgIGVhY2g6ICAgICAgIFtdLmZvckVhY2hcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEwICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMgPSByZWdpc3RlckRlZmF1bHRIZWxwZXJzO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcclxuXHJcblx0dmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNFYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XHJcblxyXG5cdHZhciBfaGVscGVyc0VhY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0VhY2gpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNIZWxwZXJNaXNzaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XHJcblxyXG5cdHZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0hlbHBlck1pc3NpbmcpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNJZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNJZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSWYpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNMb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcclxuXHJcblx0dmFyIF9oZWxwZXJzTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb2cpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNMb29rdXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcclxuXHJcblx0dmFyIF9oZWxwZXJzTG9va3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb29rdXApO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNXaXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XHJcblxyXG5cdHZhciBfaGVscGVyc1dpdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc1dpdGgpO1xyXG5cclxuXHRmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XHJcblx0ICBfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZzJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XHJcblx0ICBfaGVscGVyc0VhY2gyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHQgIF9oZWxwZXJzSWYyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNMb2cyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNXaXRoMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTEgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xyXG5cdCAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcclxuXHQgICAgICAgIGZuID0gb3B0aW9ucy5mbjtcclxuXHJcblx0ICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XHJcblx0ICAgICAgcmV0dXJuIGZuKHRoaXMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xyXG5cdCAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKF91dGlscy5pc0FycmF5KGNvbnRleHQpKSB7XHJcblx0ICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcclxuXHQgICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcclxuXHQgICAgICAgIG9wdGlvbnMgPSB7IGRhdGE6IGRhdGEgfTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTIgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdlYWNoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKCFvcHRpb25zKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgZm4gPSBvcHRpb25zLmZuLFxyXG5cdCAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcclxuXHQgICAgICAgIGkgPSAwLFxyXG5cdCAgICAgICAgcmV0ID0gJycsXHJcblx0ICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgY29udGV4dFBhdGggPSB1bmRlZmluZWQ7XHJcblxyXG5cdCAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xyXG5cdCAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChvcHRpb25zLmRhdGEpIHtcclxuXHQgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XHJcblx0ICAgICAgaWYgKGRhdGEpIHtcclxuXHQgICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XHJcblx0ICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XHJcblx0ICAgICAgICBkYXRhLmZpcnN0ID0gaW5kZXggPT09IDA7XHJcblx0ICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XHJcblxyXG5cdCAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XHJcblx0ICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcclxuXHQgICAgICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xyXG5cdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xyXG5cdCAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcblx0ICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcclxuXHQgICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdmFyIHByaW9yS2V5ID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0KSB7XHJcblx0ICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHQgICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcclxuXHQgICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXHJcblx0ICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cclxuXHQgICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBwcmlvcktleSA9IGtleTtcclxuXHQgICAgICAgICAgICBpKys7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChpID09PSAwKSB7XHJcblx0ICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0pO1xyXG5cdH07XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEzICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKCkgLyogW2FyZ3MsIF1vcHRpb25zICove1xyXG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG5cdCAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxyXG5cdCAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xyXG5cdCAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XHJcblx0ICAgICAgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXHJcblx0ICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXHJcblx0ICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXHJcblx0ICAgIGlmICghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCB8fCBfdXRpbHMuaXNFbXB0eShjb25kaXRpb25hbCkpIHtcclxuXHQgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xyXG5cdCAgICB9XHJcblx0ICB9KTtcclxuXHJcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XHJcblx0ICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHsgZm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNoIH0pO1xyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTUgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG5cdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uICgpIC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi97XHJcblx0ICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF0sXHJcblx0ICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblx0ICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBsZXZlbCA9IDE7XHJcblx0ICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xyXG5cdCAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xyXG5cdCAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xyXG5cdCAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xyXG5cdCAgICB9XHJcblx0ICAgIGFyZ3NbMF0gPSBsZXZlbDtcclxuXHJcblx0ICAgIGluc3RhbmNlLmxvZy5hcHBseShpbnN0YW5jZSwgYXJncyk7XHJcblx0ICB9KTtcclxuXHR9O1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQpIHtcclxuXHQgICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XHJcblx0ICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcclxuXHJcblx0ICAgIGlmICghX3V0aWxzLmlzRW1wdHkoY29udGV4dCkpIHtcclxuXHQgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcclxuXHQgICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcclxuXHQgICAgICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTggKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyA9IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnM7XHJcblxyXG5cdHZhciBfZGVjb3JhdG9yc0lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xyXG5cclxuXHR2YXIgX2RlY29yYXRvcnNJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9yc0lubGluZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcclxuXHQgIF9kZWNvcmF0b3JzSW5saW5lMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTkgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbiAoZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcclxuXHQgICAgdmFyIHJldCA9IGZuO1xyXG5cdCAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XHJcblx0ICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcclxuXHQgICAgICByZXQgPSBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xyXG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXHJcblx0ICAgICAgICB2YXIgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XHJcblx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBfdXRpbHMuZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xyXG5cdCAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XHJcblx0ICAgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICAgIH07XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0pO1xyXG5cdH07XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDIwICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIGxvZ2dlciA9IHtcclxuXHQgIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcclxuXHQgIGxldmVsOiAnaW5mbycsXHJcblxyXG5cdCAgLy8gTWFwcyBhIGdpdmVuIGxldmVsIHZhbHVlIHRvIHRoZSBgbWV0aG9kTWFwYCBpbmRleGVzIGFib3ZlLlxyXG5cdCAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uIGxvb2t1cExldmVsKGxldmVsKSB7XHJcblx0ICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XHJcblx0ICAgICAgdmFyIGxldmVsTWFwID0gX3V0aWxzLmluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XHJcblx0ICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcclxuXHQgICAgICAgIGxldmVsID0gbGV2ZWxNYXA7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiBsZXZlbDtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcclxuXHQgIGxvZzogZnVuY3Rpb24gbG9nKGxldmVsKSB7XHJcblx0ICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcclxuXHJcblx0ICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcclxuXHQgICAgICB2YXIgbWV0aG9kID0gbG9nZ2VyLm1ldGhvZE1hcFtsZXZlbF07XHJcblx0ICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcclxuXHQgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG5cdCAgICAgICAgbWV0aG9kID0gJ2xvZyc7XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuXHQgICAgICAgIG1lc3NhZ2VbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgY29uc29sZVttZXRob2RdLmFwcGx5KGNvbnNvbGUsIG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdH07XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGxvZ2dlcjtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdC8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGZ1bmN0aW9uIFNhZmVTdHJpbmcoc3RyaW5nKSB7XHJcblx0ICB0aGlzLnN0cmluZyA9IHN0cmluZztcclxuXHR9XHJcblxyXG5cdFNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgcmV0dXJuICcnICsgdGhpcy5zdHJpbmc7XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU2FmZVN0cmluZztcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9PYmplY3Qkc2VhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0ZXhwb3J0cy5jaGVja1JldmlzaW9uID0gY2hlY2tSZXZpc2lvbjtcclxuXHRleHBvcnRzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcblx0ZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xyXG5cdGV4cG9ydHMucmVzb2x2ZVBhcnRpYWwgPSByZXNvbHZlUGFydGlhbDtcclxuXHRleHBvcnRzLmludm9rZVBhcnRpYWwgPSBpbnZva2VQYXJ0aWFsO1xyXG5cdGV4cG9ydHMubm9vcCA9IG5vb3A7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHR2YXIgVXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdXRpbHMpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XHJcblxyXG5cdHZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblxyXG5cdGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XHJcblx0ICB2YXIgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcclxuXHQgICAgICBjdXJyZW50UmV2aXNpb24gPSBfYmFzZS5DT01QSUxFUl9SRVZJU0lPTjtcclxuXHJcblx0ICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XHJcblx0ICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XHJcblx0ICAgICAgdmFyIHJ1bnRpbWVWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcclxuXHQgICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICsgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xyXG5cdCAgICB9XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIGlmICghZW52KSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcclxuXHQgIH1cclxuXHQgIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xyXG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcclxuXHQgIH1cclxuXHJcblx0ICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xyXG5cclxuXHQgIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XHJcblx0ICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxyXG5cdCAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcclxuXHJcblx0ICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XHJcblx0ICAgIGlmIChvcHRpb25zLmhhc2gpIHtcclxuXHQgICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmlkcykge1xyXG5cdCAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICB2YXIgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcclxuXHJcblx0ICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xyXG5cdCAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XHJcblx0ICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xyXG5cdCAgICAgICAgdmFyIGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIC8vIEp1c3QgYWRkIHdhdGVyXHJcblx0ICB2YXIgY29udGFpbmVyID0ge1xyXG5cdCAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUpIHtcclxuXHQgICAgICBpZiAoIShuYW1lIGluIG9iaikpIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gb2JqW25hbWVdO1xyXG5cdCAgICB9LFxyXG5cdCAgICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChkZXB0aHMsIG5hbWUpIHtcclxuXHQgICAgICB2YXIgbGVuID0gZGVwdGhzLmxlbmd0aDtcclxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XHJcblx0ICAgICAgICAgIHJldHVybiBkZXB0aHNbaV1bbmFtZV07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9LFxyXG5cdCAgICBsYW1iZGE6IGZ1bmN0aW9uIGxhbWJkYShjdXJyZW50LCBjb250ZXh0KSB7XHJcblx0ICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXHJcblx0ICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxyXG5cclxuXHQgICAgZm46IGZ1bmN0aW9uIGZuKGkpIHtcclxuXHQgICAgICB2YXIgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xyXG5cdCAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xyXG5cdCAgICAgIHJldHVybiByZXQ7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICBwcm9ncmFtczogW10sXHJcblx0ICAgIHByb2dyYW06IGZ1bmN0aW9uIHByb2dyYW0oaSwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xyXG5cdCAgICAgIHZhciBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXHJcblx0ICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcclxuXHQgICAgICBpZiAoZGF0YSB8fCBkZXB0aHMgfHwgYmxvY2tQYXJhbXMgfHwgZGVjbGFyZWRCbG9ja1BhcmFtcykge1xyXG5cdCAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcclxuXHQgICAgICAgIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgZGF0YTogZnVuY3Rpb24gZGF0YSh2YWx1ZSwgZGVwdGgpIHtcclxuXHQgICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xyXG5cdCAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gdmFsdWU7XHJcblx0ICAgIH0sXHJcblx0ICAgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShwYXJhbSwgY29tbW9uKSB7XHJcblx0ICAgICAgdmFyIG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcclxuXHJcblx0ICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiBwYXJhbSAhPT0gY29tbW9uKSB7XHJcblx0ICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0dXJuIG9iajtcclxuXHQgICAgfSxcclxuXHQgICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xyXG5cdCAgICBudWxsQ29udGV4dDogX09iamVjdCRzZWFsKHt9KSxcclxuXHJcblx0ICAgIG5vb3A6IGVudi5WTS5ub29wLFxyXG5cdCAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxyXG5cdCAgfTtcclxuXHJcblx0ICBmdW5jdGlvbiByZXQoY29udGV4dCkge1xyXG5cdCAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xyXG5cclxuXHQgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XHJcblxyXG5cdCAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xyXG5cdCAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xyXG5cdCAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcclxuXHQgICAgfVxyXG5cdCAgICB2YXIgZGVwdGhzID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcclxuXHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMpIHtcclxuXHQgICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcclxuXHQgICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xyXG5cdCAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQgLyosIG9wdGlvbnMqLykge1xyXG5cdCAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgIH1cclxuXHQgICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XHJcblx0ICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgfVxyXG5cdCAgcmV0LmlzVG9wID0gdHJ1ZTtcclxuXHJcblx0ICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcclxuXHQgICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcclxuXHJcblx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XHJcblx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XHJcblx0ICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XHJcblx0ICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcclxuXHQgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHJcblx0ICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcclxuXHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcclxuXHQgIH07XHJcblx0ICByZXR1cm4gcmV0O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xyXG5cdCAgZnVuY3Rpb24gcHJvZyhjb250ZXh0KSB7XHJcblx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XHJcblxyXG5cdCAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcclxuXHQgICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XHJcblx0ICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIGZuKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgb3B0aW9ucy5kYXRhIHx8IGRhdGEsIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLCBjdXJyZW50RGVwdGhzKTtcclxuXHQgIH1cclxuXHJcblx0ICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XHJcblxyXG5cdCAgcHJvZy5wcm9ncmFtID0gaTtcclxuXHQgIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcclxuXHQgIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XHJcblx0ICByZXR1cm4gcHJvZztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgIGlmICghcGFydGlhbCkge1xyXG5cdCAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XHJcblx0ICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XHJcblx0ICAgIH1cclxuXHQgIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XHJcblx0ICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xyXG5cdCAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xyXG5cdCAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcclxuXHQgIH1cclxuXHQgIHJldHVybiBwYXJ0aWFsO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XHJcblx0ICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXHJcblx0ICB2YXIgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcclxuXHQgIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XHJcblx0ICBpZiAob3B0aW9ucy5pZHMpIHtcclxuXHQgICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBwYXJ0aWFsQmxvY2sgPSB1bmRlZmluZWQ7XHJcblx0ICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XHJcblx0ICAgIChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgb3B0aW9ucy5kYXRhID0gX2Jhc2UuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcclxuXHQgICAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXHJcblx0ICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcclxuXHQgICAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoY29udGV4dCkge1xyXG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcclxuXHJcblx0ICAgICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXHJcblx0ICAgICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cclxuXHQgICAgICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XHJcblx0ICAgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XHJcblx0ICAgICAgfTtcclxuXHQgICAgICBpZiAoZm4ucGFydGlhbHMpIHtcclxuXHQgICAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0pKCk7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcclxuXHQgICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcclxuXHQgIH1cclxuXHJcblx0ICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcclxuXHQgIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcblx0ICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbm9vcCgpIHtcclxuXHQgIHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcclxuXHQgIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xyXG5cdCAgICBkYXRhID0gZGF0YSA/IF9iYXNlLmNyZWF0ZUZyYW1lKGRhdGEpIDoge307XHJcblx0ICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XHJcblx0ICB9XHJcblx0ICByZXR1cm4gZGF0YTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcclxuXHQgIGlmIChmbi5kZWNvcmF0b3IpIHtcclxuXHQgICAgdmFyIHByb3BzID0ge307XHJcblx0ICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XHJcblx0ICB9XHJcblx0ICByZXR1cm4gcHJvZztcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMjQpLCBfX2VzTW9kdWxlOiB0cnVlIH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApLk9iamVjdC5zZWFsO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI1ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0Ly8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXHJcblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XHJcblxyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMjcpKCdzZWFsJywgZnVuY3Rpb24oJHNlYWwpe1xyXG5cdCAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xyXG5cdCAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwoaXQpIDogaXQ7XHJcblx0ICB9O1xyXG5cdH0pO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI2ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XHJcblx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcclxuXHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpXHJcblx0ICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxyXG5cdCAgLCBmYWlscyAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xyXG5cdCAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxyXG5cdCAgICAsIGV4cCA9IHt9O1xyXG5cdCAgZXhwW0tFWV0gPSBleGVjKGZuKTtcclxuXHQgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI4ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0dmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXHJcblx0ICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXHJcblx0ICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXHJcblx0ICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xyXG5cclxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XHJcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxyXG5cdCAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcclxuXHQgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXHJcblx0ICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxyXG5cdCAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcclxuXHQgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXHJcblx0ICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcclxuXHQgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXHJcblx0ICAgICwga2V5LCBvd24sIG91dDtcclxuXHQgIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xyXG5cdCAgZm9yKGtleSBpbiBzb3VyY2Upe1xyXG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcclxuXHQgICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcclxuXHQgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xyXG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxyXG5cdCAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xyXG5cdCAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcclxuXHQgICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cclxuXHQgICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcclxuXHQgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcclxuXHQgICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcclxuXHQgICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcclxuXHQgICAgICB2YXIgRiA9IGZ1bmN0aW9uKHBhcmFtKXtcclxuXHQgICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xyXG5cdCAgICAgIH07XHJcblx0ICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xyXG5cdCAgICAgIHJldHVybiBGO1xyXG5cdCAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcclxuXHQgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xyXG5cdCAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7XHJcblx0ICB9XHJcblx0fTtcclxuXHQvLyB0eXBlIGJpdG1hcFxyXG5cdCRleHBvcnQuRiA9IDE7ICAvLyBmb3JjZWRcclxuXHQkZXhwb3J0LkcgPSAyOyAgLy8gZ2xvYmFsXHJcblx0JGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpY1xyXG5cdCRleHBvcnQuUCA9IDg7ICAvLyBwcm90b1xyXG5cdCRleHBvcnQuQiA9IDE2OyAvLyBiaW5kXHJcblx0JGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcclxuXHRtb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjkgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxyXG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxyXG5cdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xyXG5cdGlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXHJcblxyXG4vKioqLyB9KSxcclxuLyogMzAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xyXG5cdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMxICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXHJcblx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XHJcblx0ICBhRnVuY3Rpb24oZm4pO1xyXG5cdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcclxuXHQgIHN3aXRjaChsZW5ndGgpe1xyXG5cdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcclxuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcclxuXHQgICAgfTtcclxuXHQgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XHJcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XHJcblx0ICAgIH07XHJcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xyXG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xyXG5cdCAgICB9O1xyXG5cdCAgfVxyXG5cdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xyXG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0fTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xyXG5cdCAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuXHQgIHJldHVybiBpdDtcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMzICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcclxuXHQgIHRyeSB7XHJcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcclxuXHQgIH0gY2F0Y2goZSl7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfVxyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyogZ2xvYmFsIHdpbmRvdyAqL1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKEhhbmRsZWJhcnMpIHtcclxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0ICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxyXG5cdCAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xyXG5cdCAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBIYW5kbGViYXJzO1xyXG5cdCAgfTtcclxuXHR9O1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXHJcblxyXG4vKioqLyB9KSxcclxuLyogMzUgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0dmFyIEFTVCA9IHtcclxuXHQgIC8vIFB1YmxpYyBBUEkgdXNlZCB0byBldmFsdWF0ZSBkZXJpdmVkIGF0dHJpYnV0ZXMgcmVnYXJkaW5nIEFTVCBub2Rlc1xyXG5cdCAgaGVscGVyczoge1xyXG5cdCAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XHJcblx0ICAgIC8vICogaXQgaXMgYW4gZWxpZ2libGUgaGVscGVyLCBhbmRcclxuXHQgICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcclxuXHQgICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24gaGVscGVyRXhwcmVzc2lvbihub2RlKSB7XHJcblx0ICAgICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nIHx8IChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHwgbm9kZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSAmJiAhIShub2RlLnBhcmFtcyAmJiBub2RlLnBhcmFtcy5sZW5ndGggfHwgbm9kZS5oYXNoKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIHNjb3BlZElkOiBmdW5jdGlvbiBzY29wZWRJZChwYXRoKSB7XHJcblx0ICAgICAgcmV0dXJuICgvXlxcLnx0aGlzXFxiLy50ZXN0KHBhdGgub3JpZ2luYWwpXHJcblx0ICAgICAgKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8vIGFuIElEIGlzIHNpbXBsZSBpZiBpdCBvbmx5IGhhcyBvbmUgcGFydCwgYW5kIHRoYXQgcGFydCBpcyBub3RcclxuXHQgICAgLy8gYC4uYCBvciBgdGhpc2AuXHJcblx0ICAgIHNpbXBsZUlkOiBmdW5jdGlvbiBzaW1wbGVJZChwYXRoKSB7XHJcblx0ICAgICAgcmV0dXJuIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aDtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdH07XHJcblxyXG5cdC8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXHJcblx0Ly8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFTVDtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLnBhcnNlID0gcGFyc2U7XHJcblxyXG5cdHZhciBfcGFyc2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XHJcblxyXG5cdHZhciBfcGFyc2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlcik7XHJcblxyXG5cdHZhciBfd2hpdGVzcGFjZUNvbnRyb2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcclxuXHJcblx0dmFyIF93aGl0ZXNwYWNlQ29udHJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGl0ZXNwYWNlQ29udHJvbCk7XHJcblxyXG5cdHZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xyXG5cclxuXHR2YXIgSGVscGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oZWxwZXJzKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdGV4cG9ydHMucGFyc2VyID0gX3BhcnNlcjJbJ2RlZmF1bHQnXTtcclxuXHJcblx0dmFyIHl5ID0ge307XHJcblx0X3V0aWxzLmV4dGVuZCh5eSwgSGVscGVycyk7XHJcblxyXG5cdGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XHJcblx0ICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxyXG5cdCAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykge1xyXG5cdCAgICByZXR1cm4gaW5wdXQ7XHJcblx0ICB9XHJcblxyXG5cdCAgX3BhcnNlcjJbJ2RlZmF1bHQnXS55eSA9IHl5O1xyXG5cclxuXHQgIC8vIEFsdGVyaW5nIHRoZSBzaGFyZWQgb2JqZWN0IGhlcmUsIGJ1dCB0aGlzIGlzIG9rIGFzIHBhcnNlciBpcyBhIHN5bmMgb3BlcmF0aW9uXHJcblx0ICB5eS5sb2NJbmZvID0gZnVuY3Rpb24gKGxvY0luZm8pIHtcclxuXHQgICAgcmV0dXJuIG5ldyB5eS5Tb3VyY2VMb2NhdGlvbihvcHRpb25zICYmIG9wdGlvbnMuc3JjTmFtZSwgbG9jSW5mbyk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHZhciBzdHJpcCA9IG5ldyBfd2hpdGVzcGFjZUNvbnRyb2wyWydkZWZhdWx0J10ob3B0aW9ucyk7XHJcblx0ICByZXR1cm4gc3RyaXAuYWNjZXB0KF9wYXJzZXIyWydkZWZhdWx0J10ucGFyc2UoaW5wdXQpKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvLyBGaWxlIGlnbm9yZWQgaW4gY292ZXJhZ2UgdGVzdHMgdmlhIHNldHRpbmcgaW4gLmlzdGFuYnVsLnltbFxyXG5cdC8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHR2YXIgaGFuZGxlYmFycyA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBwYXJzZXIgPSB7IHRyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHt9LFxyXG5cdCAgICAgICAgeXk6IHt9LFxyXG5cdCAgICAgICAgc3ltYm9sc186IHsgXCJlcnJvclwiOiAyLCBcInJvb3RcIjogMywgXCJwcm9ncmFtXCI6IDQsIFwiRU9GXCI6IDUsIFwicHJvZ3JhbV9yZXBldGl0aW9uMFwiOiA2LCBcInN0YXRlbWVudFwiOiA3LCBcIm11c3RhY2hlXCI6IDgsIFwiYmxvY2tcIjogOSwgXCJyYXdCbG9ja1wiOiAxMCwgXCJwYXJ0aWFsXCI6IDExLCBcInBhcnRpYWxCbG9ja1wiOiAxMiwgXCJjb250ZW50XCI6IDEzLCBcIkNPTU1FTlRcIjogMTQsIFwiQ09OVEVOVFwiOiAxNSwgXCJvcGVuUmF3QmxvY2tcIjogMTYsIFwicmF3QmxvY2tfcmVwZXRpdGlvbl9wbHVzMFwiOiAxNywgXCJFTkRfUkFXX0JMT0NLXCI6IDE4LCBcIk9QRU5fUkFXX0JMT0NLXCI6IDE5LCBcImhlbHBlck5hbWVcIjogMjAsIFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6IDIxLCBcIm9wZW5SYXdCbG9ja19vcHRpb24wXCI6IDIyLCBcIkNMT1NFX1JBV19CTE9DS1wiOiAyMywgXCJvcGVuQmxvY2tcIjogMjQsIFwiYmxvY2tfb3B0aW9uMFwiOiAyNSwgXCJjbG9zZUJsb2NrXCI6IDI2LCBcIm9wZW5JbnZlcnNlXCI6IDI3LCBcImJsb2NrX29wdGlvbjFcIjogMjgsIFwiT1BFTl9CTE9DS1wiOiAyOSwgXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjogMzAsIFwib3BlbkJsb2NrX29wdGlvbjBcIjogMzEsIFwib3BlbkJsb2NrX29wdGlvbjFcIjogMzIsIFwiQ0xPU0VcIjogMzMsIFwiT1BFTl9JTlZFUlNFXCI6IDM0LCBcIm9wZW5JbnZlcnNlX3JlcGV0aXRpb24wXCI6IDM1LCBcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjogMzYsIFwib3BlbkludmVyc2Vfb3B0aW9uMVwiOiAzNywgXCJvcGVuSW52ZXJzZUNoYWluXCI6IDM4LCBcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOiAzOSwgXCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wXCI6IDQwLCBcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOiA0MSwgXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjogNDIsIFwiaW52ZXJzZUFuZFByb2dyYW1cIjogNDMsIFwiSU5WRVJTRVwiOiA0NCwgXCJpbnZlcnNlQ2hhaW5cIjogNDUsIFwiaW52ZXJzZUNoYWluX29wdGlvbjBcIjogNDYsIFwiT1BFTl9FTkRCTE9DS1wiOiA0NywgXCJPUEVOXCI6IDQ4LCBcIm11c3RhY2hlX3JlcGV0aXRpb24wXCI6IDQ5LCBcIm11c3RhY2hlX29wdGlvbjBcIjogNTAsIFwiT1BFTl9VTkVTQ0FQRURcIjogNTEsIFwibXVzdGFjaGVfcmVwZXRpdGlvbjFcIjogNTIsIFwibXVzdGFjaGVfb3B0aW9uMVwiOiA1MywgXCJDTE9TRV9VTkVTQ0FQRURcIjogNTQsIFwiT1BFTl9QQVJUSUFMXCI6IDU1LCBcInBhcnRpYWxOYW1lXCI6IDU2LCBcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjogNTcsIFwicGFydGlhbF9vcHRpb24wXCI6IDU4LCBcIm9wZW5QYXJ0aWFsQmxvY2tcIjogNTksIFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6IDYwLCBcIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjBcIjogNjEsIFwib3BlblBhcnRpYWxCbG9ja19vcHRpb24wXCI6IDYyLCBcInBhcmFtXCI6IDYzLCBcInNleHByXCI6IDY0LCBcIk9QRU5fU0VYUFJcIjogNjUsIFwic2V4cHJfcmVwZXRpdGlvbjBcIjogNjYsIFwic2V4cHJfb3B0aW9uMFwiOiA2NywgXCJDTE9TRV9TRVhQUlwiOiA2OCwgXCJoYXNoXCI6IDY5LCBcImhhc2hfcmVwZXRpdGlvbl9wbHVzMFwiOiA3MCwgXCJoYXNoU2VnbWVudFwiOiA3MSwgXCJJRFwiOiA3MiwgXCJFUVVBTFNcIjogNzMsIFwiYmxvY2tQYXJhbXNcIjogNzQsIFwiT1BFTl9CTE9DS19QQVJBTVNcIjogNzUsIFwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMFwiOiA3NiwgXCJDTE9TRV9CTE9DS19QQVJBTVNcIjogNzcsIFwicGF0aFwiOiA3OCwgXCJkYXRhTmFtZVwiOiA3OSwgXCJTVFJJTkdcIjogODAsIFwiTlVNQkVSXCI6IDgxLCBcIkJPT0xFQU5cIjogODIsIFwiVU5ERUZJTkVEXCI6IDgzLCBcIk5VTExcIjogODQsIFwiREFUQVwiOiA4NSwgXCJwYXRoU2VnbWVudHNcIjogODYsIFwiU0VQXCI6IDg3LCBcIiRhY2NlcHRcIjogMCwgXCIkZW5kXCI6IDEgfSxcclxuXHQgICAgICAgIHRlcm1pbmFsc186IHsgMjogXCJlcnJvclwiLCA1OiBcIkVPRlwiLCAxNDogXCJDT01NRU5UXCIsIDE1OiBcIkNPTlRFTlRcIiwgMTg6IFwiRU5EX1JBV19CTE9DS1wiLCAxOTogXCJPUEVOX1JBV19CTE9DS1wiLCAyMzogXCJDTE9TRV9SQVdfQkxPQ0tcIiwgMjk6IFwiT1BFTl9CTE9DS1wiLCAzMzogXCJDTE9TRVwiLCAzNDogXCJPUEVOX0lOVkVSU0VcIiwgMzk6IFwiT1BFTl9JTlZFUlNFX0NIQUlOXCIsIDQ0OiBcIklOVkVSU0VcIiwgNDc6IFwiT1BFTl9FTkRCTE9DS1wiLCA0ODogXCJPUEVOXCIsIDUxOiBcIk9QRU5fVU5FU0NBUEVEXCIsIDU0OiBcIkNMT1NFX1VORVNDQVBFRFwiLCA1NTogXCJPUEVOX1BBUlRJQUxcIiwgNjA6IFwiT1BFTl9QQVJUSUFMX0JMT0NLXCIsIDY1OiBcIk9QRU5fU0VYUFJcIiwgNjg6IFwiQ0xPU0VfU0VYUFJcIiwgNzI6IFwiSURcIiwgNzM6IFwiRVFVQUxTXCIsIDc1OiBcIk9QRU5fQkxPQ0tfUEFSQU1TXCIsIDc3OiBcIkNMT1NFX0JMT0NLX1BBUkFNU1wiLCA4MDogXCJTVFJJTkdcIiwgODE6IFwiTlVNQkVSXCIsIDgyOiBcIkJPT0xFQU5cIiwgODM6IFwiVU5ERUZJTkVEXCIsIDg0OiBcIk5VTExcIiwgODU6IFwiREFUQVwiLCA4NzogXCJTRVBcIiB9LFxyXG5cdCAgICAgICAgcHJvZHVjdGlvbnNfOiBbMCwgWzMsIDJdLCBbNCwgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzEzLCAxXSwgWzEwLCAzXSwgWzE2LCA1XSwgWzksIDRdLCBbOSwgNF0sIFsyNCwgNl0sIFsyNywgNl0sIFszOCwgNl0sIFs0MywgMl0sIFs0NSwgM10sIFs0NSwgMV0sIFsyNiwgM10sIFs4LCA1XSwgWzgsIDVdLCBbMTEsIDVdLCBbMTIsIDNdLCBbNTksIDVdLCBbNjMsIDFdLCBbNjMsIDFdLCBbNjQsIDVdLCBbNjksIDFdLCBbNzEsIDNdLCBbNzQsIDNdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbNTYsIDFdLCBbNTYsIDFdLCBbNzksIDJdLCBbNzgsIDFdLCBbODYsIDNdLCBbODYsIDFdLCBbNiwgMF0sIFs2LCAyXSwgWzE3LCAxXSwgWzE3LCAyXSwgWzIxLCAwXSwgWzIxLCAyXSwgWzIyLCAwXSwgWzIyLCAxXSwgWzI1LCAwXSwgWzI1LCAxXSwgWzI4LCAwXSwgWzI4LCAxXSwgWzMwLCAwXSwgWzMwLCAyXSwgWzMxLCAwXSwgWzMxLCAxXSwgWzMyLCAwXSwgWzMyLCAxXSwgWzM1LCAwXSwgWzM1LCAyXSwgWzM2LCAwXSwgWzM2LCAxXSwgWzM3LCAwXSwgWzM3LCAxXSwgWzQwLCAwXSwgWzQwLCAyXSwgWzQxLCAwXSwgWzQxLCAxXSwgWzQyLCAwXSwgWzQyLCAxXSwgWzQ2LCAwXSwgWzQ2LCAxXSwgWzQ5LCAwXSwgWzQ5LCAyXSwgWzUwLCAwXSwgWzUwLCAxXSwgWzUyLCAwXSwgWzUyLCAyXSwgWzUzLCAwXSwgWzUzLCAxXSwgWzU3LCAwXSwgWzU3LCAyXSwgWzU4LCAwXSwgWzU4LCAxXSwgWzYxLCAwXSwgWzYxLCAyXSwgWzYyLCAwXSwgWzYyLCAxXSwgWzY2LCAwXSwgWzY2LCAyXSwgWzY3LCAwXSwgWzY3LCAxXSwgWzcwLCAxXSwgWzcwLCAyXSwgWzc2LCAxXSwgWzc2LCAyXV0sXHJcblx0ICAgICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB5eSwgeXlzdGF0ZSwgJCQsIF8kXHJcblx0ICAgICAgICAvKiovKSB7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XHJcblx0ICAgICAgICAgICAgc3dpdGNoICh5eXN0YXRlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkJFskMCAtIDFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDb21tZW50U3RhdGVtZW50JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDBdLCAkJFskMF0pLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQ29udGVudFN0YXRlbWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJCRbJDBdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVSYXdCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gM10sIHBhcmFtczogJCRbJDAgLSAyXSwgaGFzaDogJCRbJDAgLSAxXSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMCAtIDNdLCAkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRydWUsIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IG9wZW46ICQkWyQwIC0gNV0sIHBhdGg6ICQkWyQwIC0gNF0sIHBhcmFtczogJCRbJDAgLSAzXSwgaGFzaDogJCRbJDAgLSAyXSwgYmxvY2tQYXJhbXM6ICQkWyQwIC0gMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNV0sICQkWyQwXSkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDRdLCBwYXJhbXM6ICQkWyQwIC0gM10sIGhhc2g6ICQkWyQwIC0gMl0sIGJsb2NrUGFyYW1zOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDVdLCAkJFskMF0pIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSA0XSwgcGFyYW1zOiAkJFskMCAtIDNdLCBoYXNoOiAkJFskMCAtIDJdLCBibG9ja1BhcmFtczogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA1XSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gMV0sICQkWyQwIC0gMV0pLCBwcm9ncmFtOiAkJFskMF0gfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGludmVyc2UgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMCAtIDFdLmxvYyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmNoYWluZWQgPSB0cnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgc3RyaXA6ICQkWyQwIC0gMl0uc3RyaXAsIHByb2dyYW06IHByb2dyYW0sIGNoYWluOiB0cnVlIH07XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjA6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSAyXSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDAgLSA0XSwgeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pLCB0aGlzLl8kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDIzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwIC0gNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUGFydGlhbFN0YXRlbWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJCRbJDAgLSAzXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6ICQkWyQwIC0gMl0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogJCRbJDAgLSAxXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6ICcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNF0sICQkWyQwXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVBhcnRpYWxCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjY6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gM10sIHBhcmFtczogJCRbJDAgLSAyXSwgaGFzaDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTdWJFeHByZXNzaW9uJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAkJFskMCAtIDNdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogJCRbJDAgLSAyXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiAkJFskMCAtIDFdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMxOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwIC0gMl0pLCB2YWx1ZTogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkuaWQoJCRbJDAgLSAxXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdTdHJpbmdMaXRlcmFsJywgdmFsdWU6ICQkWyQwXSwgb3JpZ2luYWw6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bWJlckxpdGVyYWwnLCB2YWx1ZTogTnVtYmVyKCQkWyQwXSksIG9yaWdpbmFsOiBOdW1iZXIoJCRbJDBdKSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0Jvb2xlYW5MaXRlcmFsJywgdmFsdWU6ICQkWyQwXSA9PT0gJ3RydWUnLCBvcmlnaW5hbDogJCRbJDBdID09PSAndHJ1ZScsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgb3JpZ2luYWw6IHVuZGVmaW5lZCwgdmFsdWU6IHVuZGVmaW5lZCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bGxMaXRlcmFsJywgb3JpZ2luYWw6IG51bGwsIHZhbHVlOiBudWxsLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKHRydWUsICQkWyQwXSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDJdLnB1c2goeyBwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwIC0gMV0gfSk7dGhpcy4kID0gJCRbJDAgLSAyXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW3sgcGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSB9XTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0NzpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbJCRbJDBdXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1MDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNTE6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDU4OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1OTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDY1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3MDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzE6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDc4OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3OTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDgzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA4NjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDkwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5MTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDk1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5ODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTk6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDEwMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTAxOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgdGFibGU6IFt7IDM6IDEsIDQ6IDIsIDU6IFsyLCA0Nl0sIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyAxOiBbM10gfSwgeyA1OiBbMSwgNF0gfSwgeyA1OiBbMiwgMl0sIDc6IDUsIDg6IDYsIDk6IDcsIDEwOiA4LCAxMTogOSwgMTI6IDEwLCAxMzogMTEsIDE0OiBbMSwgMTJdLCAxNTogWzEsIDIwXSwgMTY6IDE3LCAxOTogWzEsIDIzXSwgMjQ6IDE1LCAyNzogMTYsIDI5OiBbMSwgMjFdLCAzNDogWzEsIDIyXSwgMzk6IFsyLCAyXSwgNDQ6IFsyLCAyXSwgNDc6IFsyLCAyXSwgNDg6IFsxLCAxM10sIDUxOiBbMSwgMTRdLCA1NTogWzEsIDE4XSwgNTk6IDE5LCA2MDogWzEsIDI0XSB9LCB7IDE6IFsyLCAxXSB9LCB7IDU6IFsyLCA0N10sIDE0OiBbMiwgNDddLCAxNTogWzIsIDQ3XSwgMTk6IFsyLCA0N10sIDI5OiBbMiwgNDddLCAzNDogWzIsIDQ3XSwgMzk6IFsyLCA0N10sIDQ0OiBbMiwgNDddLCA0NzogWzIsIDQ3XSwgNDg6IFsyLCA0N10sIDUxOiBbMiwgNDddLCA1NTogWzIsIDQ3XSwgNjA6IFsyLCA0N10gfSwgeyA1OiBbMiwgM10sIDE0OiBbMiwgM10sIDE1OiBbMiwgM10sIDE5OiBbMiwgM10sIDI5OiBbMiwgM10sIDM0OiBbMiwgM10sIDM5OiBbMiwgM10sIDQ0OiBbMiwgM10sIDQ3OiBbMiwgM10sIDQ4OiBbMiwgM10sIDUxOiBbMiwgM10sIDU1OiBbMiwgM10sIDYwOiBbMiwgM10gfSwgeyA1OiBbMiwgNF0sIDE0OiBbMiwgNF0sIDE1OiBbMiwgNF0sIDE5OiBbMiwgNF0sIDI5OiBbMiwgNF0sIDM0OiBbMiwgNF0sIDM5OiBbMiwgNF0sIDQ0OiBbMiwgNF0sIDQ3OiBbMiwgNF0sIDQ4OiBbMiwgNF0sIDUxOiBbMiwgNF0sIDU1OiBbMiwgNF0sIDYwOiBbMiwgNF0gfSwgeyA1OiBbMiwgNV0sIDE0OiBbMiwgNV0sIDE1OiBbMiwgNV0sIDE5OiBbMiwgNV0sIDI5OiBbMiwgNV0sIDM0OiBbMiwgNV0sIDM5OiBbMiwgNV0sIDQ0OiBbMiwgNV0sIDQ3OiBbMiwgNV0sIDQ4OiBbMiwgNV0sIDUxOiBbMiwgNV0sIDU1OiBbMiwgNV0sIDYwOiBbMiwgNV0gfSwgeyA1OiBbMiwgNl0sIDE0OiBbMiwgNl0sIDE1OiBbMiwgNl0sIDE5OiBbMiwgNl0sIDI5OiBbMiwgNl0sIDM0OiBbMiwgNl0sIDM5OiBbMiwgNl0sIDQ0OiBbMiwgNl0sIDQ3OiBbMiwgNl0sIDQ4OiBbMiwgNl0sIDUxOiBbMiwgNl0sIDU1OiBbMiwgNl0sIDYwOiBbMiwgNl0gfSwgeyA1OiBbMiwgN10sIDE0OiBbMiwgN10sIDE1OiBbMiwgN10sIDE5OiBbMiwgN10sIDI5OiBbMiwgN10sIDM0OiBbMiwgN10sIDM5OiBbMiwgN10sIDQ0OiBbMiwgN10sIDQ3OiBbMiwgN10sIDQ4OiBbMiwgN10sIDUxOiBbMiwgN10sIDU1OiBbMiwgN10sIDYwOiBbMiwgN10gfSwgeyA1OiBbMiwgOF0sIDE0OiBbMiwgOF0sIDE1OiBbMiwgOF0sIDE5OiBbMiwgOF0sIDI5OiBbMiwgOF0sIDM0OiBbMiwgOF0sIDM5OiBbMiwgOF0sIDQ0OiBbMiwgOF0sIDQ3OiBbMiwgOF0sIDQ4OiBbMiwgOF0sIDUxOiBbMiwgOF0sIDU1OiBbMiwgOF0sIDYwOiBbMiwgOF0gfSwgeyA1OiBbMiwgOV0sIDE0OiBbMiwgOV0sIDE1OiBbMiwgOV0sIDE5OiBbMiwgOV0sIDI5OiBbMiwgOV0sIDM0OiBbMiwgOV0sIDM5OiBbMiwgOV0sIDQ0OiBbMiwgOV0sIDQ3OiBbMiwgOV0sIDQ4OiBbMiwgOV0sIDUxOiBbMiwgOV0sIDU1OiBbMiwgOV0sIDYwOiBbMiwgOV0gfSwgeyAyMDogMjUsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDM2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDM3LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDM5OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNDogMzgsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDEzOiA0MCwgMTU6IFsxLCAyMF0sIDE3OiAzOSB9LCB7IDIwOiA0MiwgNTY6IDQxLCA2NDogNDMsIDY1OiBbMSwgNDRdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDQ1LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDU6IFsyLCAxMF0sIDE0OiBbMiwgMTBdLCAxNTogWzIsIDEwXSwgMTg6IFsyLCAxMF0sIDE5OiBbMiwgMTBdLCAyOTogWzIsIDEwXSwgMzQ6IFsyLCAxMF0sIDM5OiBbMiwgMTBdLCA0NDogWzIsIDEwXSwgNDc6IFsyLCAxMF0sIDQ4OiBbMiwgMTBdLCA1MTogWzIsIDEwXSwgNTU6IFsyLCAxMF0sIDYwOiBbMiwgMTBdIH0sIHsgMjA6IDQ2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0NywgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDgsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQyLCA1NjogNDksIDY0OiA0MywgNjU6IFsxLCA0NF0sIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMzM6IFsyLCA3OF0sIDQ5OiA1MCwgNjU6IFsyLCA3OF0sIDcyOiBbMiwgNzhdLCA4MDogWzIsIDc4XSwgODE6IFsyLCA3OF0sIDgyOiBbMiwgNzhdLCA4MzogWzIsIDc4XSwgODQ6IFsyLCA3OF0sIDg1OiBbMiwgNzhdIH0sIHsgMjM6IFsyLCAzM10sIDMzOiBbMiwgMzNdLCA1NDogWzIsIDMzXSwgNjU6IFsyLCAzM10sIDY4OiBbMiwgMzNdLCA3MjogWzIsIDMzXSwgNzU6IFsyLCAzM10sIDgwOiBbMiwgMzNdLCA4MTogWzIsIDMzXSwgODI6IFsyLCAzM10sIDgzOiBbMiwgMzNdLCA4NDogWzIsIDMzXSwgODU6IFsyLCAzM10gfSwgeyAyMzogWzIsIDM0XSwgMzM6IFsyLCAzNF0sIDU0OiBbMiwgMzRdLCA2NTogWzIsIDM0XSwgNjg6IFsyLCAzNF0sIDcyOiBbMiwgMzRdLCA3NTogWzIsIDM0XSwgODA6IFsyLCAzNF0sIDgxOiBbMiwgMzRdLCA4MjogWzIsIDM0XSwgODM6IFsyLCAzNF0sIDg0OiBbMiwgMzRdLCA4NTogWzIsIDM0XSB9LCB7IDIzOiBbMiwgMzVdLCAzMzogWzIsIDM1XSwgNTQ6IFsyLCAzNV0sIDY1OiBbMiwgMzVdLCA2ODogWzIsIDM1XSwgNzI6IFsyLCAzNV0sIDc1OiBbMiwgMzVdLCA4MDogWzIsIDM1XSwgODE6IFsyLCAzNV0sIDgyOiBbMiwgMzVdLCA4MzogWzIsIDM1XSwgODQ6IFsyLCAzNV0sIDg1OiBbMiwgMzVdIH0sIHsgMjM6IFsyLCAzNl0sIDMzOiBbMiwgMzZdLCA1NDogWzIsIDM2XSwgNjU6IFsyLCAzNl0sIDY4OiBbMiwgMzZdLCA3MjogWzIsIDM2XSwgNzU6IFsyLCAzNl0sIDgwOiBbMiwgMzZdLCA4MTogWzIsIDM2XSwgODI6IFsyLCAzNl0sIDgzOiBbMiwgMzZdLCA4NDogWzIsIDM2XSwgODU6IFsyLCAzNl0gfSwgeyAyMzogWzIsIDM3XSwgMzM6IFsyLCAzN10sIDU0OiBbMiwgMzddLCA2NTogWzIsIDM3XSwgNjg6IFsyLCAzN10sIDcyOiBbMiwgMzddLCA3NTogWzIsIDM3XSwgODA6IFsyLCAzN10sIDgxOiBbMiwgMzddLCA4MjogWzIsIDM3XSwgODM6IFsyLCAzN10sIDg0OiBbMiwgMzddLCA4NTogWzIsIDM3XSB9LCB7IDIzOiBbMiwgMzhdLCAzMzogWzIsIDM4XSwgNTQ6IFsyLCAzOF0sIDY1OiBbMiwgMzhdLCA2ODogWzIsIDM4XSwgNzI6IFsyLCAzOF0sIDc1OiBbMiwgMzhdLCA4MDogWzIsIDM4XSwgODE6IFsyLCAzOF0sIDgyOiBbMiwgMzhdLCA4MzogWzIsIDM4XSwgODQ6IFsyLCAzOF0sIDg1OiBbMiwgMzhdIH0sIHsgMjM6IFsyLCAzOV0sIDMzOiBbMiwgMzldLCA1NDogWzIsIDM5XSwgNjU6IFsyLCAzOV0sIDY4OiBbMiwgMzldLCA3MjogWzIsIDM5XSwgNzU6IFsyLCAzOV0sIDgwOiBbMiwgMzldLCA4MTogWzIsIDM5XSwgODI6IFsyLCAzOV0sIDgzOiBbMiwgMzldLCA4NDogWzIsIDM5XSwgODU6IFsyLCAzOV0gfSwgeyAyMzogWzIsIDQzXSwgMzM6IFsyLCA0M10sIDU0OiBbMiwgNDNdLCA2NTogWzIsIDQzXSwgNjg6IFsyLCA0M10sIDcyOiBbMiwgNDNdLCA3NTogWzIsIDQzXSwgODA6IFsyLCA0M10sIDgxOiBbMiwgNDNdLCA4MjogWzIsIDQzXSwgODM6IFsyLCA0M10sIDg0OiBbMiwgNDNdLCA4NTogWzIsIDQzXSwgODc6IFsxLCA1MV0gfSwgeyA3MjogWzEsIDM1XSwgODY6IDUyIH0sIHsgMjM6IFsyLCA0NV0sIDMzOiBbMiwgNDVdLCA1NDogWzIsIDQ1XSwgNjU6IFsyLCA0NV0sIDY4OiBbMiwgNDVdLCA3MjogWzIsIDQ1XSwgNzU6IFsyLCA0NV0sIDgwOiBbMiwgNDVdLCA4MTogWzIsIDQ1XSwgODI6IFsyLCA0NV0sIDgzOiBbMiwgNDVdLCA4NDogWzIsIDQ1XSwgODU6IFsyLCA0NV0sIDg3OiBbMiwgNDVdIH0sIHsgNTI6IDUzLCA1NDogWzIsIDgyXSwgNjU6IFsyLCA4Ml0sIDcyOiBbMiwgODJdLCA4MDogWzIsIDgyXSwgODE6IFsyLCA4Ml0sIDgyOiBbMiwgODJdLCA4MzogWzIsIDgyXSwgODQ6IFsyLCA4Ml0sIDg1OiBbMiwgODJdIH0sIHsgMjU6IDU0LCAzODogNTYsIDM5OiBbMSwgNThdLCA0MzogNTcsIDQ0OiBbMSwgNTldLCA0NTogNTUsIDQ3OiBbMiwgNTRdIH0sIHsgMjg6IDYwLCA0MzogNjEsIDQ0OiBbMSwgNTldLCA0NzogWzIsIDU2XSB9LCB7IDEzOiA2MywgMTU6IFsxLCAyMF0sIDE4OiBbMSwgNjJdIH0sIHsgMTU6IFsyLCA0OF0sIDE4OiBbMiwgNDhdIH0sIHsgMzM6IFsyLCA4Nl0sIDU3OiA2NCwgNjU6IFsyLCA4Nl0sIDcyOiBbMiwgODZdLCA4MDogWzIsIDg2XSwgODE6IFsyLCA4Nl0sIDgyOiBbMiwgODZdLCA4MzogWzIsIDg2XSwgODQ6IFsyLCA4Nl0sIDg1OiBbMiwgODZdIH0sIHsgMzM6IFsyLCA0MF0sIDY1OiBbMiwgNDBdLCA3MjogWzIsIDQwXSwgODA6IFsyLCA0MF0sIDgxOiBbMiwgNDBdLCA4MjogWzIsIDQwXSwgODM6IFsyLCA0MF0sIDg0OiBbMiwgNDBdLCA4NTogWzIsIDQwXSB9LCB7IDMzOiBbMiwgNDFdLCA2NTogWzIsIDQxXSwgNzI6IFsyLCA0MV0sIDgwOiBbMiwgNDFdLCA4MTogWzIsIDQxXSwgODI6IFsyLCA0MV0sIDgzOiBbMiwgNDFdLCA4NDogWzIsIDQxXSwgODU6IFsyLCA0MV0gfSwgeyAyMDogNjUsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjY6IDY2LCA0NzogWzEsIDY3XSB9LCB7IDMwOiA2OCwgMzM6IFsyLCA1OF0sIDY1OiBbMiwgNThdLCA3MjogWzIsIDU4XSwgNzU6IFsyLCA1OF0sIDgwOiBbMiwgNThdLCA4MTogWzIsIDU4XSwgODI6IFsyLCA1OF0sIDgzOiBbMiwgNThdLCA4NDogWzIsIDU4XSwgODU6IFsyLCA1OF0gfSwgeyAzMzogWzIsIDY0XSwgMzU6IDY5LCA2NTogWzIsIDY0XSwgNzI6IFsyLCA2NF0sIDc1OiBbMiwgNjRdLCA4MDogWzIsIDY0XSwgODE6IFsyLCA2NF0sIDgyOiBbMiwgNjRdLCA4MzogWzIsIDY0XSwgODQ6IFsyLCA2NF0sIDg1OiBbMiwgNjRdIH0sIHsgMjE6IDcwLCAyMzogWzIsIDUwXSwgNjU6IFsyLCA1MF0sIDcyOiBbMiwgNTBdLCA4MDogWzIsIDUwXSwgODE6IFsyLCA1MF0sIDgyOiBbMiwgNTBdLCA4MzogWzIsIDUwXSwgODQ6IFsyLCA1MF0sIDg1OiBbMiwgNTBdIH0sIHsgMzM6IFsyLCA5MF0sIDYxOiA3MSwgNjU6IFsyLCA5MF0sIDcyOiBbMiwgOTBdLCA4MDogWzIsIDkwXSwgODE6IFsyLCA5MF0sIDgyOiBbMiwgOTBdLCA4MzogWzIsIDkwXSwgODQ6IFsyLCA5MF0sIDg1OiBbMiwgOTBdIH0sIHsgMjA6IDc1LCAzMzogWzIsIDgwXSwgNTA6IDcyLCA2MzogNzMsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiA3NCwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNzI6IFsxLCA4MF0gfSwgeyAyMzogWzIsIDQyXSwgMzM6IFsyLCA0Ml0sIDU0OiBbMiwgNDJdLCA2NTogWzIsIDQyXSwgNjg6IFsyLCA0Ml0sIDcyOiBbMiwgNDJdLCA3NTogWzIsIDQyXSwgODA6IFsyLCA0Ml0sIDgxOiBbMiwgNDJdLCA4MjogWzIsIDQyXSwgODM6IFsyLCA0Ml0sIDg0OiBbMiwgNDJdLCA4NTogWzIsIDQyXSwgODc6IFsxLCA1MV0gfSwgeyAyMDogNzUsIDUzOiA4MSwgNTQ6IFsyLCA4NF0sIDYzOiA4MiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDgzLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyNjogODQsIDQ3OiBbMSwgNjddIH0sIHsgNDc6IFsyLCA1NV0gfSwgeyA0OiA4NSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCAzOTogWzIsIDQ2XSwgNDQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDQ3OiBbMiwgMjBdIH0sIHsgMjA6IDg2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDg3LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDI2OiA4OCwgNDc6IFsxLCA2N10gfSwgeyA0NzogWzIsIDU3XSB9LCB7IDU6IFsyLCAxMV0sIDE0OiBbMiwgMTFdLCAxNTogWzIsIDExXSwgMTk6IFsyLCAxMV0sIDI5OiBbMiwgMTFdLCAzNDogWzIsIDExXSwgMzk6IFsyLCAxMV0sIDQ0OiBbMiwgMTFdLCA0NzogWzIsIDExXSwgNDg6IFsyLCAxMV0sIDUxOiBbMiwgMTFdLCA1NTogWzIsIDExXSwgNjA6IFsyLCAxMV0gfSwgeyAxNTogWzIsIDQ5XSwgMTg6IFsyLCA0OV0gfSwgeyAyMDogNzUsIDMzOiBbMiwgODhdLCA1ODogODksIDYzOiA5MCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDkxLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA2NTogWzIsIDk0XSwgNjY6IDkyLCA2ODogWzIsIDk0XSwgNzI6IFsyLCA5NF0sIDgwOiBbMiwgOTRdLCA4MTogWzIsIDk0XSwgODI6IFsyLCA5NF0sIDgzOiBbMiwgOTRdLCA4NDogWzIsIDk0XSwgODU6IFsyLCA5NF0gfSwgeyA1OiBbMiwgMjVdLCAxNDogWzIsIDI1XSwgMTU6IFsyLCAyNV0sIDE5OiBbMiwgMjVdLCAyOTogWzIsIDI1XSwgMzQ6IFsyLCAyNV0sIDM5OiBbMiwgMjVdLCA0NDogWzIsIDI1XSwgNDc6IFsyLCAyNV0sIDQ4OiBbMiwgMjVdLCA1MTogWzIsIDI1XSwgNTU6IFsyLCAyNV0sIDYwOiBbMiwgMjVdIH0sIHsgMjA6IDkzLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA3NSwgMzE6IDk0LCAzMzogWzIsIDYwXSwgNjM6IDk1LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTYsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA2MF0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDMzOiBbMiwgNjZdLCAzNjogOTcsIDYzOiA5OCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDk5LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc1OiBbMiwgNjZdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAyMjogMTAwLCAyMzogWzIsIDUyXSwgNjM6IDEwMSwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEwMiwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAzMzogWzIsIDkyXSwgNjI6IDEwMywgNjM6IDEwNCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEwNSwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMzM6IFsxLCAxMDZdIH0sIHsgMzM6IFsyLCA3OV0sIDY1OiBbMiwgNzldLCA3MjogWzIsIDc5XSwgODA6IFsyLCA3OV0sIDgxOiBbMiwgNzldLCA4MjogWzIsIDc5XSwgODM6IFsyLCA3OV0sIDg0OiBbMiwgNzldLCA4NTogWzIsIDc5XSB9LCB7IDMzOiBbMiwgODFdIH0sIHsgMjM6IFsyLCAyN10sIDMzOiBbMiwgMjddLCA1NDogWzIsIDI3XSwgNjU6IFsyLCAyN10sIDY4OiBbMiwgMjddLCA3MjogWzIsIDI3XSwgNzU6IFsyLCAyN10sIDgwOiBbMiwgMjddLCA4MTogWzIsIDI3XSwgODI6IFsyLCAyN10sIDgzOiBbMiwgMjddLCA4NDogWzIsIDI3XSwgODU6IFsyLCAyN10gfSwgeyAyMzogWzIsIDI4XSwgMzM6IFsyLCAyOF0sIDU0OiBbMiwgMjhdLCA2NTogWzIsIDI4XSwgNjg6IFsyLCAyOF0sIDcyOiBbMiwgMjhdLCA3NTogWzIsIDI4XSwgODA6IFsyLCAyOF0sIDgxOiBbMiwgMjhdLCA4MjogWzIsIDI4XSwgODM6IFsyLCAyOF0sIDg0OiBbMiwgMjhdLCA4NTogWzIsIDI4XSB9LCB7IDIzOiBbMiwgMzBdLCAzMzogWzIsIDMwXSwgNTQ6IFsyLCAzMF0sIDY4OiBbMiwgMzBdLCA3MTogMTA3LCA3MjogWzEsIDEwOF0sIDc1OiBbMiwgMzBdIH0sIHsgMjM6IFsyLCA5OF0sIDMzOiBbMiwgOThdLCA1NDogWzIsIDk4XSwgNjg6IFsyLCA5OF0sIDcyOiBbMiwgOThdLCA3NTogWzIsIDk4XSB9LCB7IDIzOiBbMiwgNDVdLCAzMzogWzIsIDQ1XSwgNTQ6IFsyLCA0NV0sIDY1OiBbMiwgNDVdLCA2ODogWzIsIDQ1XSwgNzI6IFsyLCA0NV0sIDczOiBbMSwgMTA5XSwgNzU6IFsyLCA0NV0sIDgwOiBbMiwgNDVdLCA4MTogWzIsIDQ1XSwgODI6IFsyLCA0NV0sIDgzOiBbMiwgNDVdLCA4NDogWzIsIDQ1XSwgODU6IFsyLCA0NV0sIDg3OiBbMiwgNDVdIH0sIHsgMjM6IFsyLCA0NF0sIDMzOiBbMiwgNDRdLCA1NDogWzIsIDQ0XSwgNjU6IFsyLCA0NF0sIDY4OiBbMiwgNDRdLCA3MjogWzIsIDQ0XSwgNzU6IFsyLCA0NF0sIDgwOiBbMiwgNDRdLCA4MTogWzIsIDQ0XSwgODI6IFsyLCA0NF0sIDgzOiBbMiwgNDRdLCA4NDogWzIsIDQ0XSwgODU6IFsyLCA0NF0sIDg3OiBbMiwgNDRdIH0sIHsgNTQ6IFsxLCAxMTBdIH0sIHsgNTQ6IFsyLCA4M10sIDY1OiBbMiwgODNdLCA3MjogWzIsIDgzXSwgODA6IFsyLCA4M10sIDgxOiBbMiwgODNdLCA4MjogWzIsIDgzXSwgODM6IFsyLCA4M10sIDg0OiBbMiwgODNdLCA4NTogWzIsIDgzXSB9LCB7IDU0OiBbMiwgODVdIH0sIHsgNTogWzIsIDEzXSwgMTQ6IFsyLCAxM10sIDE1OiBbMiwgMTNdLCAxOTogWzIsIDEzXSwgMjk6IFsyLCAxM10sIDM0OiBbMiwgMTNdLCAzOTogWzIsIDEzXSwgNDQ6IFsyLCAxM10sIDQ3OiBbMiwgMTNdLCA0ODogWzIsIDEzXSwgNTE6IFsyLCAxM10sIDU1OiBbMiwgMTNdLCA2MDogWzIsIDEzXSB9LCB7IDM4OiA1NiwgMzk6IFsxLCA1OF0sIDQzOiA1NywgNDQ6IFsxLCA1OV0sIDQ1OiAxMTIsIDQ2OiAxMTEsIDQ3OiBbMiwgNzZdIH0sIHsgMzM6IFsyLCA3MF0sIDQwOiAxMTMsIDY1OiBbMiwgNzBdLCA3MjogWzIsIDcwXSwgNzU6IFsyLCA3MF0sIDgwOiBbMiwgNzBdLCA4MTogWzIsIDcwXSwgODI6IFsyLCA3MF0sIDgzOiBbMiwgNzBdLCA4NDogWzIsIDcwXSwgODU6IFsyLCA3MF0gfSwgeyA0NzogWzIsIDE4XSB9LCB7IDU6IFsyLCAxNF0sIDE0OiBbMiwgMTRdLCAxNTogWzIsIDE0XSwgMTk6IFsyLCAxNF0sIDI5OiBbMiwgMTRdLCAzNDogWzIsIDE0XSwgMzk6IFsyLCAxNF0sIDQ0OiBbMiwgMTRdLCA0NzogWzIsIDE0XSwgNDg6IFsyLCAxNF0sIDUxOiBbMiwgMTRdLCA1NTogWzIsIDE0XSwgNjA6IFsyLCAxNF0gfSwgeyAzMzogWzEsIDExNF0gfSwgeyAzMzogWzIsIDg3XSwgNjU6IFsyLCA4N10sIDcyOiBbMiwgODddLCA4MDogWzIsIDg3XSwgODE6IFsyLCA4N10sIDgyOiBbMiwgODddLCA4MzogWzIsIDg3XSwgODQ6IFsyLCA4N10sIDg1OiBbMiwgODddIH0sIHsgMzM6IFsyLCA4OV0gfSwgeyAyMDogNzUsIDYzOiAxMTYsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY3OiAxMTUsIDY4OiBbMiwgOTZdLCA2OTogMTE3LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzEsIDExOF0gfSwgeyAzMjogMTE5LCAzMzogWzIsIDYyXSwgNzQ6IDEyMCwgNzU6IFsxLCAxMjFdIH0sIHsgMzM6IFsyLCA1OV0sIDY1OiBbMiwgNTldLCA3MjogWzIsIDU5XSwgNzU6IFsyLCA1OV0sIDgwOiBbMiwgNTldLCA4MTogWzIsIDU5XSwgODI6IFsyLCA1OV0sIDgzOiBbMiwgNTldLCA4NDogWzIsIDU5XSwgODU6IFsyLCA1OV0gfSwgeyAzMzogWzIsIDYxXSwgNzU6IFsyLCA2MV0gfSwgeyAzMzogWzIsIDY4XSwgMzc6IDEyMiwgNzQ6IDEyMywgNzU6IFsxLCAxMjFdIH0sIHsgMzM6IFsyLCA2NV0sIDY1OiBbMiwgNjVdLCA3MjogWzIsIDY1XSwgNzU6IFsyLCA2NV0sIDgwOiBbMiwgNjVdLCA4MTogWzIsIDY1XSwgODI6IFsyLCA2NV0sIDgzOiBbMiwgNjVdLCA4NDogWzIsIDY1XSwgODU6IFsyLCA2NV0gfSwgeyAzMzogWzIsIDY3XSwgNzU6IFsyLCA2N10gfSwgeyAyMzogWzEsIDEyNF0gfSwgeyAyMzogWzIsIDUxXSwgNjU6IFsyLCA1MV0sIDcyOiBbMiwgNTFdLCA4MDogWzIsIDUxXSwgODE6IFsyLCA1MV0sIDgyOiBbMiwgNTFdLCA4MzogWzIsIDUxXSwgODQ6IFsyLCA1MV0sIDg1OiBbMiwgNTFdIH0sIHsgMjM6IFsyLCA1M10gfSwgeyAzMzogWzEsIDEyNV0gfSwgeyAzMzogWzIsIDkxXSwgNjU6IFsyLCA5MV0sIDcyOiBbMiwgOTFdLCA4MDogWzIsIDkxXSwgODE6IFsyLCA5MV0sIDgyOiBbMiwgOTFdLCA4MzogWzIsIDkxXSwgODQ6IFsyLCA5MV0sIDg1OiBbMiwgOTFdIH0sIHsgMzM6IFsyLCA5M10gfSwgeyA1OiBbMiwgMjJdLCAxNDogWzIsIDIyXSwgMTU6IFsyLCAyMl0sIDE5OiBbMiwgMjJdLCAyOTogWzIsIDIyXSwgMzQ6IFsyLCAyMl0sIDM5OiBbMiwgMjJdLCA0NDogWzIsIDIyXSwgNDc6IFsyLCAyMl0sIDQ4OiBbMiwgMjJdLCA1MTogWzIsIDIyXSwgNTU6IFsyLCAyMl0sIDYwOiBbMiwgMjJdIH0sIHsgMjM6IFsyLCA5OV0sIDMzOiBbMiwgOTldLCA1NDogWzIsIDk5XSwgNjg6IFsyLCA5OV0sIDcyOiBbMiwgOTldLCA3NTogWzIsIDk5XSB9LCB7IDczOiBbMSwgMTA5XSB9LCB7IDIwOiA3NSwgNjM6IDEyNiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjNdLCAxNDogWzIsIDIzXSwgMTU6IFsyLCAyM10sIDE5OiBbMiwgMjNdLCAyOTogWzIsIDIzXSwgMzQ6IFsyLCAyM10sIDM5OiBbMiwgMjNdLCA0NDogWzIsIDIzXSwgNDc6IFsyLCAyM10sIDQ4OiBbMiwgMjNdLCA1MTogWzIsIDIzXSwgNTU6IFsyLCAyM10sIDYwOiBbMiwgMjNdIH0sIHsgNDc6IFsyLCAxOV0gfSwgeyA0NzogWzIsIDc3XSB9LCB7IDIwOiA3NSwgMzM6IFsyLCA3Ml0sIDQxOiAxMjcsIDYzOiAxMjgsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiAxMjksIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA3Ml0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjRdLCAxNDogWzIsIDI0XSwgMTU6IFsyLCAyNF0sIDE5OiBbMiwgMjRdLCAyOTogWzIsIDI0XSwgMzQ6IFsyLCAyNF0sIDM5OiBbMiwgMjRdLCA0NDogWzIsIDI0XSwgNDc6IFsyLCAyNF0sIDQ4OiBbMiwgMjRdLCA1MTogWzIsIDI0XSwgNTU6IFsyLCAyNF0sIDYwOiBbMiwgMjRdIH0sIHsgNjg6IFsxLCAxMzBdIH0sIHsgNjU6IFsyLCA5NV0sIDY4OiBbMiwgOTVdLCA3MjogWzIsIDk1XSwgODA6IFsyLCA5NV0sIDgxOiBbMiwgOTVdLCA4MjogWzIsIDk1XSwgODM6IFsyLCA5NV0sIDg0OiBbMiwgOTVdLCA4NTogWzIsIDk1XSB9LCB7IDY4OiBbMiwgOTddIH0sIHsgNTogWzIsIDIxXSwgMTQ6IFsyLCAyMV0sIDE1OiBbMiwgMjFdLCAxOTogWzIsIDIxXSwgMjk6IFsyLCAyMV0sIDM0OiBbMiwgMjFdLCAzOTogWzIsIDIxXSwgNDQ6IFsyLCAyMV0sIDQ3OiBbMiwgMjFdLCA0ODogWzIsIDIxXSwgNTE6IFsyLCAyMV0sIDU1OiBbMiwgMjFdLCA2MDogWzIsIDIxXSB9LCB7IDMzOiBbMSwgMTMxXSB9LCB7IDMzOiBbMiwgNjNdIH0sIHsgNzI6IFsxLCAxMzNdLCA3NjogMTMyIH0sIHsgMzM6IFsxLCAxMzRdIH0sIHsgMzM6IFsyLCA2OV0gfSwgeyAxNTogWzIsIDEyXSB9LCB7IDE0OiBbMiwgMjZdLCAxNTogWzIsIDI2XSwgMTk6IFsyLCAyNl0sIDI5OiBbMiwgMjZdLCAzNDogWzIsIDI2XSwgNDc6IFsyLCAyNl0sIDQ4OiBbMiwgMjZdLCA1MTogWzIsIDI2XSwgNTU6IFsyLCAyNl0sIDYwOiBbMiwgMjZdIH0sIHsgMjM6IFsyLCAzMV0sIDMzOiBbMiwgMzFdLCA1NDogWzIsIDMxXSwgNjg6IFsyLCAzMV0sIDcyOiBbMiwgMzFdLCA3NTogWzIsIDMxXSB9LCB7IDMzOiBbMiwgNzRdLCA0MjogMTM1LCA3NDogMTM2LCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDcxXSwgNjU6IFsyLCA3MV0sIDcyOiBbMiwgNzFdLCA3NTogWzIsIDcxXSwgODA6IFsyLCA3MV0sIDgxOiBbMiwgNzFdLCA4MjogWzIsIDcxXSwgODM6IFsyLCA3MV0sIDg0OiBbMiwgNzFdLCA4NTogWzIsIDcxXSB9LCB7IDMzOiBbMiwgNzNdLCA3NTogWzIsIDczXSB9LCB7IDIzOiBbMiwgMjldLCAzMzogWzIsIDI5XSwgNTQ6IFsyLCAyOV0sIDY1OiBbMiwgMjldLCA2ODogWzIsIDI5XSwgNzI6IFsyLCAyOV0sIDc1OiBbMiwgMjldLCA4MDogWzIsIDI5XSwgODE6IFsyLCAyOV0sIDgyOiBbMiwgMjldLCA4MzogWzIsIDI5XSwgODQ6IFsyLCAyOV0sIDg1OiBbMiwgMjldIH0sIHsgMTQ6IFsyLCAxNV0sIDE1OiBbMiwgMTVdLCAxOTogWzIsIDE1XSwgMjk6IFsyLCAxNV0sIDM0OiBbMiwgMTVdLCAzOTogWzIsIDE1XSwgNDQ6IFsyLCAxNV0sIDQ3OiBbMiwgMTVdLCA0ODogWzIsIDE1XSwgNTE6IFsyLCAxNV0sIDU1OiBbMiwgMTVdLCA2MDogWzIsIDE1XSB9LCB7IDcyOiBbMSwgMTM4XSwgNzc6IFsxLCAxMzddIH0sIHsgNzI6IFsyLCAxMDBdLCA3NzogWzIsIDEwMF0gfSwgeyAxNDogWzIsIDE2XSwgMTU6IFsyLCAxNl0sIDE5OiBbMiwgMTZdLCAyOTogWzIsIDE2XSwgMzQ6IFsyLCAxNl0sIDQ0OiBbMiwgMTZdLCA0NzogWzIsIDE2XSwgNDg6IFsyLCAxNl0sIDUxOiBbMiwgMTZdLCA1NTogWzIsIDE2XSwgNjA6IFsyLCAxNl0gfSwgeyAzMzogWzEsIDEzOV0gfSwgeyAzMzogWzIsIDc1XSB9LCB7IDMzOiBbMiwgMzJdIH0sIHsgNzI6IFsyLCAxMDFdLCA3NzogWzIsIDEwMV0gfSwgeyAxNDogWzIsIDE3XSwgMTU6IFsyLCAxN10sIDE5OiBbMiwgMTddLCAyOTogWzIsIDE3XSwgMzQ6IFsyLCAxN10sIDM5OiBbMiwgMTddLCA0NDogWzIsIDE3XSwgNDc6IFsyLCAxN10sIDQ4OiBbMiwgMTddLCA1MTogWzIsIDE3XSwgNTU6IFsyLCAxN10sIDYwOiBbMiwgMTddIH1dLFxyXG5cdCAgICAgICAgZGVmYXVsdEFjdGlvbnM6IHsgNDogWzIsIDFdLCA1NTogWzIsIDU1XSwgNTc6IFsyLCAyMF0sIDYxOiBbMiwgNTddLCA3NDogWzIsIDgxXSwgODM6IFsyLCA4NV0sIDg3OiBbMiwgMThdLCA5MTogWzIsIDg5XSwgMTAyOiBbMiwgNTNdLCAxMDU6IFsyLCA5M10sIDExMTogWzIsIDE5XSwgMTEyOiBbMiwgNzddLCAxMTc6IFsyLCA5N10sIDEyMDogWzIsIDYzXSwgMTIzOiBbMiwgNjldLCAxMjQ6IFsyLCAxMl0sIDEzNjogWzIsIDc1XSwgMTM3OiBbMiwgMzJdIH0sXHJcblx0ICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xyXG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xyXG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgc3RhY2sgPSBbMF0sXHJcblx0ICAgICAgICAgICAgICAgIHZzdGFjayA9IFtudWxsXSxcclxuXHQgICAgICAgICAgICAgICAgbHN0YWNrID0gW10sXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSxcclxuXHQgICAgICAgICAgICAgICAgeXl0ZXh0ID0gXCJcIixcclxuXHQgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSAwLFxyXG5cdCAgICAgICAgICAgICAgICB5eWxlbmcgPSAwLFxyXG5cdCAgICAgICAgICAgICAgICByZWNvdmVyaW5nID0gMCxcclxuXHQgICAgICAgICAgICAgICAgVEVSUk9SID0gMixcclxuXHQgICAgICAgICAgICAgICAgRU9GID0gMTtcclxuXHQgICAgICAgICAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcclxuXHQgICAgICAgICAgICB0aGlzLmxleGVyLnl5ID0gdGhpcy55eTtcclxuXHQgICAgICAgICAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcclxuXHQgICAgICAgICAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxleGVyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKSB0aGlzLmxleGVyLnl5bGxvYyA9IHt9O1xyXG5cdCAgICAgICAgICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xyXG5cdCAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5sZXhlci5vcHRpb25zICYmIHRoaXMubGV4ZXIub3B0aW9ucy5yYW5nZXM7XHJcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47XHJcblx0ICAgICAgICAgICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcclxuXHQgICAgICAgICAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBsZXgoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbjtcclxuXHQgICAgICAgICAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgc3ltYm9sLFxyXG5cdCAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCxcclxuXHQgICAgICAgICAgICAgICAgc3RhdGUsXHJcblx0ICAgICAgICAgICAgICAgIGFjdGlvbixcclxuXHQgICAgICAgICAgICAgICAgYSxcclxuXHQgICAgICAgICAgICAgICAgcixcclxuXHQgICAgICAgICAgICAgICAgeXl2YWwgPSB7fSxcclxuXHQgICAgICAgICAgICAgICAgcCxcclxuXHQgICAgICAgICAgICAgICAgbGVuLFxyXG5cdCAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcclxuXHQgICAgICAgICAgICAgICAgZXhwZWN0ZWQ7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwidW5kZWZpbmVkXCIgfHwgIWFjdGlvbi5sZW5ndGggfHwgIWFjdGlvblswXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaChcIidcIiArIHRoaXMudGVybWluYWxzX1twXSArIFwiJ1wiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMSA/IFwiZW5kIG9mIGlucHV0XCIgOiBcIidcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlRXJyb3IoZXJyU3RyLCB7IHRleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZCB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHRoaXMubGV4ZXIueXlsbG9jKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSB0aGlzLmxleGVyLnl5bGluZW5vO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApIHJlY292ZXJpbmctLTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeXl2YWwuXyQgPSB7IGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfbGluZSwgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSwgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2NvbHVtbiwgbGFzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9jb2x1bW4gfTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW2xzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0ucmFuZ2VbMF0sIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ucmFuZ2VbMV1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cclxuXHQgICAgdmFyIGxleGVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBsZXhlciA9IHsgRU9GOiAxLFxyXG5cdCAgICAgICAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHNldElucHV0OiBmdW5jdGlvbiBzZXRJbnB1dChpbnB1dCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdGhpcy5fbGVzcyA9IHRoaXMuZG9uZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGluZW5vID0gdGhpcy55eWxlbmcgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAwLCBsYXN0X2xpbmU6IDEsIGxhc3RfY29sdW1uOiAwIH07XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB0aGlzLnl5bGxvYy5yYW5nZSA9IFswLCAwXTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiBpbnB1dCgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5faW5wdXRbMF07XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGVuZysrO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCsrO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGxpbmVzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY2g7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICB1bnB1dDogZnVuY3Rpb24gdW5wdXQoY2gpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoIC0gbGVuIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XHJcblx0ICAgICAgICAgICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIDEpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAtIDEpIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoIC0gMTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnl5bGxvYy5yYW5nZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jID0geyBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5maXJzdF9saW5lLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMCkgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiAtIGxlblxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3JbMF0sIHJbMF0gKyB0aGlzLnl5bGVuZyAtIGxlbl07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBtb3JlOiBmdW5jdGlvbiBtb3JlKCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBsZXNzOiBmdW5jdGlvbiBsZXNzKG4pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24gcGFzdElucHV0KCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLicgOiAnJykgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uIHVwY29taW5nSW5wdXQoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwIC0gbmV4dC5sZW5ndGgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwgMjApICsgKG5leHQubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbiBzaG93UG9zaXRpb24oKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjICsgXCJeXCI7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kb25lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gdHJ1ZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbiwgbWF0Y2gsIHRlbXBNYXRjaCwgaW5kZXgsIGNvbCwgbGluZXM7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9yZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLl9jdXJyZW50UnVsZXMoKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMpIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1xccj9cXG4/LylbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gKyBtYXRjaFswXS5sZW5ndGggfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSwgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47ZWxzZSByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSkgKyAnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nICsgdGhpcy5zaG93UG9zaXRpb24oKSwgeyB0ZXh0OiBcIlwiLCB0b2tlbjogbnVsbCwgbGluZTogdGhpcy55eWxpbmVubyB9KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgbGV4OiBmdW5jdGlvbiBsZXgoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGJlZ2luOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24gcG9wU3RhdGUoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLnBvcCgpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV1dLnJ1bGVzO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgdG9wU3RhdGU6IGZ1bmN0aW9uIHRvcFN0YXRlKCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDJdO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgcHVzaFN0YXRlOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xyXG5cdCAgICAgICAgICAgIH0gfTtcclxuXHQgICAgICAgIGxleGVyLm9wdGlvbnMgPSB7fTtcclxuXHQgICAgICAgIGxleGVyLnBlcmZvcm1BY3Rpb24gPSBmdW5jdGlvbiBhbm9ueW1vdXMoeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlRcclxuXHQgICAgICAgIC8qKi8pIHtcclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc3RyaXAoc3RhcnQsIGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4geXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKHN0YXJ0LCB5eV8ueXlsZW5nIC0gZW5kKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBZWVNUQVRFID0gWVlfU1RBUlQ7XHJcblx0ICAgICAgICAgICAgc3dpdGNoICgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0yKSA9PT0gXCJcXFxcXFxcXFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwgMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0xKSA9PT0gXCJcXFxcXCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLCAxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwiZW11XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtyZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHVzaW5nIGB0aGlzLnRvcFN0YXRlKClgIGJlbG93LCBidXQgaXQgY3VycmVudGx5XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBzZWNvbmQgdG9wIGluc3RlYWQgb2YgdGhlIGZpcnN0IHRvcC4gT3BlbmVkIGFuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSBhYm91dCBpdCBhdCBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24vaXNzdWVzLzI5MVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSA9PT0gJ3JhdycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cig1LCB5eV8ueXlsZW5nIC0gOSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdFTkRfUkFXX0JMT0NLJztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA2ODtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDk6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ3JhdycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAyOTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTY6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTc6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAzOTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjA6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudW5wdXQoeXlfLnl5dGV4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdjb20nKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA0ODtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDczO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjU6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3MjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjg6XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgd2hpdGVzcGFjZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjk6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDU0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzA6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDMzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzE6XHJcblx0ICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0gc3RyaXAoMSwgMikucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO3JldHVybiA4MDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHN0cmlwKDEsIDIpLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKTtyZXR1cm4gODA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4NTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzU6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MztcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODE7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3NTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnJlcGxhY2UoL1xcXFwoW1xcXFxcXF1dKS9nLCAnJDEnKTtyZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0NDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGxleGVyLnJ1bGVzID0gWy9eKD86W15cXHgwMF0qPyg/PShcXHtcXHspKSkvLCAvXig/OlteXFx4MDBdKykvLCAvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sIC9eKD86XFx7XFx7XFx7XFx7KD89W15cXC9dKSkvLCAvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywgL14oPzpbXlxceDAwXSo/KD89KFxce1xce1xce1xceykpKS8sIC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLCAvXig/OlxcKCkvLCAvXig/OlxcKSkvLCAvXig/Olxce1xce1xce1xceykvLCAvXig/OlxcfVxcfVxcfVxcfSkvLCAvXig/Olxce1xceyh+KT8+KS8sIC9eKD86XFx7XFx7KH4pPyM+KS8sIC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sIC9eKD86XFx7XFx7KH4pP1xcLykvLCAvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pP1xcXikvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLCAvXig/Olxce1xceyh+KT9cXHspLywgL14oPzpcXHtcXHsofik/JikvLCAvXig/Olxce1xceyh+KT8hLS0pLywgL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywgL14oPzpcXHtcXHsofik/XFwqPykvLCAvXig/Oj0pLywgL14oPzpcXC5cXC4pLywgL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLCAvXig/OltcXC8uXSkvLCAvXig/OlxccyspLywgL14oPzpcXH0ofik/XFx9XFx9KS8sIC9eKD86KH4pP1xcfVxcfSkvLCAvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLCAvXig/OicoXFxcXFsnXXxbXiddKSonKS8sIC9eKD86QCkvLCAvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLCAvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywgL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLCAvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLCAvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLCAvXig/OmFzXFxzK1xcfCkvLCAvXig/OlxcfCkvLCAvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sIC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywgL14oPzouKS8sIC9eKD86JCkvXTtcclxuXHQgICAgICAgIGxleGVyLmNvbmRpdGlvbnMgPSB7IFwibXVcIjogeyBcInJ1bGVzXCI6IFs3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSwgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDRdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImVtdVwiOiB7IFwicnVsZXNcIjogWzJdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImNvbVwiOiB7IFwicnVsZXNcIjogWzZdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcInJhd1wiOiB7IFwicnVsZXNcIjogWzMsIDQsIDVdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcIklOSVRJQUxcIjogeyBcInJ1bGVzXCI6IFswLCAxLCA0NF0sIFwiaW5jbHVzaXZlXCI6IHRydWUgfSB9O1xyXG5cdCAgICAgICAgcmV0dXJuIGxleGVyO1xyXG5cdCAgICB9KSgpO1xyXG5cdCAgICBwYXJzZXIubGV4ZXIgPSBsZXhlcjtcclxuXHQgICAgZnVuY3Rpb24gUGFyc2VyKCkge1xyXG5cdCAgICAgICAgdGhpcy55eSA9IHt9O1xyXG5cdCAgICB9UGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjtwYXJzZXIuUGFyc2VyID0gUGFyc2VyO1xyXG5cdCAgICByZXR1cm4gbmV3IFBhcnNlcigpO1xyXG5cdH0pKCk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBoYW5kbGViYXJzO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzggKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3Zpc2l0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcclxuXHJcblx0dmFyIF92aXNpdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Zpc2l0b3IpO1xyXG5cclxuXHRmdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbCgpIHtcclxuXHQgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XHJcblxyXG5cdCAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHR9XHJcblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlID0gbmV3IF92aXNpdG9yMlsnZGVmYXVsdCddKCk7XHJcblxyXG5cdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24gKHByb2dyYW0pIHtcclxuXHQgIHZhciBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XHJcblxyXG5cdCAgdmFyIGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XHJcblx0ICB0aGlzLmlzUm9vdFNlZW4gPSB0cnVlO1xyXG5cclxuXHQgIHZhciBib2R5ID0gcHJvZ3JhbS5ib2R5O1xyXG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBib2R5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICB2YXIgY3VycmVudCA9IGJvZHlbaV0sXHJcblx0ICAgICAgICBzdHJpcCA9IHRoaXMuYWNjZXB0KGN1cnJlbnQpO1xyXG5cclxuXHQgICAgaWYgKCFzdHJpcCkge1xyXG5cdCAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXHJcblx0ICAgICAgICBfaXNOZXh0V2hpdGVzcGFjZSA9IGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcclxuXHQgICAgICAgIG9wZW5TdGFuZGFsb25lID0gc3RyaXAub3BlblN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UsXHJcblx0ICAgICAgICBjbG9zZVN0YW5kYWxvbmUgPSBzdHJpcC5jbG9zZVN0YW5kYWxvbmUgJiYgX2lzTmV4dFdoaXRlc3BhY2UsXHJcblx0ICAgICAgICBpbmxpbmVTdGFuZGFsb25lID0gc3RyaXAuaW5saW5lU3RhbmRhbG9uZSAmJiBfaXNQcmV2V2hpdGVzcGFjZSAmJiBfaXNOZXh0V2hpdGVzcGFjZTtcclxuXHJcblx0ICAgIGlmIChzdHJpcC5jbG9zZSkge1xyXG5cdCAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoc3RyaXAub3Blbikge1xyXG5cdCAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcclxuXHQgICAgICBvbWl0UmlnaHQoYm9keSwgaSk7XHJcblxyXG5cdCAgICAgIGlmIChvbWl0TGVmdChib2R5LCBpKSkge1xyXG5cdCAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcclxuXHQgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQYXJ0aWFsU3RhdGVtZW50Jykge1xyXG5cdCAgICAgICAgICAvLyBQdWxsIG91dCB0aGUgd2hpdGVzcGFjZSBmcm9tIHRoZSBmaW5hbCBsaW5lXHJcblx0ICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gLyhbIFxcdF0rJCkvLmV4ZWMoYm9keVtpIC0gMV0ub3JpZ2luYWwpWzFdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIG9wZW5TdGFuZGFsb25lKSB7XHJcblx0ICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcclxuXHJcblx0ICAgICAgLy8gU3RyaXAgb3V0IHRoZSBwcmV2aW91cyBjb250ZW50IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHlcclxuXHQgICAgICBvbWl0TGVmdChib2R5LCBpKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIGNsb3NlU3RhbmRhbG9uZSkge1xyXG5cdCAgICAgIC8vIEFsd2F5cyBzdHJpcCB0aGUgbmV4dCBub2RlXHJcblx0ICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xyXG5cclxuXHQgICAgICBvbWl0TGVmdCgoY3VycmVudC5pbnZlcnNlIHx8IGN1cnJlbnQucHJvZ3JhbSkuYm9keSk7XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4gcHJvZ3JhbTtcclxuXHR9O1xyXG5cclxuXHRXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuQmxvY2tTdGF0ZW1lbnQgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24gKGJsb2NrKSB7XHJcblx0ICB0aGlzLmFjY2VwdChibG9jay5wcm9ncmFtKTtcclxuXHQgIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xyXG5cclxuXHQgIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cclxuXHQgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSB8fCBibG9jay5pbnZlcnNlLFxyXG5cdCAgICAgIGludmVyc2UgPSBibG9jay5wcm9ncmFtICYmIGJsb2NrLmludmVyc2UsXHJcblx0ICAgICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZSxcclxuXHQgICAgICBsYXN0SW52ZXJzZSA9IGludmVyc2U7XHJcblxyXG5cdCAgaWYgKGludmVyc2UgJiYgaW52ZXJzZS5jaGFpbmVkKSB7XHJcblx0ICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UuYm9keVswXS5wcm9ncmFtO1xyXG5cclxuXHQgICAgLy8gV2FsayB0aGUgaW52ZXJzZSBjaGFpbiB0byBmaW5kIHRoZSBsYXN0IGludmVyc2UgdGhhdCBpcyBhY3R1YWxseSBpbiB0aGUgY2hhaW4uXHJcblx0ICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XHJcblx0ICAgICAgbGFzdEludmVyc2UgPSBsYXN0SW52ZXJzZS5ib2R5W2xhc3RJbnZlcnNlLmJvZHkubGVuZ3RoIC0gMV0ucHJvZ3JhbTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBzdHJpcCA9IHtcclxuXHQgICAgb3BlbjogYmxvY2sub3BlblN0cmlwLm9wZW4sXHJcblx0ICAgIGNsb3NlOiBibG9jay5jbG9zZVN0cmlwLmNsb3NlLFxyXG5cclxuXHQgICAgLy8gRGV0ZXJtaW5lIHRoZSBzdGFuZGFsb25lIGNhbmRpYWN5LiBCYXNpY2FsbHkgZmxhZyBvdXIgY29udGVudCBhcyBiZWluZyBwb3NzaWJseSBzdGFuZGFsb25lXHJcblx0ICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxyXG5cdCAgICBvcGVuU3RhbmRhbG9uZTogaXNOZXh0V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpLFxyXG5cdCAgICBjbG9zZVN0YW5kYWxvbmU6IGlzUHJldldoaXRlc3BhY2UoKGZpcnN0SW52ZXJzZSB8fCBwcm9ncmFtKS5ib2R5KVxyXG5cdCAgfTtcclxuXHJcblx0ICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XHJcblx0ICAgIG9taXRSaWdodChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xyXG5cdCAgfVxyXG5cclxuXHQgIGlmIChpbnZlcnNlKSB7XHJcblx0ICAgIHZhciBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcclxuXHQgICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZVN0cmlwLmNsb3NlKSB7XHJcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XHJcblx0ICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEZpbmQgc3RhbmRhbG9uZSBlbHNlIHN0YXRtZW50c1xyXG5cdCAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lICYmIGlzUHJldldoaXRlc3BhY2UocHJvZ3JhbS5ib2R5KSAmJiBpc05leHRXaGl0ZXNwYWNlKGZpcnN0SW52ZXJzZS5ib2R5KSkge1xyXG5cdCAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XHJcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcclxuXHQgICAgfVxyXG5cdCAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcclxuXHQgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4gc3RyaXA7XHJcblx0fTtcclxuXHJcblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5NdXN0YWNoZVN0YXRlbWVudCA9IGZ1bmN0aW9uIChtdXN0YWNoZSkge1xyXG5cdCAgcmV0dXJuIG11c3RhY2hlLnN0cmlwO1xyXG5cdH07XHJcblxyXG5cdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5QYXJ0aWFsU3RhdGVtZW50ID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIHZhciBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICBpbmxpbmVTdGFuZGFsb25lOiB0cnVlLFxyXG5cdCAgICBvcGVuOiBzdHJpcC5vcGVuLFxyXG5cdCAgICBjbG9zZTogc3RyaXAuY2xvc2VcclxuXHQgIH07XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcclxuXHQgIGlmIChpID09PSB1bmRlZmluZWQpIHtcclxuXHQgICAgaSA9IGJvZHkubGVuZ3RoO1xyXG5cdCAgfVxyXG5cclxuXHQgIC8vIE5vZGVzIHRoYXQgZW5kIHdpdGggbmV3bGluZXMgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSAoYnV0IGFyZSBzcGVjaWFsXHJcblx0ICAvLyBjYXNlZCBmb3Igc3RyaXAgb3BlcmF0aW9ucylcclxuXHQgIHZhciBwcmV2ID0gYm9keVtpIC0gMV0sXHJcblx0ICAgICAgc2libGluZyA9IGJvZHlbaSAtIDJdO1xyXG5cdCAgaWYgKCFwcmV2KSB7XHJcblx0ICAgIHJldHVybiBpc1Jvb3Q7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKHByZXYudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XHJcblx0ICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL1xccj9cXG5cXHMqPyQvIDogLyhefFxccj9cXG4pXFxzKj8kLykudGVzdChwcmV2Lm9yaWdpbmFsKTtcclxuXHQgIH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcclxuXHQgIGlmIChpID09PSB1bmRlZmluZWQpIHtcclxuXHQgICAgaSA9IC0xO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBuZXh0ID0gYm9keVtpICsgMV0sXHJcblx0ICAgICAgc2libGluZyA9IGJvZHlbaSArIDJdO1xyXG5cdCAgaWYgKCFuZXh0KSB7XHJcblx0ICAgIHJldHVybiBpc1Jvb3Q7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKG5leHQudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XHJcblx0ICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL15cXHMqP1xccj9cXG4vIDogL15cXHMqPyhcXHI/XFxufCQpLykudGVzdChuZXh0Lm9yaWdpbmFsKTtcclxuXHQgIH1cclxuXHR9XHJcblxyXG5cdC8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSByaWdodCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cclxuXHQvLyBJLmUuIHt7Zm9vfX0nICcgd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxyXG5cdC8vXHJcblx0Ly8gSWYgaSBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXHJcblx0Ly9cclxuXHQvLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxyXG5cdC8vIGNvbnRlbnQgaXMgbWV0LlxyXG5cdGZ1bmN0aW9uIG9taXRSaWdodChib2R5LCBpLCBtdWx0aXBsZSkge1xyXG5cdCAgdmFyIGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XHJcblx0ICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHwgIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZCkge1xyXG5cdCAgICByZXR1cm47XHJcblx0ICB9XHJcblxyXG5cdCAgdmFyIG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcclxuXHQgIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UobXVsdGlwbGUgPyAvXlxccysvIDogL15bIFxcdF0qXFxyP1xcbj8vLCAnJyk7XHJcblx0ICBjdXJyZW50LnJpZ2h0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcclxuXHR9XHJcblxyXG5cdC8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxyXG5cdC8vIEkuZS4gJyAne3tmb299fSB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXHJcblx0Ly9cclxuXHQvLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXHJcblx0Ly9cclxuXHQvLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxyXG5cdC8vIGNvbnRlbnQgaXMgbWV0LlxyXG5cdGZ1bmN0aW9uIG9taXRMZWZ0KGJvZHksIGksIG11bHRpcGxlKSB7XHJcblx0ICB2YXIgY3VycmVudCA9IGJvZHlbaSA9PSBudWxsID8gYm9keS5sZW5ndGggLSAxIDogaSAtIDFdO1xyXG5cdCAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICFtdWx0aXBsZSAmJiBjdXJyZW50LmxlZnRTdHJpcHBlZCkge1xyXG5cdCAgICByZXR1cm47XHJcblx0ICB9XHJcblxyXG5cdCAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cclxuXHQgIHZhciBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XHJcblx0ICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL1xccyskLyA6IC9bIFxcdF0rJC8sICcnKTtcclxuXHQgIGN1cnJlbnQubGVmdFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XHJcblx0ICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XHJcblx0fVxyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBXaGl0ZXNwYWNlQ29udHJvbDtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzOSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0ZnVuY3Rpb24gVmlzaXRvcigpIHtcclxuXHQgIHRoaXMucGFyZW50cyA9IFtdO1xyXG5cdH1cclxuXHJcblx0VmlzaXRvci5wcm90b3R5cGUgPSB7XHJcblx0ICBjb25zdHJ1Y3RvcjogVmlzaXRvcixcclxuXHQgIG11dGF0aW5nOiBmYWxzZSxcclxuXHJcblx0ICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxyXG5cdCAgYWNjZXB0S2V5OiBmdW5jdGlvbiBhY2NlcHRLZXkobm9kZSwgbmFtZSkge1xyXG5cdCAgICB2YXIgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcclxuXHQgICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcclxuXHQgICAgICAvLyBIYWNreSBzYW5pdHkgY2hlY2s6IFRoaXMgbWF5IGhhdmUgYSBmZXcgZmFsc2UgcG9zaXRpdmVzIGZvciB0eXBlIGZvciB0aGUgaGVscGVyXHJcblx0ICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXHJcblx0ICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xyXG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArIHZhbHVlLnR5cGUgKyAnXCIgZm91bmQgd2hlbiBhY2NlcHRpbmcgJyArIG5hbWUgKyAnIG9uICcgKyBub2RlLnR5cGUpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICBub2RlW25hbWVdID0gdmFsdWU7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gUGVyZm9ybXMgYW4gYWNjZXB0IG9wZXJhdGlvbiB3aXRoIGFkZGVkIHNhbml0eSBjaGVjayB0byBlbnN1cmVcclxuXHQgIC8vIHJlcXVpcmVkIGtleXMgYXJlIG5vdCByZW1vdmVkLlxyXG5cdCAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uIGFjY2VwdFJlcXVpcmVkKG5vZGUsIG5hbWUpIHtcclxuXHQgICAgdGhpcy5hY2NlcHRLZXkobm9kZSwgbmFtZSk7XHJcblxyXG5cdCAgICBpZiAoIW5vZGVbbmFtZV0pIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBUcmF2ZXJzZXMgYSBnaXZlbiBhcnJheS4gSWYgbXV0YXRpbmcsIGVtcHR5IHJlc3Buc2VzIHdpbGwgYmUgcmVtb3ZlZFxyXG5cdCAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxyXG5cdCAgYWNjZXB0QXJyYXk6IGZ1bmN0aW9uIGFjY2VwdEFycmF5KGFycmF5KSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xyXG5cclxuXHQgICAgICBpZiAoIWFycmF5W2ldKSB7XHJcblx0ICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XHJcblx0ICAgICAgICBpLS07XHJcblx0ICAgICAgICBsLS07XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG9iamVjdCkge1xyXG5cdCAgICBpZiAoIW9iamVjdCkge1xyXG5cdCAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXHJcblx0ICAgIGlmICghdGhpc1tvYmplY3QudHlwZV0pIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0eXBlOiAnICsgb2JqZWN0LnR5cGUsIG9iamVjdCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLmN1cnJlbnQpIHtcclxuXHQgICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xyXG5cdCAgICB9XHJcblx0ICAgIHRoaXMuY3VycmVudCA9IG9iamVjdDtcclxuXHJcblx0ICAgIHZhciByZXQgPSB0aGlzW29iamVjdC50eXBlXShvYmplY3QpO1xyXG5cclxuXHQgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5wYXJlbnRzLnNoaWZ0KCk7XHJcblxyXG5cdCAgICBpZiAoIXRoaXMubXV0YXRpbmcgfHwgcmV0KSB7XHJcblx0ICAgICAgcmV0dXJuIHJldDtcclxuXHQgICAgfSBlbHNlIGlmIChyZXQgIT09IGZhbHNlKSB7XHJcblx0ICAgICAgcmV0dXJuIG9iamVjdDtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcclxuXHQgICAgdGhpcy5hY2NlcHRBcnJheShwcm9ncmFtLmJvZHkpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBNdXN0YWNoZVN0YXRlbWVudDogdmlzaXRTdWJFeHByZXNzaW9uLFxyXG5cdCAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXHJcblxyXG5cdCAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXHJcblx0ICBEZWNvcmF0b3JCbG9jazogdmlzaXRCbG9jayxcclxuXHJcblx0ICBQYXJ0aWFsU3RhdGVtZW50OiB2aXNpdFBhcnRpYWwsXHJcblx0ICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxCbG9ja1N0YXRlbWVudChwYXJ0aWFsKSB7XHJcblx0ICAgIHZpc2l0UGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwpO1xyXG5cclxuXHQgICAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ3Byb2dyYW0nKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29udGVudFN0YXRlbWVudCgpIC8qIGNvbnRlbnQgKi97fSxcclxuXHQgIENvbW1lbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbW1lbnRTdGF0ZW1lbnQoKSAvKiBjb21tZW50ICove30sXHJcblxyXG5cdCAgU3ViRXhwcmVzc2lvbjogdmlzaXRTdWJFeHByZXNzaW9uLFxyXG5cclxuXHQgIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbiBQYXRoRXhwcmVzc2lvbigpIC8qIHBhdGggKi97fSxcclxuXHJcblx0ICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKCkgLyogc3RyaW5nICove30sXHJcblx0ICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbiBOdW1iZXJMaXRlcmFsKCkgLyogbnVtYmVyICove30sXHJcblx0ICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24gQm9vbGVhbkxpdGVyYWwoKSAvKiBib29sICove30sXHJcblx0ICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkgLyogbGl0ZXJhbCAqL3t9LFxyXG5cdCAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uIE51bGxMaXRlcmFsKCkgLyogbGl0ZXJhbCAqL3t9LFxyXG5cclxuXHQgIEhhc2g6IGZ1bmN0aW9uIEhhc2goaGFzaCkge1xyXG5cdCAgICB0aGlzLmFjY2VwdEFycmF5KGhhc2gucGFpcnMpO1xyXG5cdCAgfSxcclxuXHQgIEhhc2hQYWlyOiBmdW5jdGlvbiBIYXNoUGFpcihwYWlyKSB7XHJcblx0ICAgIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFpciwgJ3ZhbHVlJyk7XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gdmlzaXRTdWJFeHByZXNzaW9uKG11c3RhY2hlKSB7XHJcblx0ICB0aGlzLmFjY2VwdFJlcXVpcmVkKG11c3RhY2hlLCAncGF0aCcpO1xyXG5cdCAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xyXG5cdCAgdGhpcy5hY2NlcHRLZXkobXVzdGFjaGUsICdoYXNoJyk7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcclxuXHQgIHZpc2l0U3ViRXhwcmVzc2lvbi5jYWxsKHRoaXMsIGJsb2NrKTtcclxuXHJcblx0ICB0aGlzLmFjY2VwdEtleShibG9jaywgJ3Byb2dyYW0nKTtcclxuXHQgIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAnaW52ZXJzZScpO1xyXG5cdH1cclxuXHRmdW5jdGlvbiB2aXNpdFBhcnRpYWwocGFydGlhbCkge1xyXG5cdCAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYXJ0aWFsLCAnbmFtZScpO1xyXG5cdCAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XHJcblx0ICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAnaGFzaCcpO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gVmlzaXRvcjtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0MCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0ZXhwb3J0cy5Tb3VyY2VMb2NhdGlvbiA9IFNvdXJjZUxvY2F0aW9uO1xyXG5cdGV4cG9ydHMuaWQgPSBpZDtcclxuXHRleHBvcnRzLnN0cmlwRmxhZ3MgPSBzdHJpcEZsYWdzO1xyXG5cdGV4cG9ydHMuc3RyaXBDb21tZW50ID0gc3RyaXBDb21tZW50O1xyXG5cdGV4cG9ydHMucHJlcGFyZVBhdGggPSBwcmVwYXJlUGF0aDtcclxuXHRleHBvcnRzLnByZXBhcmVNdXN0YWNoZSA9IHByZXBhcmVNdXN0YWNoZTtcclxuXHRleHBvcnRzLnByZXBhcmVSYXdCbG9jayA9IHByZXBhcmVSYXdCbG9jaztcclxuXHRleHBvcnRzLnByZXBhcmVCbG9jayA9IHByZXBhcmVCbG9jaztcclxuXHRleHBvcnRzLnByZXBhcmVQcm9ncmFtID0gcHJlcGFyZVByb2dyYW07XHJcblx0ZXhwb3J0cy5wcmVwYXJlUGFydGlhbEJsb2NrID0gcHJlcGFyZVBhcnRpYWxCbG9jaztcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRmdW5jdGlvbiB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKSB7XHJcblx0ICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XHJcblxyXG5cdCAgaWYgKG9wZW4ucGF0aC5vcmlnaW5hbCAhPT0gY2xvc2UpIHtcclxuXHQgICAgdmFyIGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XHJcblxyXG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihzb3VyY2UsIGxvY0luZm8pIHtcclxuXHQgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG5cdCAgdGhpcy5zdGFydCA9IHtcclxuXHQgICAgbGluZTogbG9jSW5mby5maXJzdF9saW5lLFxyXG5cdCAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXHJcblx0ICB9O1xyXG5cdCAgdGhpcy5lbmQgPSB7XHJcblx0ICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxyXG5cdCAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cclxuXHQgIH07XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpZCh0b2tlbikge1xyXG5cdCAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xyXG5cdCAgICByZXR1cm4gdG9rZW4uc3Vic3RyKDEsIHRva2VuLmxlbmd0aCAtIDIpO1xyXG5cdCAgfSBlbHNlIHtcclxuXHQgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xyXG5cdCAgcmV0dXJuIHtcclxuXHQgICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+JyxcclxuXHQgICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc3RyaXBDb21tZW50KGNvbW1lbnQpIHtcclxuXHQgIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+P1xcIS0/LT8vLCAnJykucmVwbGFjZSgvLT8tP34/XFx9XFx9JC8sICcnKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVQYXRoKGRhdGEsIHBhcnRzLCBsb2MpIHtcclxuXHQgIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xyXG5cclxuXHQgIHZhciBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcclxuXHQgICAgICBkaWcgPSBbXSxcclxuXHQgICAgICBkZXB0aCA9IDAsXHJcblx0ICAgICAgZGVwdGhTdHJpbmcgPSAnJztcclxuXHJcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICB2YXIgcGFydCA9IHBhcnRzW2ldLnBhcnQsXHJcblxyXG5cdCAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxyXG5cdCAgICAvLyBpLmUuIGZvby5bdGhpc10gcmVzb2x2ZXMgdG8gYXBwcm94aW1hdGVseSBjb250ZXh0LmZvb1sndGhpcyddXHJcblx0ICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xyXG5cdCAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XHJcblxyXG5cdCAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xyXG5cdCAgICAgIGlmIChkaWcubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgcGF0aDogJyArIG9yaWdpbmFsLCB7IGxvYzogbG9jIH0pO1xyXG5cdCAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xyXG5cdCAgICAgICAgZGVwdGgrKztcclxuXHQgICAgICAgIGRlcHRoU3RyaW5nICs9ICcuLi8nO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBkaWcucHVzaChwYXJ0KTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXHJcblx0ICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgIGRlcHRoOiBkZXB0aCxcclxuXHQgICAgcGFydHM6IGRpZyxcclxuXHQgICAgb3JpZ2luYWw6IG9yaWdpbmFsLFxyXG5cdCAgICBsb2M6IGxvY1xyXG5cdCAgfTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XHJcblx0ICAvLyBNdXN0IHVzZSBjaGFyQXQgdG8gc3VwcG9ydCBJRSBwcmUtMTBcclxuXHQgIHZhciBlc2NhcGVGbGFnID0gb3Blbi5jaGFyQXQoMykgfHwgb3Blbi5jaGFyQXQoMiksXHJcblx0ICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XHJcblxyXG5cdCAgdmFyIGRlY29yYXRvciA9IC9cXCovLnRlc3Qob3Blbik7XHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXHJcblx0ICAgIHBhdGg6IHBhdGgsXHJcblx0ICAgIHBhcmFtczogcGFyYW1zLFxyXG5cdCAgICBoYXNoOiBoYXNoLFxyXG5cdCAgICBlc2NhcGVkOiBlc2NhcGVkLFxyXG5cdCAgICBzdHJpcDogc3RyaXAsXHJcblx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcHJlcGFyZVJhd0Jsb2NrKG9wZW5SYXdCbG9jaywgY29udGVudHMsIGNsb3NlLCBsb2NJbmZvKSB7XHJcblx0ICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xyXG5cclxuXHQgIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XHJcblx0ICB2YXIgcHJvZ3JhbSA9IHtcclxuXHQgICAgdHlwZTogJ1Byb2dyYW0nLFxyXG5cdCAgICBib2R5OiBjb250ZW50cyxcclxuXHQgICAgc3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY0luZm9cclxuXHQgIH07XHJcblxyXG5cdCAgcmV0dXJuIHtcclxuXHQgICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyxcclxuXHQgICAgcGF0aDogb3BlblJhd0Jsb2NrLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcclxuXHQgICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXHJcblx0ICAgIHByb2dyYW06IHByb2dyYW0sXHJcblx0ICAgIG9wZW5TdHJpcDoge30sXHJcblx0ICAgIGludmVyc2VTdHJpcDoge30sXHJcblx0ICAgIGNsb3NlU3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY0luZm9cclxuXHQgIH07XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwcmVwYXJlQmxvY2sob3BlbkJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlQW5kUHJvZ3JhbSwgY2xvc2UsIGludmVydGVkLCBsb2NJbmZvKSB7XHJcblx0ICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xyXG5cdCAgICB2YWxpZGF0ZUNsb3NlKG9wZW5CbG9jaywgY2xvc2UpO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBkZWNvcmF0b3IgPSAvXFwqLy50ZXN0KG9wZW5CbG9jay5vcGVuKTtcclxuXHJcblx0ICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xyXG5cclxuXHQgIHZhciBpbnZlcnNlID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgIGludmVyc2VTdHJpcCA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcclxuXHQgICAgaWYgKGRlY29yYXRvcikge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmV4cGVjdGVkIGludmVyc2UgYmxvY2sgb24gZGVjb3JhdG9yJywgaW52ZXJzZUFuZFByb2dyYW0pO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcclxuXHQgICAgICBpbnZlcnNlQW5kUHJvZ3JhbS5wcm9ncmFtLmJvZHlbMF0uY2xvc2VTdHJpcCA9IGNsb3NlLnN0cmlwO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpbnZlcnNlU3RyaXAgPSBpbnZlcnNlQW5kUHJvZ3JhbS5zdHJpcDtcclxuXHQgICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKGludmVydGVkKSB7XHJcblx0ICAgIGludmVydGVkID0gaW52ZXJzZTtcclxuXHQgICAgaW52ZXJzZSA9IHByb2dyYW07XHJcblx0ICAgIHByb2dyYW0gPSBpbnZlcnRlZDtcclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcclxuXHQgICAgcGF0aDogb3BlbkJsb2NrLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcclxuXHQgICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXHJcblx0ICAgIHByb2dyYW06IHByb2dyYW0sXHJcblx0ICAgIGludmVyc2U6IGludmVyc2UsXHJcblx0ICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxyXG5cdCAgICBpbnZlcnNlU3RyaXA6IGludmVyc2VTdHJpcCxcclxuXHQgICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXHJcblx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XHJcblx0ICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xyXG5cdCAgICB2YXIgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcclxuXHQgICAgICAgIGxhc3RMb2MgPSBzdGF0ZW1lbnRzW3N0YXRlbWVudHMubGVuZ3RoIC0gMV0ubG9jO1xyXG5cclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuXHQgICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcclxuXHQgICAgICBsb2MgPSB7XHJcblx0ICAgICAgICBzb3VyY2U6IGZpcnN0TG9jLnNvdXJjZSxcclxuXHQgICAgICAgIHN0YXJ0OiB7XHJcblx0ICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXHJcblx0ICAgICAgICAgIGNvbHVtbjogZmlyc3RMb2Muc3RhcnQuY29sdW1uXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZW5kOiB7XHJcblx0ICAgICAgICAgIGxpbmU6IGxhc3RMb2MuZW5kLmxpbmUsXHJcblx0ICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQcm9ncmFtJyxcclxuXHQgICAgYm9keTogc3RhdGVtZW50cyxcclxuXHQgICAgc3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY1xyXG5cdCAgfTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVQYXJ0aWFsQmxvY2sob3BlbiwgcHJvZ3JhbSwgY2xvc2UsIGxvY0luZm8pIHtcclxuXHQgIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpO1xyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxyXG5cdCAgICBuYW1lOiBvcGVuLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3Blbi5wYXJhbXMsXHJcblx0ICAgIGhhc2g6IG9wZW4uaGFzaCxcclxuXHQgICAgcHJvZ3JhbTogcHJvZ3JhbSxcclxuXHQgICAgb3BlblN0cmlwOiBvcGVuLnN0cmlwLFxyXG5cdCAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcclxuXHQgICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcclxuXHQgIH07XHJcblx0fVxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDQxICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0LyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMuQ29tcGlsZXIgPSBDb21waWxlcjtcclxuXHRleHBvcnRzLnByZWNvbXBpbGUgPSBwcmVjb21waWxlO1xyXG5cdGV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfYXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XHJcblxyXG5cdHZhciBfYXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzdCk7XHJcblxyXG5cdHZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuXHRmdW5jdGlvbiBDb21waWxlcigpIHt9XHJcblxyXG5cdC8vIHRoZSBmb3VuZEhlbHBlciByZWdpc3RlciB3aWxsIGRpc2FtYmlndWF0ZSBoZWxwZXIgbG9va3VwIGZyb20gZmluZGluZyBhXHJcblx0Ly8gZnVuY3Rpb24gaW4gYSBjb250ZXh0LiBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgbXVzdGFjaGUgY29tcGF0aWJpbGl0eSwgd2hpY2hcclxuXHQvLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcclxuXHQvLyBhbmQgdGhlbiBwcm9jZWVkIGFzIGlmIHRoZSByZXN1bHRpbmcgdmFsdWUgd2FzIHByb3ZpZGVkIHRvIGJsb2NrSGVscGVyTWlzc2luZy5cclxuXHJcblx0Q29tcGlsZXIucHJvdG90eXBlID0ge1xyXG5cdCAgY29tcGlsZXI6IENvbXBpbGVyLFxyXG5cclxuXHQgIGVxdWFsczogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XHJcblx0ICAgIHZhciBsZW4gPSB0aGlzLm9wY29kZXMubGVuZ3RoO1xyXG5cdCAgICBpZiAob3RoZXIub3Bjb2Rlcy5sZW5ndGggIT09IGxlbikge1xyXG5cdCAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgIHZhciBvcGNvZGUgPSB0aGlzLm9wY29kZXNbaV0sXHJcblx0ICAgICAgICAgIG90aGVyT3Bjb2RlID0gb3RoZXIub3Bjb2Rlc1tpXTtcclxuXHQgICAgICBpZiAob3Bjb2RlLm9wY29kZSAhPT0gb3RoZXJPcGNvZGUub3Bjb2RlIHx8ICFhcmdFcXVhbHMob3Bjb2RlLmFyZ3MsIG90aGVyT3Bjb2RlLmFyZ3MpKSB7XHJcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBXZSBrbm93IHRoYXQgbGVuZ3RoIGlzIHRoZSBzYW1lIGJldHdlZW4gdGhlIHR3byBhcnJheXMgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSB0aWVkXHJcblx0ICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXHJcblx0ICAgIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xyXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcclxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfSxcclxuXHJcblx0ICBndWlkOiAwLFxyXG5cclxuXHQgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUocHJvZ3JhbSwgb3B0aW9ucykge1xyXG5cdCAgICB0aGlzLnNvdXJjZU5vZGUgPSBbXTtcclxuXHQgICAgdGhpcy5vcGNvZGVzID0gW107XHJcblx0ICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSBvcHRpb25zLnN0cmluZ1BhcmFtcztcclxuXHQgICAgdGhpcy50cmFja0lkcyA9IG9wdGlvbnMudHJhY2tJZHM7XHJcblxyXG5cdCAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcclxuXHJcblx0ICAgIC8vIFRoZXNlIGNoYW5nZXMgd2lsbCBwcm9wYWdhdGUgdG8gdGhlIG90aGVyIGNvbXBpbGVyIGNvbXBvbmVudHNcclxuXHQgICAgdmFyIGtub3duSGVscGVycyA9IG9wdGlvbnMua25vd25IZWxwZXJzO1xyXG5cdCAgICBvcHRpb25zLmtub3duSGVscGVycyA9IHtcclxuXHQgICAgICAnaGVscGVyTWlzc2luZyc6IHRydWUsXHJcblx0ICAgICAgJ2Jsb2NrSGVscGVyTWlzc2luZyc6IHRydWUsXHJcblx0ICAgICAgJ2VhY2gnOiB0cnVlLFxyXG5cdCAgICAgICdpZic6IHRydWUsXHJcblx0ICAgICAgJ3VubGVzcyc6IHRydWUsXHJcblx0ICAgICAgJ3dpdGgnOiB0cnVlLFxyXG5cdCAgICAgICdsb2cnOiB0cnVlLFxyXG5cdCAgICAgICdsb29rdXAnOiB0cnVlXHJcblx0ICAgIH07XHJcblx0ICAgIGlmIChrbm93bkhlbHBlcnMpIHtcclxuXHQgICAgICBmb3IgKHZhciBfbmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcclxuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcblx0ICAgICAgICBpZiAoX25hbWUgaW4ga25vd25IZWxwZXJzKSB7XHJcblx0ICAgICAgICAgIHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbX25hbWVdID0ga25vd25IZWxwZXJzW19uYW1lXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uIGNvbXBpbGVQcm9ncmFtKHByb2dyYW0pIHtcclxuXHQgICAgdmFyIGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLFxyXG5cdCAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXHJcblx0ICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLFxyXG5cdCAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xyXG5cclxuXHQgICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xyXG5cclxuXHQgICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcclxuXHQgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzO1xyXG5cclxuXHQgICAgcmV0dXJuIGd1aWQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG5vZGUpIHtcclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXHJcblx0ICAgIGlmICghdGhpc1tub2RlLnR5cGVdKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSwgbm9kZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMuc291cmNlTm9kZS51bnNoaWZ0KG5vZGUpO1xyXG5cdCAgICB2YXIgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xyXG5cdCAgICB0aGlzLnNvdXJjZU5vZGUuc2hpZnQoKTtcclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0sXHJcblxyXG5cdCAgUHJvZ3JhbTogZnVuY3Rpb24gUHJvZ3JhbShwcm9ncmFtKSB7XHJcblx0ICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xyXG5cclxuXHQgICAgdmFyIGJvZHkgPSBwcm9ncmFtLmJvZHksXHJcblx0ICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5hY2NlcHQoYm9keVtpXSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpO1xyXG5cclxuXHQgICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7XHJcblx0ICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBwcm9ncmFtLmJsb2NrUGFyYW1zID8gcHJvZ3JhbS5ibG9ja1BhcmFtcy5sZW5ndGggOiAwO1xyXG5cclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9LFxyXG5cclxuXHQgIEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBCbG9ja1N0YXRlbWVudChibG9jaykge1xyXG5cdCAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTtcclxuXHJcblx0ICAgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSxcclxuXHQgICAgICAgIGludmVyc2UgPSBibG9jay5pbnZlcnNlO1xyXG5cclxuXHQgICAgcHJvZ3JhbSA9IHByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHQgICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTtcclxuXHJcblx0ICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTtcclxuXHJcblx0ICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xyXG5cdCAgICAgIHRoaXMuaGVscGVyU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XHJcblx0ICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XHJcblxyXG5cdCAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cclxuXHQgICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2Jsb2NrVmFsdWUnLCBibG9jay5wYXRoLm9yaWdpbmFsKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcclxuXHJcblx0ICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xyXG5cdCAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIERlY29yYXRvckJsb2NrOiBmdW5jdGlvbiBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHtcclxuXHQgICAgdmFyIHByb2dyYW0gPSBkZWNvcmF0b3IucHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGRlY29yYXRvci5wcm9ncmFtKTtcclxuXHQgICAgdmFyIHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxyXG5cdCAgICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoO1xyXG5cclxuXHQgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3JlZ2lzdGVyRGVjb3JhdG9yJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCk7XHJcblx0ICB9LFxyXG5cclxuXHQgIFBhcnRpYWxTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbCkge1xyXG5cdCAgICB0aGlzLnVzZVBhcnRpYWwgPSB0cnVlO1xyXG5cclxuXHQgICAgdmFyIHByb2dyYW0gPSBwYXJ0aWFsLnByb2dyYW07XHJcblx0ICAgIGlmIChwcm9ncmFtKSB7XHJcblx0ICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcmFtcyA9IHBhcnRpYWwucGFyYW1zO1xyXG5cdCAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCwgcGFydGlhbCk7XHJcblx0ICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcclxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGxpY2l0UGFydGlhbENvbnRleHQpIHtcclxuXHQgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcGFyYW1zLnB1c2goeyB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLCBwYXJ0czogW10sIGRlcHRoOiAwIH0pO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcnRpYWxOYW1lID0gcGFydGlhbC5uYW1lLm9yaWdpbmFsLFxyXG5cdCAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcclxuXHQgICAgaWYgKGlzRHluYW1pYykge1xyXG5cdCAgICAgIHRoaXMuYWNjZXB0KHBhcnRpYWwubmFtZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTtcclxuXHJcblx0ICAgIHZhciBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJztcclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgaW5kZW50KTtcclxuXHQgICAgICBpbmRlbnQgPSAnJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpO1xyXG5cdCAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XHJcblx0ICB9LFxyXG5cdCAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQocGFydGlhbEJsb2NrKSB7XHJcblx0ICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spO1xyXG5cdCAgfSxcclxuXHJcblx0ICBNdXN0YWNoZVN0YXRlbWVudDogZnVuY3Rpb24gTXVzdGFjaGVTdGF0ZW1lbnQobXVzdGFjaGUpIHtcclxuXHQgICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTtcclxuXHJcblx0ICAgIGlmIChtdXN0YWNoZS5lc2NhcGVkICYmICF0aGlzLm9wdGlvbnMubm9Fc2NhcGUpIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHQgIERlY29yYXRvcjogZnVuY3Rpb24gRGVjb3JhdG9yKGRlY29yYXRvcikge1xyXG5cdCAgICB0aGlzLkRlY29yYXRvckJsb2NrKGRlY29yYXRvcik7XHJcblx0ICB9LFxyXG5cclxuXHQgIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbnRlbnRTdGF0ZW1lbnQoY29udGVudCkge1xyXG5cdCAgICBpZiAoY29udGVudC52YWx1ZSkge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgY29udGVudC52YWx1ZSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIHt9LFxyXG5cclxuXHQgIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uIFN1YkV4cHJlc3Npb24oc2V4cHIpIHtcclxuXHQgICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7XHJcblx0ICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKHNleHByKTtcclxuXHJcblx0ICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xyXG5cdCAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XHJcblx0ICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihzZXhwcik7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblx0ICBhbWJpZ3VvdXNTZXhwcjogZnVuY3Rpb24gYW1iaWd1b3VzU2V4cHIoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcclxuXHQgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoLFxyXG5cdCAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sXHJcblx0ICAgICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDtcclxuXHJcblx0ICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XHJcblxyXG5cdCAgICBwYXRoLnN0cmljdCA9IHRydWU7XHJcblx0ICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spO1xyXG5cdCAgfSxcclxuXHJcblx0ICBzaW1wbGVTZXhwcjogZnVuY3Rpb24gc2ltcGxlU2V4cHIoc2V4cHIpIHtcclxuXHQgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoO1xyXG5cdCAgICBwYXRoLnN0cmljdCA9IHRydWU7XHJcblx0ICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xyXG5cdCAgICB0aGlzLm9wY29kZSgncmVzb2x2ZVBvc3NpYmxlTGFtYmRhJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIGhlbHBlclNleHByOiBmdW5jdGlvbiBoZWxwZXJTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xyXG5cdCAgICB2YXIgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksXHJcblx0ICAgICAgICBwYXRoID0gc2V4cHIucGF0aCxcclxuXHQgICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdO1xyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTtcclxuXHQgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcclxuXHQgICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcclxuXHJcblx0ICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwsIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zaW1wbGVJZChwYXRoKSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKHBhdGgpIHtcclxuXHQgICAgdGhpcy5hZGREZXB0aChwYXRoLmRlcHRoKTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcclxuXHJcblx0ICAgIHZhciBuYW1lID0gcGF0aC5wYXJ0c1swXSxcclxuXHQgICAgICAgIHNjb3BlZCA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZChwYXRoKSxcclxuXHQgICAgICAgIGJsb2NrUGFyYW1JZCA9ICFwYXRoLmRlcHRoICYmICFzY29wZWQgJiYgdGhpcy5ibG9ja1BhcmFtSW5kZXgobmFtZSk7XHJcblxyXG5cdCAgICBpZiAoYmxvY2tQYXJhbUlkKSB7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cEJsb2NrUGFyYW0nLCBibG9ja1BhcmFtSWQsIHBhdGgucGFydHMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XHJcblx0ICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gXHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hDb250ZXh0Jyk7XHJcblx0ICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7XHJcblx0ICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBEYXRhJywgcGF0aC5kZXB0aCwgcGF0aC5wYXJ0cywgcGF0aC5zdHJpY3QpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKHN0cmluZykge1xyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZycsIHN0cmluZy52YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uIE51bWJlckxpdGVyYWwobnVtYmVyKSB7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbChib29sKSB7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIGJvb2wudmFsdWUpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkge1xyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIE51bGxMaXRlcmFsOiBmdW5jdGlvbiBOdWxsTGl0ZXJhbCgpIHtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgSGFzaDogZnVuY3Rpb24gSGFzaChoYXNoKSB7XHJcblx0ICAgIHZhciBwYWlycyA9IGhhc2gucGFpcnMsXHJcblx0ICAgICAgICBpID0gMCxcclxuXHQgICAgICAgIGwgPSBwYWlycy5sZW5ndGg7XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaEhhc2gnKTtcclxuXHJcblx0ICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpO1xyXG5cdCAgICB9XHJcblx0ICAgIHdoaWxlIChpLS0pIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTtcclxuXHQgICAgfVxyXG5cdCAgICB0aGlzLm9wY29kZSgncG9wSGFzaCcpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBIRUxQRVJTXHJcblx0ICBvcGNvZGU6IGZ1bmN0aW9uIG9wY29kZShuYW1lKSB7XHJcblx0ICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgYWRkRGVwdGg6IGZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoKSB7XHJcblx0ICAgIGlmICghZGVwdGgpIHtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMudXNlRGVwdGhzID0gdHJ1ZTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY2xhc3NpZnlTZXhwcjogZnVuY3Rpb24gY2xhc3NpZnlTZXhwcihzZXhwcikge1xyXG5cdCAgICB2YXIgaXNTaW1wbGUgPSBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XHJcblxyXG5cdCAgICB2YXIgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTtcclxuXHJcblx0ICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOlxyXG5cdCAgICAvLyAqIGl0cyBpZCBpcyBzaW1wbGUgKGEgc2luZ2xlIHBhcnQsIG5vdCBgdGhpc2Agb3IgYC4uYClcclxuXHQgICAgdmFyIGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XHJcblxyXG5cdCAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGVcclxuXHQgICAgLy8gaGVscGVyLCBpdCBpcyBhbWJpZ3VvdXMsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGluIGEgbGF0ZXJcclxuXHQgICAgLy8gcGFzcyBvciBhdCBydW50aW1lLlxyXG5cdCAgICB2YXIgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTtcclxuXHJcblx0ICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3dcclxuXHQgICAgLy8gQW4gZWxpZ2libGUgaGVscGVyIGlzIG9uZSB0aGF0IGRvZXMgbm90IGhhdmUgYSBjb21wbGV4IHBhdGgsIGkuZS4gYHRoaXMuZm9vYCwgYC4uL2Zvb2AgZXRjLlxyXG5cdCAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcclxuXHQgICAgICB2YXIgX25hbWUyID0gc2V4cHIucGF0aC5wYXJ0c1swXSxcclxuXHQgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcclxuXHJcblx0ICAgICAgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzW19uYW1lMl0pIHtcclxuXHQgICAgICAgIGlzSGVscGVyID0gdHJ1ZTtcclxuXHQgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xyXG5cdCAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKGlzSGVscGVyKSB7XHJcblx0ICAgICAgcmV0dXJuICdoZWxwZXInO1xyXG5cdCAgICB9IGVsc2UgaWYgKGlzRWxpZ2libGUpIHtcclxuXHQgICAgICByZXR1cm4gJ2FtYmlndW91cyc7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuICdzaW1wbGUnO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hQYXJhbXM6IGZ1bmN0aW9uIHB1c2hQYXJhbXMocGFyYW1zKSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgIHRoaXMucHVzaFBhcmFtKHBhcmFtc1tpXSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgcHVzaFBhcmFtOiBmdW5jdGlvbiBwdXNoUGFyYW0odmFsKSB7XHJcblx0ICAgIHZhciB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnO1xyXG5cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcclxuXHQgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXihcXC4/XFwuXFwvKSovZywgJycpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgaWYgKHZhbC5kZXB0aCkge1xyXG5cdCAgICAgICAgdGhpcy5hZGREZXB0aCh2YWwuZGVwdGgpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHZhbC5kZXB0aCB8fCAwKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZ1BhcmFtJywgdmFsdWUsIHZhbC50eXBlKTtcclxuXHJcblx0ICAgICAgaWYgKHZhbC50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcclxuXHQgICAgICAgIC8vIFN1YkV4cHJlc3Npb25zIGdldCBldmFsdWF0ZWQgYW5kIHBhc3NlZCBpblxyXG5cdCAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxyXG5cdCAgICAgICAgdGhpcy5hY2NlcHQodmFsKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICAgIHZhciBibG9ja1BhcmFtSW5kZXggPSB1bmRlZmluZWQ7XHJcblx0ICAgICAgICBpZiAodmFsLnBhcnRzICYmICFfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2NvcGVkSWQodmFsKSAmJiAhdmFsLmRlcHRoKSB7XHJcblx0ICAgICAgICAgIGJsb2NrUGFyYW1JbmRleCA9IHRoaXMuYmxvY2tQYXJhbUluZGV4KHZhbC5wYXJ0c1swXSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XHJcblx0ICAgICAgICAgIHZhciBibG9ja1BhcmFtQ2hpbGQgPSB2YWwucGFydHMuc2xpY2UoMSkuam9pbignLicpO1xyXG5cdCAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgJ0Jsb2NrUGFyYW0nLCBibG9ja1BhcmFtSW5kZXgsIGJsb2NrUGFyYW1DaGlsZCk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICB2YWx1ZSA9IHZhbC5vcmlnaW5hbCB8fCB2YWx1ZTtcclxuXHQgICAgICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcclxuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpLnJlcGxhY2UoL15cXC5cXC8vLCAnJykucmVwbGFjZSgvXlxcLiQvLCAnJyk7XHJcblx0ICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCB2YWwudHlwZSwgdmFsdWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zOiBmdW5jdGlvbiBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSwgb21pdEVtcHR5KSB7XHJcblx0ICAgIHZhciBwYXJhbXMgPSBzZXhwci5wYXJhbXM7XHJcblx0ICAgIHRoaXMucHVzaFBhcmFtcyhwYXJhbXMpO1xyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xyXG5cclxuXHQgICAgaWYgKHNleHByLmhhc2gpIHtcclxuXHQgICAgICB0aGlzLmFjY2VwdChzZXhwci5oYXNoKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJywgb21pdEVtcHR5KTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHBhcmFtcztcclxuXHQgIH0sXHJcblxyXG5cdCAgYmxvY2tQYXJhbUluZGV4OiBmdW5jdGlvbiBibG9ja1BhcmFtSW5kZXgobmFtZSkge1xyXG5cdCAgICBmb3IgKHZhciBkZXB0aCA9IDAsIGxlbiA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5sZW5ndGg7IGRlcHRoIDwgbGVuOyBkZXB0aCsrKSB7XHJcblx0ICAgICAgdmFyIGJsb2NrUGFyYW1zID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zW2RlcHRoXSxcclxuXHQgICAgICAgICAgcGFyYW0gPSBibG9ja1BhcmFtcyAmJiBfdXRpbHMuaW5kZXhPZihibG9ja1BhcmFtcywgbmFtZSk7XHJcblx0ICAgICAgaWYgKGJsb2NrUGFyYW1zICYmIHBhcmFtID49IDApIHtcclxuXHQgICAgICAgIHJldHVybiBbZGVwdGgsIHBhcmFtXTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcclxuXHQgIGlmIChpbnB1dCA9PSBudWxsIHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xyXG5cdCAgfVxyXG5cclxuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdCAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XHJcblx0ICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XHJcblx0ICB9XHJcblx0ICBpZiAob3B0aW9ucy5jb21wYXQpIHtcclxuXHQgICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxyXG5cdCAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcclxuXHQgIHJldHVybiBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7XHJcblx0ICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XHJcblxyXG5cdCAgaWYgKGlucHV0ID09IG51bGwgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpIHtcclxuXHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5jb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XHJcblx0ICB9XHJcblxyXG5cdCAgb3B0aW9ucyA9IF91dGlscy5leHRlbmQoe30sIG9wdGlvbnMpO1xyXG5cdCAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XHJcblx0ICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XHJcblx0ICB9XHJcblx0ICBpZiAob3B0aW9ucy5jb21wYXQpIHtcclxuXHQgICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBjb21waWxlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICBmdW5jdGlvbiBjb21waWxlSW5wdXQoKSB7XHJcblx0ICAgIHZhciBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxyXG5cdCAgICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpLFxyXG5cdCAgICAgICAgdGVtcGxhdGVTcGVjID0gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zLCB1bmRlZmluZWQsIHRydWUpO1xyXG5cdCAgICByZXR1cm4gZW52LnRlbXBsYXRlKHRlbXBsYXRlU3BlYyk7XHJcblx0ICB9XHJcblxyXG5cdCAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxyXG5cdCAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIGV4ZWNPcHRpb25zKSB7XHJcblx0ICAgIGlmICghY29tcGlsZWQpIHtcclxuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBjb21waWxlZC5jYWxsKHRoaXMsIGNvbnRleHQsIGV4ZWNPcHRpb25zKTtcclxuXHQgIH1cclxuXHQgIHJldC5fc2V0dXAgPSBmdW5jdGlvbiAoc2V0dXBPcHRpb25zKSB7XHJcblx0ICAgIGlmICghY29tcGlsZWQpIHtcclxuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBjb21waWxlZC5fc2V0dXAoc2V0dXBPcHRpb25zKTtcclxuXHQgIH07XHJcblx0ICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcclxuXHQgICAgaWYgKCFjb21waWxlZCkge1xyXG5cdCAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGNvbXBpbGVkLl9jaGlsZChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcclxuXHQgIH07XHJcblx0ICByZXR1cm4gcmV0O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXJnRXF1YWxzKGEsIGIpIHtcclxuXHQgIGlmIChhID09PSBiKSB7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIGlmIChfdXRpbHMuaXNBcnJheShhKSAmJiBfdXRpbHMuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgaWYgKCFhcmdFcXVhbHMoYVtpXSwgYltpXSkpIHtcclxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKSB7XHJcblx0ICBpZiAoIXNleHByLnBhdGgucGFydHMpIHtcclxuXHQgICAgdmFyIGxpdGVyYWwgPSBzZXhwci5wYXRoO1xyXG5cdCAgICAvLyBDYXN0aW5nIHRvIHN0cmluZyBoZXJlIHRvIG1ha2UgZmFsc2UgYW5kIDAgbGl0ZXJhbCB2YWx1ZXMgcGxheSBuaWNlbHkgd2l0aCB0aGUgcmVzdFxyXG5cdCAgICAvLyBvZiB0aGUgc3lzdGVtLlxyXG5cdCAgICBzZXhwci5wYXRoID0ge1xyXG5cdCAgICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXHJcblx0ICAgICAgZGF0YTogZmFsc2UsXHJcblx0ICAgICAgZGVwdGg6IDAsXHJcblx0ICAgICAgcGFydHM6IFtsaXRlcmFsLm9yaWdpbmFsICsgJyddLFxyXG5cdCAgICAgIG9yaWdpbmFsOiBsaXRlcmFsLm9yaWdpbmFsICsgJycsXHJcblx0ICAgICAgbG9jOiBsaXRlcmFsLmxvY1xyXG5cdCAgICB9O1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0MiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfY29kZUdlbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xyXG5cclxuXHR2YXIgX2NvZGVHZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZUdlbik7XHJcblxyXG5cdGZ1bmN0aW9uIExpdGVyYWwodmFsdWUpIHtcclxuXHQgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIEphdmFTY3JpcHRDb21waWxlcigpIHt9XHJcblxyXG5cdEphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGUgPSB7XHJcblx0ICAvLyBQVUJMSUMgQVBJOiBZb3UgY2FuIG92ZXJyaWRlIHRoZXNlIG1ldGhvZHMgaW4gYSBzdWJjbGFzcyB0byBwcm92aWRlXHJcblx0ICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcclxuXHQgIG5hbWVMb29rdXA6IGZ1bmN0aW9uIG5hbWVMb29rdXAocGFyZW50LCBuYW1lIC8qICwgdHlwZSovKSB7XHJcblx0ICAgIGlmIChKYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUobmFtZSkpIHtcclxuXHQgICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICByZXR1cm4gW3BhcmVudCwgJ1snLCBKU09OLnN0cmluZ2lmeShuYW1lKSwgJ10nXTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHQgIGRlcHRoZWRMb29rdXA6IGZ1bmN0aW9uIGRlcHRoZWRMb29rdXAobmFtZSkge1xyXG5cdCAgICByZXR1cm4gW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksICcoZGVwdGhzLCBcIicsIG5hbWUsICdcIiknXTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbiBjb21waWxlckluZm8oKSB7XHJcblx0ICAgIHZhciByZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OLFxyXG5cdCAgICAgICAgdmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTtcclxuXHQgICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xyXG5cdCAgfSxcclxuXHJcblx0ICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcclxuXHQgICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy5cclxuXHQgICAgaWYgKCFfdXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XHJcblx0ICAgICAgc291cmNlID0gW3NvdXJjZV07XHJcblx0ICAgIH1cclxuXHQgICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTtcclxuXHJcblx0ICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XHJcblx0ICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcclxuXHQgICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xyXG5cdCAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXJcclxuXHQgICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXHJcblx0ICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXHJcblx0ICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xyXG5cdCAgICAgIHJldHVybiBzb3VyY2U7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24gaW5pdGlhbGl6ZUJ1ZmZlcigpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcclxuXHQgIH0sXHJcblx0ICAvLyBFTkQgUFVCTElDIEFQSVxyXG5cclxuXHQgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XHJcblx0ICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcclxuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xyXG5cdCAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzO1xyXG5cdCAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XHJcblxyXG5cdCAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7XHJcblx0ICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcclxuXHQgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7XHJcblx0ICAgICAgZGVjb3JhdG9yczogW10sXHJcblx0ICAgICAgcHJvZ3JhbXM6IFtdLFxyXG5cdCAgICAgIGVudmlyb25tZW50czogW11cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHRoaXMucHJlYW1ibGUoKTtcclxuXHJcblx0ICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcclxuXHQgICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcclxuXHQgICAgdGhpcy5hbGlhc2VzID0ge307XHJcblx0ICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xyXG5cdCAgICB0aGlzLmhhc2hlcyA9IFtdO1xyXG5cdCAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdO1xyXG5cdCAgICB0aGlzLmlubGluZVN0YWNrID0gW107XHJcblx0ICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcclxuXHJcblx0ICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcclxuXHJcblx0ICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDtcclxuXHQgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XHJcblxyXG5cdCAgICB2YXIgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsXHJcblx0ICAgICAgICBvcGNvZGUgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBmaXJzdExvYyA9IHVuZGVmaW5lZCxcclxuXHQgICAgICAgIGkgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBsID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcclxuXHJcblx0ICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcclxuXHQgICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7XHJcblx0ICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cclxuXHQgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gZmlyc3RMb2M7XHJcblx0ICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XHJcblxyXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkge1xyXG5cdCAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XHJcblxyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzO1xcbicpO1xyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XHJcblxyXG5cdCAgICAgIGlmIChhc09iamVjdCkge1xyXG5cdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gRnVuY3Rpb24uYXBwbHkodGhpcywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCAnZGVwdGgwJywgJ2RhdGEnLCAnYmxvY2tQYXJhbXMnLCAnZGVwdGhzJywgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCldKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nKTtcclxuXHQgICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XHJcblx0ICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XHJcblx0ICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XHJcblx0ICAgICAgdmFyIHJldCA9IHtcclxuXHQgICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxyXG5cdCAgICAgICAgbWFpbjogZm5cclxuXHQgICAgICB9O1xyXG5cclxuXHQgICAgICBpZiAodGhpcy5kZWNvcmF0b3JzKSB7XHJcblx0ICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxyXG5cdCAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgdmFyIF9jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cdCAgICAgIHZhciBwcm9ncmFtcyA9IF9jb250ZXh0LnByb2dyYW1zO1xyXG5cdCAgICAgIHZhciBkZWNvcmF0b3JzID0gX2NvbnRleHQuZGVjb3JhdG9ycztcclxuXHJcblx0ICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgICAgaWYgKHByb2dyYW1zW2ldKSB7XHJcblx0ICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldO1xyXG5cdCAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xyXG5cdCAgICAgICAgICAgIHJldFtpICsgJ19kJ10gPSBkZWNvcmF0b3JzW2ldO1xyXG5cdCAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQudXNlUGFydGlhbCkge1xyXG5cdCAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcclxuXHQgICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcclxuXHQgICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XHJcblx0ICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIGlmICghYXNPYmplY3QpIHtcclxuXHQgICAgICAgIHJldC5jb21waWxlciA9IEpTT04uc3RyaW5naWZ5KHJldC5jb21waWxlcik7XHJcblxyXG5cdCAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9O1xyXG5cdCAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XHJcblxyXG5cdCAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xyXG5cdCAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmdXaXRoU291cmNlTWFwKHsgZmlsZTogb3B0aW9ucy5kZXN0TmFtZSB9KTtcclxuXHQgICAgICAgICAgcmV0Lm1hcCA9IHJldC5tYXAgJiYgcmV0Lm1hcC50b1N0cmluZygpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldC5jb21waWxlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiBmbjtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBwcmVhbWJsZTogZnVuY3Rpb24gcHJlYW1ibGUoKSB7XHJcblx0ICAgIC8vIHRyYWNrIHRoZSBsYXN0IGNvbnRleHQgcHVzaGVkIGludG8gcGxhY2UgdG8gYWxsb3cgc2tpcHBpbmcgdGhlXHJcblx0ICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wXHJcblx0ICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xyXG5cdCAgICB0aGlzLnNvdXJjZSA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XHJcblx0ICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7XHJcblx0ICAgIHZhciB2YXJEZWNsYXJhdGlvbnMgPSAnJztcclxuXHJcblx0ICAgIHZhciBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7XHJcblx0ICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEdlbmVyYXRlIG1pbmltaXplciBhbGlhcyBtYXBwaW5nc1xyXG5cdCAgICAvL1xyXG5cdCAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXHJcblx0ICAgIC8vIGFzIHRoZSBzb3VyY2Ugbm9kZXMgYXJlIHJldXNlZCBpbiBzaXR1LiBGb3IgdGhlIG5vbi1zb3VyY2Ugbm9kZSBjb21waWxhdGlvbiBtb2RlLFxyXG5cdCAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcclxuXHQgICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cclxuXHQgICAgdmFyIGFsaWFzQ291bnQgPSAwO1xyXG5cdCAgICBmb3IgKHZhciBhbGlhcyBpbiB0aGlzLmFsaWFzZXMpIHtcclxuXHQgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxyXG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5hbGlhc2VzW2FsaWFzXTtcclxuXHJcblx0ICAgICAgaWYgKHRoaXMuYWxpYXNlcy5oYXNPd25Qcm9wZXJ0eShhbGlhcykgJiYgbm9kZS5jaGlsZHJlbiAmJiBub2RlLnJlZmVyZW5jZUNvdW50ID4gMSkge1xyXG5cdCAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzO1xyXG5cdCAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcclxuXHJcblx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goJ2RlcHRocycpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxyXG5cdCAgICB2YXIgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xyXG5cclxuXHQgICAgaWYgKGFzT2JqZWN0KSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goc291cmNlKTtcclxuXHJcblx0ICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uIG1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucykge1xyXG5cdCAgICB2YXIgaXNTaW1wbGUgPSB0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlLFxyXG5cdCAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxyXG5cdCAgICAgICAgYXBwZW5kRmlyc3QgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBzb3VyY2VTZWVuID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgYnVmZmVyU3RhcnQgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XHJcblx0ICAgIHRoaXMuc291cmNlLmVhY2goZnVuY3Rpb24gKGxpbmUpIHtcclxuXHQgICAgICBpZiAobGluZS5hcHBlbmRUb0J1ZmZlcikge1xyXG5cdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XHJcblx0ICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgYnVmZmVyRW5kID0gbGluZTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XHJcblx0ICAgICAgICAgIGlmICghc291cmNlU2Vlbikge1xyXG5cdCAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdidWZmZXIgKz0gJyk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xyXG5cdCAgICAgICAgICBidWZmZXJTdGFydCA9IGJ1ZmZlckVuZCA9IHVuZGVmaW5lZDtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBzb3VyY2VTZWVuID0gdHJ1ZTtcclxuXHQgICAgICAgIGlmICghaXNTaW1wbGUpIHtcclxuXHQgICAgICAgICAgYXBwZW5kT25seSA9IGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBpZiAoYXBwZW5kT25seSkge1xyXG5cdCAgICAgIGlmIChidWZmZXJTdGFydCkge1xyXG5cdCAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuICcpO1xyXG5cdCAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xyXG5cdCAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcclxuXHQgICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBcIlwiOycpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpO1xyXG5cclxuXHQgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcclxuXHQgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ3JldHVybiBidWZmZXIgKyAnKTtcclxuXHQgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIGJ1ZmZlcjsnKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcclxuXHQgICAgICB0aGlzLnNvdXJjZS5wcmVwZW5kKCd2YXIgJyArIHZhckRlY2xhcmF0aW9ucy5zdWJzdHJpbmcoMikgKyAoYXBwZW5kRmlyc3QgPyAnJyA6ICc7XFxuJykpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2Jsb2NrVmFsdWVdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmV0dXJuIHZhbHVlIG9mIGJsb2NrSGVscGVyTWlzc2luZ1xyXG5cdCAgLy9cclxuXHQgIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxyXG5cdCAgLy8gYHt7I3RoaXMuZm9vfX0uLi57ey90aGlzLmZvb319YCwgcmVzb2x2ZSB0aGUgdmFsdWUgb2YgYGZvb2AsIGFuZFxyXG5cdCAgLy8gcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHByb3Blcmx5XHJcblx0ICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXHJcblx0ICBibG9ja1ZhbHVlOiBmdW5jdGlvbiBibG9ja1ZhbHVlKG5hbWUpIHtcclxuXHQgICAgdmFyIGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLFxyXG5cdCAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xyXG5cdCAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xyXG5cclxuXHQgICAgdmFyIGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBibG9ja05hbWUpO1xyXG5cclxuXHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXHJcblx0ICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbGFzdEhlbHBlcjogdmFsdWVcclxuXHQgIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uIGFtYmlndW91c0Jsb2NrVmFsdWUoKSB7XHJcblx0ICAgIC8vIFdlJ3JlIGJlaW5nIGEgYml0IGNoZWVreSBhbmQgcmV1c2luZyB0aGUgb3B0aW9ucyB2YWx1ZSBmcm9tIHRoZSBwcmlvciBleGVjXHJcblx0ICAgIHZhciBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcclxuXHQgICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcclxuXHQgICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MoJycsIDAsIHBhcmFtcywgdHJ1ZSk7XHJcblxyXG5cdCAgICB0aGlzLmZsdXNoSW5saW5lKCk7XHJcblxyXG5cdCAgICB2YXIgY3VycmVudCA9IHRoaXMudG9wU3RhY2soKTtcclxuXHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcclxuXHJcblx0ICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICghJywgdGhpcy5sYXN0SGVscGVyLCAnKSB7ICcsIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksICd9J10pO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbYXBwZW5kQ29udGVudF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcclxuXHQgIGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uIGFwcGVuZENvbnRlbnQoY29udGVudCkge1xyXG5cdCAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xyXG5cdCAgICAgIGNvbnRlbnQgPSB0aGlzLnBlbmRpbmdDb250ZW50ICsgY29udGVudDtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthcHBlbmRdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBDb2VyY2VzIGB2YWx1ZWAgdG8gYSBTdHJpbmcgYW5kIGFwcGVuZHMgaXQgdG8gdGhlIGN1cnJlbnQgYnVmZmVyLlxyXG5cdCAgLy9cclxuXHQgIC8vIElmIGB2YWx1ZWAgaXMgdHJ1dGh5LCBvciAwLCBpdCBpcyBjb2VyY2VkIGludG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkXHJcblx0ICAvLyBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcgaXMgYXBwZW5kZWRcclxuXHQgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xyXG5cdCAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XHJcblx0ICAgICAgdGhpcy5yZXBsYWNlU3RhY2soZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuXHQgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgY3VycmVudCwgJyA6IFwiXCInXTtcclxuXHQgICAgICB9KTtcclxuXHJcblx0ICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdmFyIGxvY2FsID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcclxuXHQgICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xyXG5cdCAgICAgICAgdGhpcy5wdXNoU291cmNlKFsnZWxzZSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIoXCInJ1wiLCB1bmRlZmluZWQsIHRydWUpLCAnIH0nXSk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthcHBlbmRFc2NhcGVkXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXHJcblx0ICBhcHBlbmRFc2NhcGVkOiBmdW5jdGlvbiBhcHBlbmRFc2NhcGVkKCkge1xyXG5cdCAgICB0aGlzLnB1c2hTb3VyY2UodGhpcy5hcHBlbmRUb0J1ZmZlcihbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnKSddKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtnZXRDb250ZXh0XVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcclxuXHQgIC8vXHJcblx0ICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBgbGFzdENvbnRleHRgIGNvbXBpbGVyIHZhbHVlIHRvIHRoZSBkZXB0aFxyXG5cdCAgZ2V0Q29udGV4dDogZnVuY3Rpb24gZ2V0Q29udGV4dChkZXB0aCkge1xyXG5cdCAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtwdXNoQ29udGV4dF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHQsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cclxuXHQgIHB1c2hDb250ZXh0OiBmdW5jdGlvbiBwdXNoQ29udGV4dCgpIHtcclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMuY29udGV4dE5hbWUodGhpcy5sYXN0Q29udGV4dCkpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbbG9va3VwT25Db250ZXh0XVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBuYW1lYCBvbiB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBwdXNoZXNcclxuXHQgIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxyXG5cdCAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbiBsb29rdXBPbkNvbnRleHQocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xyXG5cdCAgICB2YXIgaSA9IDA7XHJcblxyXG5cdCAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XHJcblx0ICAgICAgLy8gVGhlIGRlcHRoZWQgcXVlcnkgaXMgZXhwZWN0ZWQgdG8gaGFuZGxlIHRoZSB1bmRlZmluZWQgbG9naWMgZm9yIHRoZSByb290IGxldmVsIHRoYXRcclxuXHQgICAgICAvLyBpcyBpbXBsZW1lbnRlZCBiZWxvdywgc28gd2UgZXZhbHVhdGUgdGhhdCBkaXJlY3RseSBpbiBjb21wYXQgbW9kZVxyXG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMucHVzaENvbnRleHQoKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2xvb2t1cEJsb2NrUGFyYW1dXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGJsb2NrUGFyYW1bbmFtZV0sIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXHJcblx0ICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cclxuXHQgIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uIGxvb2t1cEJsb2NrUGFyYW0oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xyXG5cdCAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdHJ1ZTtcclxuXHJcblx0ICAgIHRoaXMucHVzaChbJ2Jsb2NrUGFyYW1zWycsIGJsb2NrUGFyYW1JZFswXSwgJ11bJywgYmxvY2tQYXJhbUlkWzFdLCAnXSddKTtcclxuXHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2xvb2t1cERhdGFdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGRhdGEsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXHJcblx0ICBsb29rdXBEYXRhOiBmdW5jdGlvbiBsb29rdXBEYXRhKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XHJcblx0ICAgIGlmICghZGVwdGgpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2RhdGEnKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2NvbnRhaW5lci5kYXRhKGRhdGEsICcgKyBkZXB0aCArICcpJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2RhdGEnLCBwYXJ0cywgMCwgdHJ1ZSwgc3RyaWN0KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XHJcblx0ICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XHJcblxyXG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goc3RyaWN0TG9va3VwKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgc3RyaWN0LCB0aGlzLCBwYXJ0cywgdHlwZSkpO1xyXG5cdCAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGxlbiA9IHBhcnRzLmxlbmd0aDtcclxuXHQgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cdCAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcblx0ICAgICAgICB2YXIgbG9va3VwID0gX3RoaXMubmFtZUxvb2t1cChjdXJyZW50LCBwYXJ0c1tpXSwgdHlwZSk7XHJcblx0ICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxyXG5cdCAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxyXG5cdCAgICAgICAgaWYgKCFmYWxzeSkge1xyXG5cdCAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiB1c2UgZ2VuZXJpYyBmYWxzeSBoYW5kbGluZ1xyXG5cdCAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9KTtcclxuXHQgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtyZXNvbHZlUG9zc2libGVMYW1iZGFdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXNvbHZlZCB2YWx1ZSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gSWYgdGhlIGB2YWx1ZWAgaXMgYSBsYW1iZGEsIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGJ5XHJcblx0ICAvLyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBsYW1iZGFcclxuXHQgIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24gcmVzb2x2ZVBvc3NpYmxlTGFtYmRhKCkge1xyXG5cdCAgICB0aGlzLnB1c2goW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubGFtYmRhJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnLCAnLCB0aGlzLmNvbnRleHROYW1lKDApLCAnKSddKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGNvZGUgaXMgZGVzaWduZWQgZm9yIHVzZSBpbiBzdHJpbmcgbW9kZSwgd2hpY2hcclxuXHQgIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcclxuXHQgIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cclxuXHQgIHB1c2hTdHJpbmdQYXJhbTogZnVuY3Rpb24gcHVzaFN0cmluZ1BhcmFtKHN0cmluZywgdHlwZSkge1xyXG5cdCAgICB0aGlzLnB1c2hDb250ZXh0KCk7XHJcblx0ICAgIHRoaXMucHVzaFN0cmluZyh0eXBlKTtcclxuXHJcblx0ICAgIC8vIElmIGl0J3MgYSBzdWJleHByZXNzaW9uLCB0aGUgc3RyaW5nIHJlc3VsdFxyXG5cdCAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cclxuXHQgICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xyXG5cdCAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykge1xyXG5cdCAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChzdHJpbmcpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBlbXB0eUhhc2g6IGZ1bmN0aW9uIGVtcHR5SGFzaChvbWl0RW1wdHkpIHtcclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xyXG5cdCAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXHJcblx0ICAgIH1cclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XHJcblx0ICB9LFxyXG5cdCAgcHVzaEhhc2g6IGZ1bmN0aW9uIHB1c2hIYXNoKCkge1xyXG5cdCAgICBpZiAodGhpcy5oYXNoKSB7XHJcblx0ICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xyXG5cdCAgICB9XHJcblx0ICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcclxuXHQgIH0sXHJcblx0ICBwb3BIYXNoOiBmdW5jdGlvbiBwb3BIYXNoKCkge1xyXG5cdCAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcclxuXHQgICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoZXMucG9wKCk7XHJcblxyXG5cdCAgICBpZiAodGhpcy50cmFja0lkcykge1xyXG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC5pZHMpKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guY29udGV4dHMpKTtcclxuXHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnZhbHVlcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbcHVzaFN0cmluZ11cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcXVvdGVkU3RyaW5nKHN0cmluZyksIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2ggYSBxdW90ZWQgdmVyc2lvbiBvZiBgc3RyaW5nYCBvbnRvIHRoZSBzdGFja1xyXG5cdCAgcHVzaFN0cmluZzogZnVuY3Rpb24gcHVzaFN0cmluZyhzdHJpbmcpIHtcclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucXVvdGVkU3RyaW5nKHN0cmluZykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbcHVzaExpdGVyYWxdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBQdXNoZXMgYSB2YWx1ZSBvbnRvIHRoZSBzdGFjay4gVGhpcyBvcGVyYXRpb24gcHJldmVudHNcclxuXHQgIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcclxuXHQgIC8vIGl0LlxyXG5cdCAgcHVzaExpdGVyYWw6IGZ1bmN0aW9uIHB1c2hMaXRlcmFsKHZhbHVlKSB7XHJcblx0ICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtwdXNoUHJvZ3JhbV1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xyXG5cdCAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxyXG5cdCAgLy8gZXhwcmVzc2lvbi5cclxuXHQgIHB1c2hQcm9ncmFtOiBmdW5jdGlvbiBwdXNoUHJvZ3JhbShndWlkKSB7XHJcblx0ICAgIGlmIChndWlkICE9IG51bGwpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5wcm9ncmFtRXhwcmVzc2lvbihndWlkKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBQb3BzIG9mZiB0aGUgZGVjb3JhdG9yJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgZGVjb3JhdG9yLFxyXG5cdCAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXHJcblx0ICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IocGFyYW1TaXplLCBuYW1lKSB7XHJcblx0ICAgIHZhciBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcclxuXHQgICAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUpO1xyXG5cclxuXHQgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goWydmbiA9ICcsIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsIG9wdGlvbnNdKSwgJyB8fCBmbjsnXSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtpbnZva2VIZWxwZXJdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcclxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cclxuXHQgIC8vXHJcblx0ICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cclxuXHQgIGludm9rZUhlbHBlcjogZnVuY3Rpb24gaW52b2tlSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgaXNTaW1wbGUpIHtcclxuXHQgICAgdmFyIG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcclxuXHQgICAgICAgIGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIocGFyYW1TaXplLCBuYW1lKSxcclxuXHQgICAgICAgIHNpbXBsZSA9IGlzU2ltcGxlID8gW2hlbHBlci5uYW1lLCAnIHx8ICddIDogJyc7XHJcblxyXG5cdCAgICB2YXIgbG9va3VwID0gWycoJ10uY29uY2F0KHNpbXBsZSwgbm9uSGVscGVyKTtcclxuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XHJcblx0ICAgICAgbG9va3VwLnB1c2goJyB8fCAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xyXG5cdCAgICB9XHJcblx0ICAgIGxvb2t1cC5wdXNoKCcpJyk7XHJcblxyXG5cdCAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbaW52b2tlS25vd25IZWxwZXJdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXHJcblx0ICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXHJcblx0ICBpbnZva2VLbm93bkhlbHBlcjogZnVuY3Rpb24gaW52b2tlS25vd25IZWxwZXIocGFyYW1TaXplLCBuYW1lKSB7XHJcblx0ICAgIHZhciBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XHJcblx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2ludm9rZUFtYmlndW91c11cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgZGlzYW1iaWd1YXRpb25cclxuXHQgIC8vXHJcblx0ICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxyXG5cdCAgLy8gaXMgcHJvdmlkZWQsIGJ1dCB3ZSBkb24ndCBrbm93IGF0IGNvbXBpbGUtdGltZSB3aGV0aGVyIGl0XHJcblx0ICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gZW1pdHMgbW9yZSBjb2RlIHRoYW4gdGhlIG90aGVyIG9wdGlvbnMsXHJcblx0ICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXHJcblx0ICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxyXG5cdCAgaW52b2tlQW1iaWd1b3VzOiBmdW5jdGlvbiBpbnZva2VBbWJpZ3VvdXMobmFtZSwgaGVscGVyQ2FsbCkge1xyXG5cdCAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcclxuXHJcblx0ICAgIHZhciBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblxyXG5cdCAgICB0aGlzLmVtcHR5SGFzaCgpO1xyXG5cdCAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcigwLCBuYW1lLCBoZWxwZXJDYWxsKTtcclxuXHJcblx0ICAgIHZhciBoZWxwZXJOYW1lID0gdGhpcy5sYXN0SGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpO1xyXG5cclxuXHQgICAgdmFyIGxvb2t1cCA9IFsnKCcsICcoaGVscGVyID0gJywgaGVscGVyTmFtZSwgJyB8fCAnLCBub25IZWxwZXIsICcpJ107XHJcblx0ICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xyXG5cdCAgICAgIGxvb2t1cFswXSA9ICcoaGVscGVyID0gJztcclxuXHQgICAgICBsb29rdXAucHVzaCgnICE9IG51bGwgPyBoZWxwZXIgOiAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB0aGlzLnB1c2goWycoJywgbG9va3VwLCBoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10sICcpLCcsICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJywgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ10pO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbaW52b2tlUGFydGlhbF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcclxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxyXG5cdCAgaW52b2tlUGFydGlhbDogZnVuY3Rpb24gaW52b2tlUGFydGlhbChpc0R5bmFtaWMsIG5hbWUsIGluZGVudCkge1xyXG5cdCAgICB2YXIgcGFyYW1zID0gW10sXHJcblx0ICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xyXG5cclxuXHQgICAgaWYgKGlzRHluYW1pYykge1xyXG5cdCAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKGluZGVudCkge1xyXG5cdCAgICAgIG9wdGlvbnMuaW5kZW50ID0gSlNPTi5zdHJpbmdpZnkoaW5kZW50KTtcclxuXHQgICAgfVxyXG5cdCAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XHJcblx0ICAgIG9wdGlvbnMucGFydGlhbHMgPSAncGFydGlhbHMnO1xyXG5cdCAgICBvcHRpb25zLmRlY29yYXRvcnMgPSAnY29udGFpbmVyLmRlY29yYXRvcnMnO1xyXG5cclxuXHQgICAgaWYgKCFpc0R5bmFtaWMpIHtcclxuXHQgICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcGFyYW1zLnVuc2hpZnQobmFtZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XHJcblx0ICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcclxuXHQgICAgfVxyXG5cdCAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xyXG5cdCAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcclxuXHJcblx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2NvbnRhaW5lci5pbnZva2VQYXJ0aWFsJywgJycsIHBhcmFtcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbYXNzaWduVG9IYXNoXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4sIGhhc2gsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi4sIGhhc2gsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFBvcHMgYSB2YWx1ZSBvZmYgdGhlIHN0YWNrIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjdXJyZW50IGhhc2hcclxuXHQgIGFzc2lnblRvSGFzaDogZnVuY3Rpb24gYXNzaWduVG9IYXNoKGtleSkge1xyXG5cdCAgICB2YXIgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXHJcblx0ICAgICAgICBjb250ZXh0ID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgdHlwZSA9IHVuZGVmaW5lZCxcclxuXHQgICAgICAgIGlkID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICBpZCA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0eXBlID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xyXG5cdCAgICBpZiAoY29udGV4dCkge1xyXG5cdCAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHR5cGUpIHtcclxuXHQgICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmIChpZCkge1xyXG5cdCAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcclxuXHQgICAgfVxyXG5cdCAgICBoYXNoLnZhbHVlc1trZXldID0gdmFsdWU7XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hJZDogZnVuY3Rpb24gcHVzaElkKHR5cGUsIG5hbWUsIGNoaWxkKSB7XHJcblx0ICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJyArIChjaGlsZCA/ICcgKyAnICsgSlNPTi5zdHJpbmdpZnkoJy4nICsgY2hpbGQpIDogJycpKTtcclxuXHQgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XHJcblx0ICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xyXG5cdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgndHJ1ZScpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnbnVsbCcpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIEhFTFBFUlNcclxuXHJcblx0ICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxyXG5cclxuXHQgIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24gY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKSB7XHJcblx0ICAgIHZhciBjaGlsZHJlbiA9IGVudmlyb25tZW50LmNoaWxkcmVuLFxyXG5cdCAgICAgICAgY2hpbGQgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBjb21waWxlciA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuXHQgICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxyXG5cclxuXHQgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcclxuXHJcblx0ICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXHJcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHQucHJvZ3JhbXMubGVuZ3RoO1xyXG5cdCAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDtcclxuXHQgICAgICAgIGNoaWxkLm5hbWUgPSAncHJvZ3JhbScgKyBpbmRleDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtc1tpbmRleF0gPSBjb21waWxlci5jb21waWxlKGNoaWxkLCBvcHRpb25zLCB0aGlzLmNvbnRleHQsICF0aGlzLnByZWNvbXBpbGUpO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmRlY29yYXRvcnNbaW5kZXhdID0gY29tcGlsZXIuZGVjb3JhdG9ycztcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaW5kZXhdID0gY2hpbGQ7XHJcblxyXG5cdCAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjb21waWxlci51c2VEZXB0aHM7XHJcblx0ICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBjb21waWxlci51c2VCbG9ja1BhcmFtcztcclxuXHQgICAgICAgIGNoaWxkLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzO1xyXG5cdCAgICAgICAgY2hpbGQudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zO1xyXG5cdCAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICBjaGlsZC5pbmRleCA9IGV4aXN0aW5nLmluZGV4O1xyXG5cdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGV4aXN0aW5nLmluZGV4O1xyXG5cclxuXHQgICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZXhpc3RpbmcudXNlRGVwdGhzO1xyXG5cdCAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZXhpc3RpbmcudXNlQmxvY2tQYXJhbXM7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uIG1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpXTtcclxuXHQgICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xyXG5cdCAgICAgICAgcmV0dXJuIGVudmlyb25tZW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24gcHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkge1xyXG5cdCAgICB2YXIgY2hpbGQgPSB0aGlzLmVudmlyb25tZW50LmNoaWxkcmVuW2d1aWRdLFxyXG5cdCAgICAgICAgcHJvZ3JhbVBhcmFtcyA9IFtjaGlsZC5pbmRleCwgJ2RhdGEnLCBjaGlsZC5ibG9ja1BhcmFtc107XHJcblxyXG5cdCAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcyB8fCB0aGlzLnVzZURlcHRocykge1xyXG5cdCAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcclxuXHQgICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2RlcHRocycpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4gJ2NvbnRhaW5lci5wcm9ncmFtKCcgKyBwcm9ncmFtUGFyYW1zLmpvaW4oJywgJykgKyAnKSc7XHJcblx0ICB9LFxyXG5cclxuXHQgIHVzZVJlZ2lzdGVyOiBmdW5jdGlvbiB1c2VSZWdpc3RlcihuYW1lKSB7XHJcblx0ICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcclxuXHQgICAgICB0aGlzLnJlZ2lzdGVyc1tuYW1lXSA9IHRydWU7XHJcblx0ICAgICAgdGhpcy5yZWdpc3RlcnMubGlzdC5wdXNoKG5hbWUpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2g6IGZ1bmN0aW9uIHB1c2goZXhwcikge1xyXG5cdCAgICBpZiAoIShleHByIGluc3RhbmNlb2YgTGl0ZXJhbCkpIHtcclxuXHQgICAgICBleHByID0gdGhpcy5zb3VyY2Uud3JhcChleHByKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5pbmxpbmVTdGFjay5wdXNoKGV4cHIpO1xyXG5cdCAgICByZXR1cm4gZXhwcjtcclxuXHQgIH0sXHJcblxyXG5cdCAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24gcHVzaFN0YWNrTGl0ZXJhbChpdGVtKSB7XHJcblx0ICAgIHRoaXMucHVzaChuZXcgTGl0ZXJhbChpdGVtKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hTb3VyY2U6IGZ1bmN0aW9uIHB1c2hTb3VyY2Uoc291cmNlKSB7XHJcblx0ICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XHJcblx0ICAgICAgdGhpcy5zb3VyY2UucHVzaCh0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyh0aGlzLnBlbmRpbmdDb250ZW50KSwgdGhpcy5wZW5kaW5nTG9jYXRpb24pKTtcclxuXHQgICAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gdW5kZWZpbmVkO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoc291cmNlKSB7XHJcblx0ICAgICAgdGhpcy5zb3VyY2UucHVzaChzb3VyY2UpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlcGxhY2VTdGFjazogZnVuY3Rpb24gcmVwbGFjZVN0YWNrKGNhbGxiYWNrKSB7XHJcblx0ICAgIHZhciBwcmVmaXggPSBbJygnXSxcclxuXHQgICAgICAgIHN0YWNrID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgY3JlYXRlZFN0YWNrID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgdXNlZExpdGVyYWwgPSB1bmRlZmluZWQ7XHJcblxyXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICBpZiAoIXRoaXMuaXNJbmxpbmUoKSkge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdyZXBsYWNlU3RhY2sgb24gbm9uLWlubGluZScpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBXZSB3YW50IHRvIG1lcmdlIHRoZSBpbmxpbmUgc3RhdGVtZW50IGludG8gdGhlIHJlcGxhY2VtZW50IHN0YXRlbWVudCB2aWEgJywnXHJcblx0ICAgIHZhciB0b3AgPSB0aGlzLnBvcFN0YWNrKHRydWUpO1xyXG5cclxuXHQgICAgaWYgKHRvcCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXHJcblx0ICAgICAgc3RhY2sgPSBbdG9wLnZhbHVlXTtcclxuXHQgICAgICBwcmVmaXggPSBbJygnLCBzdGFja107XHJcblx0ICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIGN1cnJlbnQgc3RhY2sgbmFtZSBmb3IgdXNlIGJ5IHRoZSBpbmxpbmVcclxuXHQgICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xyXG5cdCAgICAgIHZhciBfbmFtZSA9IHRoaXMuaW5jclN0YWNrKCk7XHJcblxyXG5cdCAgICAgIHByZWZpeCA9IFsnKCgnLCB0aGlzLnB1c2goX25hbWUpLCAnID0gJywgdG9wLCAnKSddO1xyXG5cdCAgICAgIHN0YWNrID0gdGhpcy50b3BTdGFjaygpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgaXRlbSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RhY2spO1xyXG5cclxuXHQgICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xyXG5cdCAgICAgIHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XHJcblx0ICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcclxuXHQgICAgfVxyXG5cdCAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgaW5jclN0YWNrOiBmdW5jdGlvbiBpbmNyU3RhY2soKSB7XHJcblx0ICAgIHRoaXMuc3RhY2tTbG90Kys7XHJcblx0ICAgIGlmICh0aGlzLnN0YWNrU2xvdCA+IHRoaXMuc3RhY2tWYXJzLmxlbmd0aCkge1xyXG5cdCAgICAgIHRoaXMuc3RhY2tWYXJzLnB1c2goJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90KTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gdGhpcy50b3BTdGFja05hbWUoKTtcclxuXHQgIH0sXHJcblx0ICB0b3BTdGFja05hbWU6IGZ1bmN0aW9uIHRvcFN0YWNrTmFtZSgpIHtcclxuXHQgICAgcmV0dXJuICdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdDtcclxuXHQgIH0sXHJcblx0ICBmbHVzaElubGluZTogZnVuY3Rpb24gZmx1c2hJbmxpbmUoKSB7XHJcblx0ICAgIHZhciBpbmxpbmVTdGFjayA9IHRoaXMuaW5saW5lU3RhY2s7XHJcblx0ICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGlubGluZVN0YWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgdmFyIGVudHJ5ID0gaW5saW5lU3RhY2tbaV07XHJcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcblx0ICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xyXG5cdCAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChlbnRyeSk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHZhciBzdGFjayA9IHRoaXMuaW5jclN0YWNrKCk7XHJcblx0ICAgICAgICB0aGlzLnB1c2hTb3VyY2UoW3N0YWNrLCAnID0gJywgZW50cnksICc7J10pO1xyXG5cdCAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChzdGFjayk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgaXNJbmxpbmU6IGZ1bmN0aW9uIGlzSW5saW5lKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5pbmxpbmVTdGFjay5sZW5ndGg7XHJcblx0ICB9LFxyXG5cclxuXHQgIHBvcFN0YWNrOiBmdW5jdGlvbiBwb3BTdGFjayh3cmFwcGVkKSB7XHJcblx0ICAgIHZhciBpbmxpbmUgPSB0aGlzLmlzSW5saW5lKCksXHJcblx0ICAgICAgICBpdGVtID0gKGlubGluZSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjaykucG9wKCk7XHJcblxyXG5cdCAgICBpZiAoIXdyYXBwZWQgJiYgaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBpZiAoIWlubGluZSkge1xyXG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgICAgICAgIGlmICghdGhpcy5zdGFja1Nsb3QpIHtcclxuXHQgICAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLnN0YWNrU2xvdC0tO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gaXRlbTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICB0b3BTdGFjazogZnVuY3Rpb24gdG9wU3RhY2soKSB7XHJcblx0ICAgIHZhciBzdGFjayA9IHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayxcclxuXHQgICAgICAgIGl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuXHJcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG5cdCAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICByZXR1cm4gaXRlbTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBjb250ZXh0TmFtZTogZnVuY3Rpb24gY29udGV4dE5hbWUoY29udGV4dCkge1xyXG5cdCAgICBpZiAodGhpcy51c2VEZXB0aHMgJiYgY29udGV4dCkge1xyXG5cdCAgICAgIHJldHVybiAnZGVwdGhzWycgKyBjb250ZXh0ICsgJ10nO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiAnZGVwdGgnICsgY29udGV4dDtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uIHF1b3RlZFN0cmluZyhzdHIpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyhzdHIpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKG9iaikge1xyXG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xyXG5cdCAgfSxcclxuXHJcblx0ICBhbGlhc2FibGU6IGZ1bmN0aW9uIGFsaWFzYWJsZShuYW1lKSB7XHJcblx0ICAgIHZhciByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV07XHJcblx0ICAgIGlmIChyZXQpIHtcclxuXHQgICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcclxuXHQgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV0gPSB0aGlzLnNvdXJjZS53cmFwKG5hbWUpO1xyXG5cdCAgICByZXQuYWxpYXNhYmxlID0gdHJ1ZTtcclxuXHQgICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcclxuXHJcblx0ICAgIHJldHVybiByZXQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwSGVscGVyOiBmdW5jdGlvbiBzZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUsIGJsb2NrSGVscGVyKSB7XHJcblx0ICAgIHZhciBwYXJhbXMgPSBbXSxcclxuXHQgICAgICAgIHBhcmFtc0luaXQgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUsIHBhcmFtcywgYmxvY2tIZWxwZXIpO1xyXG5cdCAgICB2YXIgZm91bmRIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoJ2hlbHBlcnMnLCBuYW1lLCAnaGVscGVyJyksXHJcblx0ICAgICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKHRoaXMuY29udGV4dE5hbWUoMCkgKyAnICE9IG51bGwgPyAnICsgdGhpcy5jb250ZXh0TmFtZSgwKSArICcgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KScpO1xyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICBwYXJhbXM6IHBhcmFtcyxcclxuXHQgICAgICBwYXJhbXNJbml0OiBwYXJhbXNJbml0LFxyXG5cdCAgICAgIG5hbWU6IGZvdW5kSGVscGVyLFxyXG5cdCAgICAgIGNhbGxQYXJhbXM6IFtjYWxsQ29udGV4dF0uY29uY2F0KHBhcmFtcylcclxuXHQgICAgfTtcclxuXHQgIH0sXHJcblxyXG5cdCAgc2V0dXBQYXJhbXM6IGZ1bmN0aW9uIHNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpIHtcclxuXHQgICAgdmFyIG9wdGlvbnMgPSB7fSxcclxuXHQgICAgICAgIGNvbnRleHRzID0gW10sXHJcblx0ICAgICAgICB0eXBlcyA9IFtdLFxyXG5cdCAgICAgICAgaWRzID0gW10sXHJcblx0ICAgICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcclxuXHQgICAgICAgIHBhcmFtID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgaWYgKG9iamVjdEFyZ3MpIHtcclxuXHQgICAgICBwYXJhbXMgPSBbXTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgb3B0aW9ucy5uYW1lID0gdGhpcy5xdW90ZWRTdHJpbmcoaGVscGVyKTtcclxuXHQgICAgb3B0aW9ucy5oYXNoID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICBvcHRpb25zLmhhc2hJZHMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy5oYXNoVHlwZXMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgICAgb3B0aW9ucy5oYXNoQ29udGV4dHMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxyXG5cdCAgICAgICAgcHJvZ3JhbSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHJcblx0ICAgIC8vIEF2b2lkIHNldHRpbmcgZm4gYW5kIGludmVyc2UgaWYgbmVpdGhlciBhcmUgc2V0LiBUaGlzIGFsbG93c1xyXG5cdCAgICAvLyBoZWxwZXJzIHRvIGRvIGEgY2hlY2sgZm9yIGBpZiAob3B0aW9ucy5mbilgXHJcblx0ICAgIGlmIChwcm9ncmFtIHx8IGludmVyc2UpIHtcclxuXHQgICAgICBvcHRpb25zLmZuID0gcHJvZ3JhbSB8fCAnY29udGFpbmVyLm5vb3AnO1xyXG5cdCAgICAgIG9wdGlvbnMuaW52ZXJzZSA9IGludmVyc2UgfHwgJ2NvbnRhaW5lci5ub29wJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLy8gVGhlIHBhcmFtZXRlcnMgZ28gb24gdG8gdGhlIHN0YWNrIGluIG9yZGVyIChtYWtpbmcgc3VyZSB0aGF0IHRoZXkgYXJlIGV2YWx1YXRlZCBpbiBvcmRlcilcclxuXHQgICAgLy8gc28gd2UgbmVlZCB0byBwb3AgdGhlbSBvZmYgdGhlIHN0YWNrIGluIHJldmVyc2Ugb3JkZXJcclxuXHQgICAgdmFyIGkgPSBwYXJhbVNpemU7XHJcblx0ICAgIHdoaWxlIChpLS0pIHtcclxuXHQgICAgICBwYXJhbSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcclxuXHJcblx0ICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICAgIGlkc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgICB0eXBlc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICAgIGNvbnRleHRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKG9iamVjdEFyZ3MpIHtcclxuXHQgICAgICBvcHRpb25zLmFyZ3MgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHBhcmFtcyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XHJcblx0ICAgICAgb3B0aW9ucy5pZHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGlkcyk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy50eXBlcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkodHlwZXMpO1xyXG5cdCAgICAgIG9wdGlvbnMuY29udGV4dHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGNvbnRleHRzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XHJcblx0ICAgICAgb3B0aW9ucy5kYXRhID0gJ2RhdGEnO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9ICdibG9ja1BhcmFtcyc7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIG9wdGlvbnM7XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwSGVscGVyQXJnczogZnVuY3Rpb24gc2V0dXBIZWxwZXJBcmdzKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMsIHVzZVJlZ2lzdGVyKSB7XHJcblx0ICAgIHZhciBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcclxuXHQgICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcclxuXHQgICAgaWYgKHVzZVJlZ2lzdGVyKSB7XHJcblx0ICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xyXG5cdCAgICAgIHBhcmFtcy5wdXNoKCdvcHRpb25zJyk7XHJcblx0ICAgICAgcmV0dXJuIFsnb3B0aW9ucz0nLCBvcHRpb25zXTtcclxuXHQgICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcclxuXHQgICAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcclxuXHQgICAgICByZXR1cm4gJyc7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgdmFyIHJlc2VydmVkV29yZHMgPSAoJ2JyZWFrIGVsc2UgbmV3IHZhcicgKyAnIGNhc2UgZmluYWxseSByZXR1cm4gdm9pZCcgKyAnIGNhdGNoIGZvciBzd2l0Y2ggd2hpbGUnICsgJyBjb250aW51ZSBmdW5jdGlvbiB0aGlzIHdpdGgnICsgJyBkZWZhdWx0IGlmIHRocm93JyArICcgZGVsZXRlIGluIHRyeScgKyAnIGRvIGluc3RhbmNlb2YgdHlwZW9mJyArICcgYWJzdHJhY3QgZW51bSBpbnQgc2hvcnQnICsgJyBib29sZWFuIGV4cG9ydCBpbnRlcmZhY2Ugc3RhdGljJyArICcgYnl0ZSBleHRlbmRzIGxvbmcgc3VwZXInICsgJyBjaGFyIGZpbmFsIG5hdGl2ZSBzeW5jaHJvbml6ZWQnICsgJyBjbGFzcyBmbG9hdCBwYWNrYWdlIHRocm93cycgKyAnIGNvbnN0IGdvdG8gcHJpdmF0ZSB0cmFuc2llbnQnICsgJyBkZWJ1Z2dlciBpbXBsZW1lbnRzIHByb3RlY3RlZCB2b2xhdGlsZScgKyAnIGRvdWJsZSBpbXBvcnQgcHVibGljIGxldCB5aWVsZCBhd2FpdCcgKyAnIG51bGwgdHJ1ZSBmYWxzZScpLnNwbGl0KCcgJyk7XHJcblxyXG5cdCAgdmFyIGNvbXBpbGVyV29yZHMgPSBKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFMgPSB7fTtcclxuXHJcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHJlc2VydmVkV29yZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xyXG5cdCAgfVxyXG5cdH0pKCk7XHJcblxyXG5cdEphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcblx0ICByZXR1cm4gIUphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEU1tuYW1lXSAmJiAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvLnRlc3QobmFtZSk7XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gc3RyaWN0TG9va3VwKHJlcXVpcmVUZXJtaW5hbCwgY29tcGlsZXIsIHBhcnRzLCB0eXBlKSB7XHJcblx0ICB2YXIgc3RhY2sgPSBjb21waWxlci5wb3BTdGFjaygpLFxyXG5cdCAgICAgIGkgPSAwLFxyXG5cdCAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aDtcclxuXHQgIGlmIChyZXF1aXJlVGVybWluYWwpIHtcclxuXHQgICAgbGVuLS07XHJcblx0ICB9XHJcblxyXG5cdCAgZm9yICg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICBzdGFjayA9IGNvbXBpbGVyLm5hbWVMb29rdXAoc3RhY2ssIHBhcnRzW2ldLCB0eXBlKTtcclxuXHQgIH1cclxuXHJcblx0ICBpZiAocmVxdWlyZVRlcm1pbmFsKSB7XHJcblx0ICAgIHJldHVybiBbY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksICcoJywgc3RhY2ssICcsICcsIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksICcpJ107XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICByZXR1cm4gc3RhY2s7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBKYXZhU2NyaXB0Q29tcGlsZXI7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogNDMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQvKiBnbG9iYWwgZGVmaW5lICovXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdHRyeSB7XHJcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgaWYgKGZhbHNlKSB7XHJcblx0ICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdFxyXG5cdCAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS5cclxuXHQgICAgdmFyIFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcclxuXHQgICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xyXG5cdCAgfVxyXG5cdH0gY2F0Y2ggKGVycikge31cclxuXHQvKiBOT1AgKi9cclxuXHJcblx0LyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqL1xyXG5cdGlmICghU291cmNlTm9kZSkge1xyXG5cdCAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xyXG5cdCAgICB0aGlzLnNyYyA9ICcnO1xyXG5cdCAgICBpZiAoY2h1bmtzKSB7XHJcblx0ICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0ICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcclxuXHQgICAgYWRkOiBmdW5jdGlvbiBhZGQoY2h1bmtzKSB7XHJcblx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHtcclxuXHQgICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xyXG5cdCAgICB9LFxyXG5cdCAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGNodW5rcykge1xyXG5cdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7XHJcblx0ICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XHJcblx0ICAgIH0sXHJcblx0ICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24gdG9TdHJpbmdXaXRoU291cmNlTWFwKCkge1xyXG5cdCAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xyXG5cdCAgICB9LFxyXG5cdCAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMuc3JjO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcclxuXHQgIGlmIChfdXRpbHMuaXNBcnJheShjaHVuaykpIHtcclxuXHQgICAgdmFyIHJldCA9IFtdO1xyXG5cclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gcmV0O1xyXG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XHJcblx0ICAgIC8vIEhhbmRsZSBwcmltaXRpdmVzIHRoYXQgdGhlIFNvdXJjZU5vZGUgd2lsbCB0aHJvdyB1cCBvblxyXG5cdCAgICByZXR1cm4gY2h1bmsgKyAnJztcclxuXHQgIH1cclxuXHQgIHJldHVybiBjaHVuaztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xyXG5cdCAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcclxuXHQgIHRoaXMuc291cmNlID0gW107XHJcblx0fVxyXG5cclxuXHRDb2RlR2VuLnByb3RvdHlwZSA9IHtcclxuXHQgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XHJcblx0ICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoO1xyXG5cdCAgfSxcclxuXHQgIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoc291cmNlLCBsb2MpIHtcclxuXHQgICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcclxuXHQgIH0sXHJcblx0ICBwdXNoOiBmdW5jdGlvbiBwdXNoKHNvdXJjZSwgbG9jKSB7XHJcblx0ICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcclxuXHQgICAgdmFyIHNvdXJjZSA9IHRoaXMuZW1wdHkoKTtcclxuXHQgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChsaW5lKSB7XHJcblx0ICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xcbiddKTtcclxuXHQgICAgfSk7XHJcblx0ICAgIHJldHVybiBzb3VyY2U7XHJcblx0ICB9LFxyXG5cclxuXHQgIGVhY2g6IGZ1bmN0aW9uIGVhY2goaXRlcikge1xyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XHJcblx0ICAgIHZhciBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9O1xyXG5cdCAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XHJcblx0ICB9LFxyXG5cdCAgd3JhcDogZnVuY3Rpb24gd3JhcChjaHVuaykge1xyXG5cdCAgICB2YXIgbG9jID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwgeyBzdGFydDoge30gfSA6IGFyZ3VtZW50c1sxXTtcclxuXHJcblx0ICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcclxuXHQgICAgICByZXR1cm4gY2h1bms7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGNodW5rID0gY2FzdENodW5rKGNodW5rLCB0aGlzLCBsb2MpO1xyXG5cclxuXHQgICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUsIGNodW5rKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoZm4sIHR5cGUsIHBhcmFtcykge1xyXG5cdCAgICBwYXJhbXMgPSB0aGlzLmdlbmVyYXRlTGlzdChwYXJhbXMpO1xyXG5cdCAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIHF1b3RlZFN0cmluZzogZnVuY3Rpb24gcXVvdGVkU3RyaW5nKHN0cikge1xyXG5cdCAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJykucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcclxuXHQgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpICsgJ1wiJztcclxuXHQgIH0sXHJcblxyXG5cdCAgb2JqZWN0TGl0ZXJhbDogZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbChvYmopIHtcclxuXHQgICAgdmFyIHBhaXJzID0gW107XHJcblxyXG5cdCAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcblx0ICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0ICAgICAgICB2YXIgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xyXG5cdCAgICAgICAgaWYgKHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdCAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xyXG5cdCAgICByZXQucHJlcGVuZCgneycpO1xyXG5cdCAgICByZXQuYWRkKCd9Jyk7XHJcblx0ICAgIHJldHVybiByZXQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIGdlbmVyYXRlTGlzdDogZnVuY3Rpb24gZ2VuZXJhdGVMaXN0KGVudHJpZXMpIHtcclxuXHQgICAgdmFyIHJldCA9IHRoaXMuZW1wdHkoKTtcclxuXHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgaWYgKGkpIHtcclxuXHQgICAgICAgIHJldC5hZGQoJywnKTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0sXHJcblxyXG5cdCAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24gZ2VuZXJhdGVBcnJheShlbnRyaWVzKSB7XHJcblx0ICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcclxuXHQgICAgcmV0LnByZXBlbmQoJ1snKTtcclxuXHQgICAgcmV0LmFkZCgnXScpO1xyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBDb2RlR2VuO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSlcclxuLyoqKioqKi8gXSlcclxufSk7XHJcbjsiXX0=
